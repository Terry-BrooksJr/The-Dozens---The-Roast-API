[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "MongoEngine",
        "importPath": "flask_mongoengine",
        "description": "flask_mongoengine",
        "isExtraImport": true,
        "detail": "flask_mongoengine",
        "documentation": {}
    },
    {
        "label": "connect",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "pendulum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pendulum",
        "description": "pendulum",
        "detail": "pendulum",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "GateKeeper",
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "isExtraImport": true,
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "GateKeeper",
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "isExtraImport": true,
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "GateKeeper",
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "isExtraImport": true,
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis",
        "description": "redis",
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "copy_current_request_context",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Namespace",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "Namespace",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "apidoc",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "marshal_with",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "Api",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "BadRequest",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database.db",
        "description": "database.db",
        "isExtraImport": true,
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database.db",
        "description": "database.db",
        "isExtraImport": true,
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database.db",
        "description": "database.db",
        "isExtraImport": true,
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "initialize_db",
        "importPath": "database.db",
        "description": "database.db",
        "isExtraImport": true,
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "Insult",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "Insult",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "Insult",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "EmailAlreadyExistsError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UnauthorizedError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UserDoesNotExist",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "SchemaValidationError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "Jokester",
        "importPath": "utils.jokester",
        "description": "utils.jokester",
        "isExtraImport": true,
        "detail": "utils.jokester",
        "documentation": {}
    },
    {
        "label": "get_random_joke",
        "importPath": "utils.jokester",
        "description": "utils.jokester",
        "isExtraImport": true,
        "detail": "utils.jokester",
        "documentation": {}
    },
    {
        "label": "get_censored_joke",
        "importPath": "utils.jokester",
        "description": "utils.jokester",
        "isExtraImport": true,
        "detail": "utils.jokester",
        "documentation": {}
    },
    {
        "label": "get_categorized_joke",
        "importPath": "utils.jokester",
        "description": "utils.jokester",
        "isExtraImport": true,
        "detail": "utils.jokester",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "ConnectionFailure",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "Collection",
        "importPath": "pymongo.collection",
        "description": "pymongo.collection",
        "isExtraImport": true,
        "detail": "pymongo.collection",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "pymongo.database",
        "description": "pymongo.database",
        "isExtraImport": true,
        "detail": "pymongo.database",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "pytest_check",
        "description": "pytest_check",
        "isExtraImport": true,
        "detail": "pytest_check",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "pytest_check",
        "description": "pytest_check",
        "isExtraImport": true,
        "detail": "pytest_check",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "checkpw",
        "importPath": "bcrypt",
        "description": "bcrypt",
        "isExtraImport": true,
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "gensalt",
        "importPath": "bcrypt",
        "description": "bcrypt",
        "isExtraImport": true,
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "hashpw",
        "importPath": "bcrypt",
        "description": "bcrypt",
        "isExtraImport": true,
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "MultiDict",
        "importPath": "werkzeug.datastructures",
        "description": "werkzeug.datastructures",
        "isExtraImport": true,
        "detail": "werkzeug.datastructures",
        "documentation": {}
    },
    {
        "label": "WARNING",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "FileHandler",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "default_handler",
        "importPath": "flask.logging",
        "description": "flask.logging",
        "isExtraImport": true,
        "detail": "flask.logging",
        "documentation": {}
    },
    {
        "label": "Bcrypt",
        "importPath": "flask_bcrypt",
        "description": "flask_bcrypt",
        "isExtraImport": true,
        "detail": "flask_bcrypt",
        "documentation": {}
    },
    {
        "label": "utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils",
        "description": "utils",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "resources",
        "description": "resources",
        "isExtraImport": true,
        "detail": "resources",
        "documentation": {}
    },
    {
        "label": "initialize_routes",
        "importPath": "resources.routes",
        "description": "resources.routes",
        "isExtraImport": true,
        "detail": "resources.routes",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "description": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "description": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "peekOfCode": "def main(argv):\n    results = []\n    for line in sys.stdin.readlines():\n        filename, line_number, message = line.split(\":\")\n        results.append(\n            to_result_sarif(\n                filename, int(line_number), 0, \"misspelled\", message.strip()\n            )\n        )\n    sarif = {",
        "detail": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.nancy.parse",
        "description": ".trunk.plugins.trunk.linters.nancy.parse",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.nancy.parse",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.nancy.parse",
        "description": ".trunk.plugins.trunk.linters.nancy.parse",
        "peekOfCode": "def main(argv):\n    results = []\n    nancy_output = json.load(sys.stdin)\n    for vuln_entry in nancy_output.get(\"vulnerable\", []):\n        for vuln in vuln_entry.get(\"Vulnerabilities\", []):\n            results.append(\n                to_result_sarif(\n                    \".\",\n                    0,\n                    0,",
        "detail": ".trunk.plugins.trunk.linters.nancy.parse",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "peekOfCode": "def main(argv):\n    sqlfluff_json = json.load(sys.stdin)\n    results = []\n    for result in sqlfluff_json:\n        filepath = result[\"filepath\"]\n        for violation in result[\"violations\"]:\n            line_number = violation[\"line_no\"]\n            column_number = violation[\"line_pos\"]\n            rule_id = violation[\"code\"]\n            message = violation[\"description\"]",
        "detail": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "documentation": {}
    },
    {
        "label": "initialize_db",
        "kind": 2,
        "importPath": "database.db",
        "description": "database.db",
        "peekOfCode": "def initialize_db(app):\n    db.init_app(app)",
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "database.db",
        "description": "database.db",
        "peekOfCode": "db = MongoEngine()\nconnect(host=os.getenv(\"mongodb+srv://RoastAPI:oL5o8De5uHsXI4if@primary.kkk2b.mongodb.net/InsultVault\"))\ndef initialize_db(app):\n    db.init_app(app)",
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "Insult",
        "kind": 6,
        "importPath": "database.models",
        "description": "database.models",
        "peekOfCode": "class Insult(db.Document):\n    content = db.StringField(required=True)\n    category = db.StringField(required=True)\n    explict = db.BooleanField(required=True)\n    added_on = db.StringField(required=True)\n    status = db.StringField(required=True, default=\"active\")\n    added_by = db.StringField(required=True)\n    meta = {\"collection\": \"insults\"}\nclass User(db.Document):\n    email = db.EmailField(required=True, unique=True)",
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "database.models",
        "description": "database.models",
        "peekOfCode": "class User(db.Document):\n    email = db.EmailField(required=True, unique=True)\n    password = db.StringField(required=True, min_length=6)\n    joined_on = db.StringField(required=True)\n    meta = {\"collection\": \"users\", \"db\": \"UserCreds\"}\n    def hash_password(self):\n        self.password = gatekeeper.encrypt_password(self.password)",
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "gatekeeper",
        "kind": 5,
        "importPath": "database.models",
        "description": "database.models",
        "peekOfCode": "gatekeeper = GateKeeper()\nnow = pendulum.now()\nclass Insult(db.Document):\n    content = db.StringField(required=True)\n    category = db.StringField(required=True)\n    explict = db.BooleanField(required=True)\n    added_on = db.StringField(required=True)\n    status = db.StringField(required=True, default=\"active\")\n    added_by = db.StringField(required=True)\n    meta = {\"collection\": \"insults\"}",
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "database.models",
        "description": "database.models",
        "peekOfCode": "now = pendulum.now()\nclass Insult(db.Document):\n    content = db.StringField(required=True)\n    category = db.StringField(required=True)\n    explict = db.BooleanField(required=True)\n    added_on = db.StringField(required=True)\n    status = db.StringField(required=True, default=\"active\")\n    added_by = db.StringField(required=True)\n    meta = {\"collection\": \"insults\"}\nclass User(db.Document):",
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "SignupApi",
        "kind": 6,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "class SignupApi(Resource):\n    @api.doc(model=signup_model, body=User)\n    @api.response(201, \"User Created\")\n    @api.response(400, \"Bad Request\")\n    @api.response(401, \"Unauthroized\")\n    @api.doc(parser=parser)\n    @api.expect(signup_model)\n    def post(self):\n        body = request.get_json()\n        # # Verifying the Required Keys Are In Payload",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "LoginApi",
        "kind": 6,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "class LoginApi(Resource):\n    @api.doc(model=token_request_model, body=User)\n    @api.response(401, \"Unauthorized - Incorrect Password or Un-Registred Email\")\n    @api.response(201, \"Token Issued\")\n    @api.doc(params={\"email\": \"A Vaild Email Address\", \"location\": \"form\"})\n    @api.doc(params={\"Password\": \"Any combination Of 7 or More ASCII Character.\"})\n    @api.expect(token_request_model)\n    def post(self):\n        body = request.get_json()\n        # if \"email\" not in body.keys():",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "api = Namespace(\n    \"Authorizations & Authentication\",\n    description=\"These endpoints encompass all the endpoints needed to\\n 1. Sign-Up to contribute a joke. \\n 2. Provisioning a Bearer Token require at the time of submission. <br> <sub>Note: The Bearer Token is required to submit a joke, and registration is required to receive a token.</sub>\"\n)\n# Namespace Related Models\nsignup_model = api.model(\n    \"SignUp\",\n    {\n        \"email\": fields.String(required=True),\n        \"password\": fields.String(min_length=7, required=True),",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "signup_model",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "signup_model = api.model(\n    \"SignUp\",\n    {\n        \"email\": fields.String(required=True),\n        \"password\": fields.String(min_length=7, required=True),\n    },\n)\ntoken_request_model = api.model(\n    \"Bearer Token Provision\",\n    {",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "token_request_model",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "token_request_model = api.model(\n    \"Bearer Token Provision\",\n    {\n        \"email\": fields.String(required=True),\n        \"password\": fields.String(min_length=7, required=True),\n    },\n)\n# Top-Level Vaariables/Plugins\ngatekeeper = GateKeeper()\njwt_redis_blocklist = redis.StrictRedis(",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "gatekeeper",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "gatekeeper = GateKeeper()\njwt_redis_blocklist = redis.StrictRedis(\n    host=os.getenv(\"REDIS_URI\"), port=6379, db=0, decode_responses=True\n)\nparser = reqparse.RequestParser()\nparser.add_argument(\"email\", type=str, required=True, location=\"form\")\nparser.add_argument(\"password\", type=str, required=True, location=\"form\")\nnow = pendulum.now()\n@api.route(\"auth\")\nclass SignupApi(Resource):",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "jwt_redis_blocklist",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "jwt_redis_blocklist = redis.StrictRedis(\n    host=os.getenv(\"REDIS_URI\"), port=6379, db=0, decode_responses=True\n)\nparser = reqparse.RequestParser()\nparser.add_argument(\"email\", type=str, required=True, location=\"form\")\nparser.add_argument(\"password\", type=str, required=True, location=\"form\")\nnow = pendulum.now()\n@api.route(\"auth\")\nclass SignupApi(Resource):\n    @api.doc(model=signup_model, body=User)",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "parser = reqparse.RequestParser()\nparser.add_argument(\"email\", type=str, required=True, location=\"form\")\nparser.add_argument(\"password\", type=str, required=True, location=\"form\")\nnow = pendulum.now()\n@api.route(\"auth\")\nclass SignupApi(Resource):\n    @api.doc(model=signup_model, body=User)\n    @api.response(201, \"User Created\")\n    @api.response(400, \"Bad Request\")\n    @api.response(401, \"Unauthroized\")",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "now = pendulum.now()\n@api.route(\"auth\")\nclass SignupApi(Resource):\n    @api.doc(model=signup_model, body=User)\n    @api.response(201, \"User Created\")\n    @api.response(400, \"Bad Request\")\n    @api.response(401, \"Unauthroized\")\n    @api.doc(parser=parser)\n    @api.expect(signup_model)\n    def post(self):",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "InsultsAPI",
        "kind": 6,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "class InsultsAPI(Resource):\n    @marshal_with(GET_fields, skip_none=True)\n    @api.doc(model=GET_fields, parser=get_parsers)\n    def get(self):\n        joke = Jokester.get_random_joke()\n        return {\"Yo Mama So...\": joke['content']}, 200\n    # @jwt_required\n    # @marshal_with(POST_fields)\n    # def post(self):\n    #     if \"content\" not in body.keys():",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "api = Namespace(\"Insults\", description=\"Joke operations\")\n#!Namespace Related Models\nGET_fields = api.model(\n    \"Insult (Get Method)\",\n    {\n        \"explicit\": fields.Boolean,\n        \"catagory\": fields.String,\n    },\n)\nPOST_fields = api.model(\"Insult (Post Method)\",{",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "GET_fields",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "GET_fields = api.model(\n    \"Insult (Get Method)\",\n    {\n        \"explicit\": fields.Boolean,\n        \"catagory\": fields.String,\n    },\n)\nPOST_fields = api.model(\"Insult (Post Method)\",{\n    \"content\": fields.String(),\n    \"explicit\": fields.Boolean(),",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "POST_fields",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "POST_fields = api.model(\"Insult (Post Method)\",{\n    \"content\": fields.String(),\n    \"explicit\": fields.Boolean(),\n    \"catagory\": fields.String(),\n})\n#! Top-Level Vaariables/Plugins\nnow = pendulum.now()\ngatekeeper = GateKeeper()\nparser = reqparse.RequestParser()\njoke_categories = Jokester.get_catagories()",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "now = pendulum.now()\ngatekeeper = GateKeeper()\nparser = reqparse.RequestParser()\njoke_categories = Jokester.get_catagories()\n#!Request Parameters Designations\nparser.add_argument(\"content\", type=str, required=True, location=\"form\")\nparser.add_argument(\"explicit\", type=str, required=True, location=\"form\")\nparser.add_argument(\"catagory\", type=str, required=True, location=\"form\", help=\"specify the jokes to a  category, if it doesn't fit to any choose 'snowflake'\", choices=joke_categories)\nget_parsers = parser.copy()\nPOST_parsers = parser.copy()",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "gatekeeper",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "gatekeeper = GateKeeper()\nparser = reqparse.RequestParser()\njoke_categories = Jokester.get_catagories()\n#!Request Parameters Designations\nparser.add_argument(\"content\", type=str, required=True, location=\"form\")\nparser.add_argument(\"explicit\", type=str, required=True, location=\"form\")\nparser.add_argument(\"catagory\", type=str, required=True, location=\"form\", help=\"specify the jokes to a  category, if it doesn't fit to any choose 'snowflake'\", choices=joke_categories)\nget_parsers = parser.copy()\nPOST_parsers = parser.copy()\nget_parsers.replace_argument(\"explicit\", type=str, required=False, location=\"headers\", help=\"Explicit Filter. When Set to True the default filter is turned off.\", choices=[\"true\", \"false\"])",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "parser = reqparse.RequestParser()\njoke_categories = Jokester.get_catagories()\n#!Request Parameters Designations\nparser.add_argument(\"content\", type=str, required=True, location=\"form\")\nparser.add_argument(\"explicit\", type=str, required=True, location=\"form\")\nparser.add_argument(\"catagory\", type=str, required=True, location=\"form\", help=\"specify the jokes to a  category, if it doesn't fit to any choose 'snowflake'\", choices=joke_categories)\nget_parsers = parser.copy()\nPOST_parsers = parser.copy()\nget_parsers.replace_argument(\"explicit\", type=str, required=False, location=\"headers\", help=\"Explicit Filter. When Set to True the default filter is turned off.\", choices=[\"true\", \"false\"])\nget_parsers.replace_argument(\"catagory\", type=str, required=False, location=\"args\", help=\"limit the jokes to a specific category\", choices=joke_categories)",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "joke_categories",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "joke_categories = Jokester.get_catagories()\n#!Request Parameters Designations\nparser.add_argument(\"content\", type=str, required=True, location=\"form\")\nparser.add_argument(\"explicit\", type=str, required=True, location=\"form\")\nparser.add_argument(\"catagory\", type=str, required=True, location=\"form\", help=\"specify the jokes to a  category, if it doesn't fit to any choose 'snowflake'\", choices=joke_categories)\nget_parsers = parser.copy()\nPOST_parsers = parser.copy()\nget_parsers.replace_argument(\"explicit\", type=str, required=False, location=\"headers\", help=\"Explicit Filter. When Set to True the default filter is turned off.\", choices=[\"true\", \"false\"])\nget_parsers.replace_argument(\"catagory\", type=str, required=False, location=\"args\", help=\"limit the jokes to a specific category\", choices=joke_categories)\nget_parsers.remove_argument(\"content\")",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "get_parsers",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "get_parsers = parser.copy()\nPOST_parsers = parser.copy()\nget_parsers.replace_argument(\"explicit\", type=str, required=False, location=\"headers\", help=\"Explicit Filter. When Set to True the default filter is turned off.\", choices=[\"true\", \"false\"])\nget_parsers.replace_argument(\"catagory\", type=str, required=False, location=\"args\", help=\"limit the jokes to a specific category\", choices=joke_categories)\nget_parsers.remove_argument(\"content\")\n@api.route(\"insult\")\nclass InsultsAPI(Resource):\n    @marshal_with(GET_fields, skip_none=True)\n    @api.doc(model=GET_fields, parser=get_parsers)\n    def get(self):",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "POST_parsers",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "POST_parsers = parser.copy()\nget_parsers.replace_argument(\"explicit\", type=str, required=False, location=\"headers\", help=\"Explicit Filter. When Set to True the default filter is turned off.\", choices=[\"true\", \"false\"])\nget_parsers.replace_argument(\"catagory\", type=str, required=False, location=\"args\", help=\"limit the jokes to a specific category\", choices=joke_categories)\nget_parsers.remove_argument(\"content\")\n@api.route(\"insult\")\nclass InsultsAPI(Resource):\n    @marshal_with(GET_fields, skip_none=True)\n    @api.doc(model=GET_fields, parser=get_parsers)\n    def get(self):\n        joke = Jokester.get_random_joke()",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "ApiTest",
        "kind": 6,
        "importPath": "resources.routes",
        "description": "resources.routes",
        "peekOfCode": "class ApiTest(Resource):\n    \"\"\"Class for testing the API test Endpoints.\n    Inherits from the flask_restplus Resource class.\n    \"\"\"\n    def get(self):\n        return {\n            \"status\": f\"As of {now.to_datetime_string()} UTC the API Is Up and actively insulting millions of Mamas\"\n        }, 200\n    def post(self):\n        body = request.get_json()",
        "detail": "resources.routes",
        "documentation": {}
    },
    {
        "label": "initialize_routes",
        "kind": 2,
        "importPath": "resources.routes",
        "description": "resources.routes",
        "peekOfCode": "def initialize_routes(api):\n    # Testinf Endpoints\n    api.add_resource(ApiTest, \"/test\", \"/status\")\n    # Insult Resources Endpoints\n    api.add_resource(InsultsAPI, \"/insult\", \"/\")\n    # Auth Endpoints\n    api.add_resource(SignupApi, \"/auth/signup\", \"/auth\", \"/signup\")\n    api.add_resource(LoginApi, \"/token\", \"/key\")",
        "detail": "resources.routes",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "resources.routes",
        "description": "resources.routes",
        "peekOfCode": "now = pendulum.now()\nclass ApiTest(Resource):\n    \"\"\"Class for testing the API test Endpoints.\n    Inherits from the flask_restplus Resource class.\n    \"\"\"\n    def get(self):\n        return {\n            \"status\": f\"As of {now.to_datetime_string()} UTC the API Is Up and actively insulting millions of Mamas\"\n        }, 200\n    def post(self):",
        "detail": "resources.routes",
        "documentation": {}
    },
    {
        "label": "SignUpApiTest",
        "kind": 6,
        "importPath": "test.test_auth",
        "description": "test.test_auth",
        "peekOfCode": "class SignUpApiTest(TestCase):\n    def SetUp(self):\n        self.app = app.test_client()\n        self.db = app.get_db()\n    def test_successful_signup(self):\n        test_user = User(\n            email=\"Pytest_User@gmail.com\",\n            password=\"Butter_Baby\",\n            joined_on=\"1970-01-01\",\n        )",
        "detail": "test.test_auth",
        "documentation": {}
    },
    {
        "label": "Test_DatabasConnection",
        "kind": 6,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "class Test_DatabasConnection(TestCase):\n    def test_database_connection(self):\n        with check:\n            assert isinstance(database, Database)\n    def test_insult_connection(self):\n        with check:\n            insult_count = database.insults\n            assert isinstance(insult_count, Collection)\n            # assert  insult_count > 0\n    def test_user_connection(self):",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "CONNECTION_STRING",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "CONNECTION_STRING = getenv(\"MONGODB_DEV_SETTINGS\")\nclient = MongoClient(\"mongodb://localhost:27017/InsultVault\")\n# mongoengine_connection = connect(alias=\"Mongo_Test_Connection\", host=CONNECTION_STRING)\ndatabase = client[\"InsultVault\"]\ninsult_collection = database[\"insults\"]\nuser_collections = database[\"users\"]\npipeline = {\"$count\": \"ObjectId\"}\nclass Test_DatabasConnection(TestCase):\n    def test_database_connection(self):\n        with check:",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "client = MongoClient(\"mongodb://localhost:27017/InsultVault\")\n# mongoengine_connection = connect(alias=\"Mongo_Test_Connection\", host=CONNECTION_STRING)\ndatabase = client[\"InsultVault\"]\ninsult_collection = database[\"insults\"]\nuser_collections = database[\"users\"]\npipeline = {\"$count\": \"ObjectId\"}\nclass Test_DatabasConnection(TestCase):\n    def test_database_connection(self):\n        with check:\n            assert isinstance(database, Database)",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "database = client[\"InsultVault\"]\ninsult_collection = database[\"insults\"]\nuser_collections = database[\"users\"]\npipeline = {\"$count\": \"ObjectId\"}\nclass Test_DatabasConnection(TestCase):\n    def test_database_connection(self):\n        with check:\n            assert isinstance(database, Database)\n    def test_insult_connection(self):\n        with check:",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "insult_collection",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "insult_collection = database[\"insults\"]\nuser_collections = database[\"users\"]\npipeline = {\"$count\": \"ObjectId\"}\nclass Test_DatabasConnection(TestCase):\n    def test_database_connection(self):\n        with check:\n            assert isinstance(database, Database)\n    def test_insult_connection(self):\n        with check:\n            insult_count = database.insults",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "user_collections",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "user_collections = database[\"users\"]\npipeline = {\"$count\": \"ObjectId\"}\nclass Test_DatabasConnection(TestCase):\n    def test_database_connection(self):\n        with check:\n            assert isinstance(database, Database)\n    def test_insult_connection(self):\n        with check:\n            insult_count = database.insults\n            assert isinstance(insult_count, Collection)",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "pipeline",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "pipeline = {\"$count\": \"ObjectId\"}\nclass Test_DatabasConnection(TestCase):\n    def test_database_connection(self):\n        with check:\n            assert isinstance(database, Database)\n    def test_insult_connection(self):\n        with check:\n            insult_count = database.insults\n            assert isinstance(insult_count, Collection)\n            # assert  insult_count > 0",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "InsultApiTest",
        "kind": 6,
        "importPath": "test.test_insults",
        "description": "test.test_insults",
        "peekOfCode": "class InsultApiTest(TestCase):\n    def test_get_random_joke(self):\n        with check:\n            joke = get_random_joke()\n    def get_censored_joke(self):\n        pass\n    def get_censored_joke(self):\n        pass",
        "detail": "test.test_insults",
        "documentation": {}
    },
    {
        "label": "InternalServerError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class InternalServerError(Exception):\n    pass\nclass SchemaValidationError(Exception):\n    pass\nclass TokenRevokedError(Exception):\n    pass\nclass EmailAlreadyExistsError(Exception):\n    pass\nclass UnauthorizedError(Exception):\n    pass",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "SchemaValidationError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class SchemaValidationError(Exception):\n    pass\nclass TokenRevokedError(Exception):\n    pass\nclass EmailAlreadyExistsError(Exception):\n    pass\nclass UnauthorizedError(Exception):\n    pass\nclass UserDoesNotExist(Exception):\n    pass",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "TokenRevokedError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class TokenRevokedError(Exception):\n    pass\nclass EmailAlreadyExistsError(Exception):\n    pass\nclass UnauthorizedError(Exception):\n    pass\nclass UserDoesNotExist(Exception):\n    pass\nclass ValidationError(Exception):\n    pass",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "EmailAlreadyExistsError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class EmailAlreadyExistsError(Exception):\n    pass\nclass UnauthorizedError(Exception):\n    pass\nclass UserDoesNotExist(Exception):\n    pass\nclass ValidationError(Exception):\n    pass\nerrors = {\n    \"InternalServerError\": {\"message\": \"Something went wrong\", \"status\": 500},",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UnauthorizedError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class UnauthorizedError(Exception):\n    pass\nclass UserDoesNotExist(Exception):\n    pass\nclass ValidationError(Exception):\n    pass\nerrors = {\n    \"InternalServerError\": {\"message\": \"Something went wrong\", \"status\": 500},\n    \"SchemaValidationError\": {\n        \"message\": \"Request is missing required fields\",",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UserDoesNotExist",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class UserDoesNotExist(Exception):\n    pass\nclass ValidationError(Exception):\n    pass\nerrors = {\n    \"InternalServerError\": {\"message\": \"Something went wrong\", \"status\": 500},\n    \"SchemaValidationError\": {\n        \"message\": \"Request is missing required fields\",\n        \"status\": 400,\n    },",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class ValidationError(Exception):\n    pass\nerrors = {\n    \"InternalServerError\": {\"message\": \"Something went wrong\", \"status\": 500},\n    \"SchemaValidationError\": {\n        \"message\": \"Request is missing required fields\",\n        \"status\": 400,\n    },\n    \"EmailAlreadyExistsError\": {\n        \"message\": \"User with given email address already exists\",",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "errors",
        "kind": 5,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "errors = {\n    \"InternalServerError\": {\"message\": \"Something went wrong\", \"status\": 500},\n    \"SchemaValidationError\": {\n        \"message\": \"Request is missing required fields\",\n        \"status\": 400,\n    },\n    \"EmailAlreadyExistsError\": {\n        \"message\": \"User with given email address already exists\",\n        \"status\": 409,\n    },",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "GateKeeper",
        "kind": 6,
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "peekOfCode": "class GateKeeper:\n    #!TODO: Refactor to make these Static Methods\n    def check_if_token_is_revoked(self, jwt: dict):\n        jti = jwt_payload[\"jti\"],\n        token_in_redis = jwt_redis_blocklist.get(jti)\n        return token_in_redis is not None\n    def revoke_token(self):\n        jti = get_jwt()[\"jti\"]\n        jwt_redis_blocklist.set(jti, \"\", ex=ACCESS_EXPIRES)\n        return jsonify(msg=\"Access token revoked\")",
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "jwt_redis_blocklist",
        "kind": 5,
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "peekOfCode": "jwt_redis_blocklist = redis.StrictRedis(\n    host=os.getenv(\"REDIS_URI\"), port=6379, db=0, decode_responses=True\n)\nACCESS_EXPIRES = timedelta(hours=1)\nTOKEN_EXPIRES = timedelta(days=7)\nclass GateKeeper:\n    #!TODO: Refactor to make these Static Methods\n    def check_if_token_is_revoked(self, jwt: dict):\n        jti = jwt_payload[\"jti\"],\n        token_in_redis = jwt_redis_blocklist.get(jti)",
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "ACCESS_EXPIRES",
        "kind": 5,
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "peekOfCode": "ACCESS_EXPIRES = timedelta(hours=1)\nTOKEN_EXPIRES = timedelta(days=7)\nclass GateKeeper:\n    #!TODO: Refactor to make these Static Methods\n    def check_if_token_is_revoked(self, jwt: dict):\n        jti = jwt_payload[\"jti\"],\n        token_in_redis = jwt_redis_blocklist.get(jti)\n        return token_in_redis is not None\n    def revoke_token(self):\n        jti = get_jwt()[\"jti\"]",
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "TOKEN_EXPIRES",
        "kind": 5,
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "peekOfCode": "TOKEN_EXPIRES = timedelta(days=7)\nclass GateKeeper:\n    #!TODO: Refactor to make these Static Methods\n    def check_if_token_is_revoked(self, jwt: dict):\n        jti = jwt_payload[\"jti\"],\n        token_in_redis = jwt_redis_blocklist.get(jti)\n        return token_in_redis is not None\n    def revoke_token(self):\n        jti = get_jwt()[\"jti\"]\n        jwt_redis_blocklist.set(jti, \"\", ex=ACCESS_EXPIRES)",
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "Jokester",
        "kind": 6,
        "importPath": "utils.jokester",
        "description": "utils.jokester",
        "peekOfCode": "class Jokester:\n    @staticmethod\n    def get_random_joke():\n        randomized_pipeline = [{\"$sample\": {\"size\": 1}}]\n        randomized_joke = str()\n        insult = Insult.objects().aggregate(randomized_pipeline)\n        for doc in insult:\n            if doc[\"status\"] == \"Active\":\n                randomized_joke = doc[\"content\"]\n            else:",
        "detail": "utils.jokester",
        "documentation": {}
    },
    {
        "label": "parse_params",
        "kind": 2,
        "importPath": "utils.parser",
        "description": "utils.parser",
        "peekOfCode": "def parse_params(resolved_params):\n    parsed_params = {}\n    all_params = _get_locations()\n    for param_name in resolved_params:\n        locations = resolved_params[param_name].get(\"locations\", [\"args\", \"json\"])\n        params = _get_params(all_params, locations)\n        _check_required(param_name, resolved_params, params, locations)\n        if param_name in params:\n            parsed_params[param_name] = _check_type(param_name, resolved_params, params)\n        elif \"default\" in resolved_params[param_name]:",
        "detail": "utils.parser",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp.config.from_object(Config)\napp.config[\"MONGODB_SETTINGS\"] = Config.MONGODB_DEV_SETTINGS\n#!SECTION Initialize the API Endpoints and Plugins\napi.init_app(app)\ninitialize_db(app)\nbcrypt = Bcrypt(app)\njwt = JWTManager(app)\n#!SECTION Server Error Logging\nif not app.debug:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"MONGODB_SETTINGS\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"MONGODB_SETTINGS\"] = Config.MONGODB_DEV_SETTINGS\n#!SECTION Initialize the API Endpoints and Plugins\napi.init_app(app)\ninitialize_db(app)\nbcrypt = Bcrypt(app)\njwt = JWTManager(app)\n#!SECTION Server Error Logging\nif not app.debug:\n    file_handler = FileHandler(\"error.log\")\n    file_handler.setLevel(WARNING)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "bcrypt = Bcrypt(app)\njwt = JWTManager(app)\n#!SECTION Server Error Logging\nif not app.debug:\n    file_handler = FileHandler(\"error.log\")\n    file_handler.setLevel(WARNING)\n    app.logger.addHandler(file_handler)\nif __name__ == \"__main__\":\n    app.run(host=\"localhost\", port=6969, debug=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "jwt = JWTManager(app)\n#!SECTION Server Error Logging\nif not app.debug:\n    file_handler = FileHandler(\"error.log\")\n    file_handler.setLevel(WARNING)\n    app.logger.addHandler(file_handler)\nif __name__ == \"__main__\":\n    app.run(host=\"localhost\", port=6969, debug=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config(object):\n    DEBUG = True\n    SECRET_KEY = os.getenv(key=\"SECRET_KEY\")\n    MONGODB_DEV_SETTINGS = {\"host\": os.getenv(\"MONGODB_URI\"),\n                            \"alias\": \"default\"}\n    BUNDLE_ERROR = True\n    ENV = \"Development\"",
        "detail": "config",
        "documentation": {}
    }
]