[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "MongoEngine",
        "importPath": "flask_mongoengine",
        "description": "flask_mongoengine",
        "isExtraImport": true,
        "detail": "flask_mongoengine",
        "documentation": {}
    },
    {
        "label": "connect",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "connect",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "pendulum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pendulum",
        "description": "pendulum",
        "detail": "pendulum",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis",
        "description": "redis",
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "copy_current_request_context",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "verify_jwt_in_request",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "verify_jwt_in_request",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "Namespace",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "Namespace",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "apidoc",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "marshal_with",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "Namespace",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "BadRequest",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database.db",
        "description": "database.db",
        "isExtraImport": true,
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database.db",
        "description": "database.db",
        "isExtraImport": true,
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database.db",
        "description": "database.db",
        "isExtraImport": true,
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database.db",
        "description": "database.db",
        "isExtraImport": true,
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "initialize_db",
        "importPath": "database.db",
        "description": "database.db",
        "isExtraImport": true,
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "Insult",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "Insult",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "Insult",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "Insult",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "Insult",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "EmailAlreadyExistsError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UnauthorizedError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UserDoesNotExist",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "BannedUserError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "InvaildTokenError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UnauthorizedError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "BannedUserError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "EmailAlreadyExistsError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "InternalServerError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "SchemaValidationError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UnauthorizedError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UserDoesNotExist",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "BannedUserError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "GateKeeper",
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "isExtraImport": true,
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "GateKeeper",
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "isExtraImport": true,
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "GateKeeper",
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "isExtraImport": true,
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "GateKeeper",
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "isExtraImport": true,
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "Jokester",
        "importPath": "utils.jokester",
        "description": "utils.jokester",
        "isExtraImport": true,
        "detail": "utils.jokester",
        "documentation": {}
    },
    {
        "label": "Jokester",
        "importPath": "utils.jokester",
        "description": "utils.jokester",
        "isExtraImport": true,
        "detail": "utils.jokester",
        "documentation": {}
    },
    {
        "label": "Administrator",
        "importPath": "utils.administrator",
        "description": "utils.administrator",
        "isExtraImport": true,
        "detail": "utils.administrator",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "Collection",
        "importPath": "pymongo.collection",
        "description": "pymongo.collection",
        "isExtraImport": true,
        "detail": "pymongo.collection",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "pymongo.database",
        "description": "pymongo.database",
        "isExtraImport": true,
        "detail": "pymongo.database",
        "documentation": {}
    },
    {
        "label": "ConnectionFailure",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "pytest_check",
        "description": "pytest_check",
        "isExtraImport": true,
        "detail": "pytest_check",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "pytest_check",
        "description": "pytest_check",
        "isExtraImport": true,
        "detail": "pytest_check",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "pytest_check",
        "description": "pytest_check",
        "isExtraImport": true,
        "detail": "pytest_check",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "checkpw",
        "importPath": "bcrypt",
        "description": "bcrypt",
        "isExtraImport": true,
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "gensalt",
        "importPath": "bcrypt",
        "description": "bcrypt",
        "isExtraImport": true,
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "hashpw",
        "importPath": "bcrypt",
        "description": "bcrypt",
        "isExtraImport": true,
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "pipeline",
        "importPath": "test.test_db",
        "description": "test.test_db",
        "isExtraImport": true,
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "WARNING",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "FileHandler",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Bcrypt",
        "importPath": "flask_bcrypt",
        "description": "flask_bcrypt",
        "isExtraImport": true,
        "detail": "flask_bcrypt",
        "documentation": {}
    },
    {
        "label": "utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils",
        "description": "utils",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "resources",
        "description": "resources",
        "isExtraImport": true,
        "detail": "resources",
        "documentation": {}
    },
    {
        "label": "initialize_db",
        "kind": 2,
        "importPath": "database.db",
        "description": "database.db",
        "peekOfCode": "def initialize_db(app):\n    db.init_app(app)",
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "database.db",
        "description": "database.db",
        "peekOfCode": "db = MongoEngine()\nconnect(host=os.getenv(\"MONGODB_URI\"))\n1\ndef initialize_db(app):\n    db.init_app(app)",
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "Insult",
        "kind": 6,
        "importPath": "database.models",
        "description": "database.models",
        "peekOfCode": "class Insult(db.Document):\n    content = db.StringField(required=True)\n    category = db.StringField(required=True)\n    explict = db.BooleanField(required=True)\n    added_on = db.StringField(required=True)\n    added_by = db.StringField(required=True)\n    status = db.StringField(required=True, default=\"active\")\n    meta = {\"collection\": \"insults\"}\nclass User(db.Document):\n    email = db.EmailField(required=True, unique=True)",
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "database.models",
        "description": "database.models",
        "peekOfCode": "class User(db.Document):\n    email = db.EmailField(required=True, unique=True)\n    password = db.StringField(required=True, min_length=6)\n    joined_on = db.StringField(required=True)\n    status = db.StringField(required=True, default=\"active\")\n    meta = {\"collection\": \"users\"}",
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "database.models",
        "description": "database.models",
        "peekOfCode": "now = pendulum.now()\nclass Insult(db.Document):\n    content = db.StringField(required=True)\n    category = db.StringField(required=True)\n    explict = db.BooleanField(required=True)\n    added_on = db.StringField(required=True)\n    added_by = db.StringField(required=True)\n    status = db.StringField(required=True, default=\"active\")\n    meta = {\"collection\": \"insults\"}\nclass User(db.Document):",
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "SignupApi",
        "kind": 6,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "class SignupApi(Resource):\n    @api.doc(model=signup_model, body=User)\n    @api.response(201, \"User Created\")\n    @api.response(400, \"Bad Request\")\n    @api.response(401, \"Unauthroized\")\n    @api.doc(parser=parser)\n    @api.expect(signup_model)\n    #! POST Endpoint For User Registration\n    def post(self):\n        body = request.get_json()",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "LoginApi",
        "kind": 6,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "class LoginApi(Resource):\n    @api.doc(model=token_request_model, body=User)\n    @api.response(401, \"Unauthorized - Incorrect Password or Un-Registred Email\")\n    @api.response(201, \"Token Issued\")\n    @api.doc(params={\"email\": \"A Vaild Email Address\", \"location\": \"form\"})\n    @api.doc(params={\"Password\": \"Any combination Of 7 or More ASCII Character.\"})\n    @api.expect(token_request_model)\n    def post(self):\n        body = request.get_json()\n        email = body[\"email\"].lower()",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "api = Namespace(\n    \"Authorizations & Authentication\",\n    description=\"These endpoints encompass all the endpoints needed to:\\n 1. Sign-Up to contribute a joke. \\n 2. Provisioning a Bearer Token require at the time of submission. <br> <sub>Note: The Bearer Token is required to submit a joke, and registration is required to receive a token.</sub>\",\n)\n# Namespace Related Models\nsignup_model = api.model(\n    \"SignUp\",\n    {\n        \"email\": fields.String(required=True),\n        \"password\": fields.String(min_length=7, required=True),",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "signup_model",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "signup_model = api.model(\n    \"SignUp\",\n    {\n        \"email\": fields.String(required=True),\n        \"password\": fields.String(min_length=7, required=True),\n    },\n)\ntoken_request_model = api.model(\n    \"Bearer Token Provision\",\n    {",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "token_request_model",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "token_request_model = api.model(\n    \"Bearer Token Provision\",\n    {\n        \"email\": fields.String(required=True),\n        \"password\": fields.String(min_length=7, required=True),\n    },\n)\n# Top-Level Vaariables/Plugins\njwt_redis_blocklist = redis.StrictRedis(\n    host=os.getenv(\"REDIS_URI\"), port=6379, db=0, decode_responses=True",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "jwt_redis_blocklist",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "jwt_redis_blocklist = redis.StrictRedis(\n    host=os.getenv(\"REDIS_URI\"), port=6379, db=0, decode_responses=True\n)\nparser = reqparse.RequestParser()\nparser.add_argument(\"email\", type=str, required=True, location=\"form\")\nparser.add_argument(\"password\", type=str, required=True, location=\"form\")\nnow = pendulum.now()\n@api.route(\"auth\")\nclass SignupApi(Resource):\n    @api.doc(model=signup_model, body=User)",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "parser = reqparse.RequestParser()\nparser.add_argument(\"email\", type=str, required=True, location=\"form\")\nparser.add_argument(\"password\", type=str, required=True, location=\"form\")\nnow = pendulum.now()\n@api.route(\"auth\")\nclass SignupApi(Resource):\n    @api.doc(model=signup_model, body=User)\n    @api.response(201, \"User Created\")\n    @api.response(400, \"Bad Request\")\n    @api.response(401, \"Unauthroized\")",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "now = pendulum.now()\n@api.route(\"auth\")\nclass SignupApi(Resource):\n    @api.doc(model=signup_model, body=User)\n    @api.response(201, \"User Created\")\n    @api.response(400, \"Bad Request\")\n    @api.response(401, \"Unauthroized\")\n    @api.doc(parser=parser)\n    @api.expect(signup_model)\n    #! POST Endpoint For User Registration",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "InsultsAPI",
        "kind": 6,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "class InsultsAPI(Resource):\n    #! GET ENDPOINT - Insults\n    @api.doc(model=GET_fields, parser=get_parsers)\n    @api.response(200, \"Insults Found\")\n    # @api.response(\n    #     400, \"Bad Request - If passing a parameter, check values and reattempt\"\n    # )\n    @api.expect(get_parsers)\n    def get(self):\n        joke = Jokester.get_random_joke()",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "api = Namespace(\"Insults\", description=\"Joke operations\")\n#!Namespace Related Models\nGET_fields = api.model(\n    \"Insult (Get Method)\",\n    {\n        \"explicit\": fields.Boolean,\n        \"catagory\": fields.String,\n    },\n)\nPOST_fields = api.model(",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "GET_fields",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "GET_fields = api.model(\n    \"Insult (Get Method)\",\n    {\n        \"explicit\": fields.Boolean,\n        \"catagory\": fields.String,\n    },\n)\nPOST_fields = api.model(\n    \"Insult (Post Method)\",\n    {",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "POST_fields",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "POST_fields = api.model(\n    \"Insult (Post Method)\",\n    {\n        \"content\": fields.String,\n        \"explicit\": fields.Boolean,\n        \"catagory\": fields.String,\n        \"bearer token\": fields.String,\n    },\n)\n#! Top-Level Vaariables/Plugins",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "now = pendulum.now()\nparser = reqparse.RequestParser()\njoke_categories = Jokester.get_catagories()\nprint(joke_categories)\n#!Request Parameters Designations\nparser.add_argument(\"content\", type=str, required=True, location=\"form\")\nparser.add_argument(\"explicit\", type=str, required=True, location=\"form\")\nparser.add_argument(\n    \"catagory\",\n    type=str,",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "parser = reqparse.RequestParser()\njoke_categories = Jokester.get_catagories()\nprint(joke_categories)\n#!Request Parameters Designations\nparser.add_argument(\"content\", type=str, required=True, location=\"form\")\nparser.add_argument(\"explicit\", type=str, required=True, location=\"form\")\nparser.add_argument(\n    \"catagory\",\n    type=str,\n    required=True,",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "joke_categories",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "joke_categories = Jokester.get_catagories()\nprint(joke_categories)\n#!Request Parameters Designations\nparser.add_argument(\"content\", type=str, required=True, location=\"form\")\nparser.add_argument(\"explicit\", type=str, required=True, location=\"form\")\nparser.add_argument(\n    \"catagory\",\n    type=str,\n    required=True,\n    location=\"form\",",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "get_parsers",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "get_parsers = parser.copy()\nPOST_parsers = parser.copy()\nget_parsers.replace_argument(\n    \"explicit\",\n    type=str,\n    required=False,\n    location=\"headers\",\n    help=\"Explicit Filter. When Set to True the default filter is turned off.\",\n    choices=[\"true\", \"false\"],\n)",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "POST_parsers",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "POST_parsers = parser.copy()\nget_parsers.replace_argument(\n    \"explicit\",\n    type=str,\n    required=False,\n    location=\"headers\",\n    help=\"Explicit Filter. When Set to True the default filter is turned off.\",\n    choices=[\"true\", \"false\"],\n)\nget_parsers.replace_argument(",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "ApiTest",
        "kind": 6,
        "importPath": "resources.status",
        "description": "resources.status",
        "peekOfCode": "class ApiTest(Resource):\n    \"\"\"Class for testing the API test Endpoints.\n    Inherits from the flask_restplus Resource class.\n    \"\"\"\n    #! GET ENDPOINT - Status\n    @api.doc()\n    @api.response(\n        200,\n        \"As of <DATETIME> UTC the API Is Up and actively insulting millions of Mamas\",\n    )",
        "detail": "resources.status",
        "documentation": {}
    },
    {
        "label": "ApiMetrics",
        "kind": 6,
        "importPath": "resources.status",
        "description": "resources.status",
        "peekOfCode": "class ApiMetrics(Resource):\n    @api.response(200, \"The Count of Insults in the Database\")\n    def get(self):\n        jokes, users = Administrator.count_user_and_jokes()\n        return jsonify(f\"There are {jokes} insults and {users} in the Database\")",
        "detail": "resources.status",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "resources.status",
        "description": "resources.status",
        "peekOfCode": "api = Namespace(\n    \"Testing & Status\",\n    description=\"These endpoints encompass all the endpoints needed to: \\n 1. Test the Current Status of the API. \\n 2. If admin, get operation metrics.\",\n)\n#!Namespace Related Models\n#! Top-Level Vaariables/Plugins\nnow = pendulum.now()\n#!Request Parameters Designations\n@api.route(\"status\")\nclass ApiTest(Resource):",
        "detail": "resources.status",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "resources.status",
        "description": "resources.status",
        "peekOfCode": "now = pendulum.now()\n#!Request Parameters Designations\n@api.route(\"status\")\nclass ApiTest(Resource):\n    \"\"\"Class for testing the API test Endpoints.\n    Inherits from the flask_restplus Resource class.\n    \"\"\"\n    #! GET ENDPOINT - Status\n    @api.doc()\n    @api.response(",
        "detail": "resources.status",
        "documentation": {}
    },
    {
        "label": "SignUpApiTest",
        "kind": 6,
        "importPath": "test.test_auth",
        "description": "test.test_auth",
        "peekOfCode": "class SignUpApiTest(TestCase):\n    def SetUp(self):\n        self.app = app.test_client()\n        self.db = app.get_db()\n    def test_successful_signup(self):\n        test_user = User(\n            email=\"Pytest_User@gmail.com\",\n            password=\"Butter_Baby\",\n            joined_on=\"1970-01-01\",\n        )",
        "detail": "test.test_auth",
        "documentation": {}
    },
    {
        "label": "Test_DatabasConnection",
        "kind": 6,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "class Test_DatabasConnection(TestCase):\n    def test_database_connection(self):\n        db_heartbeat = client.admin.command(\"ping\")\n        with check:\n            assert \"ok\" in db_heartbeat.keys()\n            assert isinstance(db_heartbeat, dict)\n    def test_database_health(self):\n        with check:\n            assert isinstance(database, Database)\n    def test_insult_connection(self):",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "connection_test",
        "kind": 2,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "def connection_test():\n    db_heartbeat = client.admin.command(\"ping\")\n    if isinstance(db_heartbeat, dict):\n        if \"ok\" in db_heartbeat.keys():\n            return \"Database is connected\"\n        else:  \n            raise ConnectionFailure(\"Database is not connected\")\nclass Test_DatabasConnection(TestCase):\n    def test_database_connection(self):\n        db_heartbeat = client.admin.command(\"ping\")",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "CONNECTION_STRING",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "CONNECTION_STRING = getenv(\"MONGODB_URI\")\nclient = MongoClient(CONNECTION_STRING)\nmongoengine_connection = connect(alias=\"Mongo_Test_Connection\", host=CONNECTION_STRING)\ndatabase = client[\"InsultVault\"]\ninsult_collection = database[\"insults\"]\nuser_collections = database[\"users\"]\npipeline = {\"$count\": \"ObjectId\"}\ndef connection_test():\n    db_heartbeat = client.admin.command(\"ping\")\n    if isinstance(db_heartbeat, dict):",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "client = MongoClient(CONNECTION_STRING)\nmongoengine_connection = connect(alias=\"Mongo_Test_Connection\", host=CONNECTION_STRING)\ndatabase = client[\"InsultVault\"]\ninsult_collection = database[\"insults\"]\nuser_collections = database[\"users\"]\npipeline = {\"$count\": \"ObjectId\"}\ndef connection_test():\n    db_heartbeat = client.admin.command(\"ping\")\n    if isinstance(db_heartbeat, dict):\n        if \"ok\" in db_heartbeat.keys():",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "mongoengine_connection",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "mongoengine_connection = connect(alias=\"Mongo_Test_Connection\", host=CONNECTION_STRING)\ndatabase = client[\"InsultVault\"]\ninsult_collection = database[\"insults\"]\nuser_collections = database[\"users\"]\npipeline = {\"$count\": \"ObjectId\"}\ndef connection_test():\n    db_heartbeat = client.admin.command(\"ping\")\n    if isinstance(db_heartbeat, dict):\n        if \"ok\" in db_heartbeat.keys():\n            return \"Database is connected\"",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "database = client[\"InsultVault\"]\ninsult_collection = database[\"insults\"]\nuser_collections = database[\"users\"]\npipeline = {\"$count\": \"ObjectId\"}\ndef connection_test():\n    db_heartbeat = client.admin.command(\"ping\")\n    if isinstance(db_heartbeat, dict):\n        if \"ok\" in db_heartbeat.keys():\n            return \"Database is connected\"\n        else:  ",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "insult_collection",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "insult_collection = database[\"insults\"]\nuser_collections = database[\"users\"]\npipeline = {\"$count\": \"ObjectId\"}\ndef connection_test():\n    db_heartbeat = client.admin.command(\"ping\")\n    if isinstance(db_heartbeat, dict):\n        if \"ok\" in db_heartbeat.keys():\n            return \"Database is connected\"\n        else:  \n            raise ConnectionFailure(\"Database is not connected\")",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "user_collections",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "user_collections = database[\"users\"]\npipeline = {\"$count\": \"ObjectId\"}\ndef connection_test():\n    db_heartbeat = client.admin.command(\"ping\")\n    if isinstance(db_heartbeat, dict):\n        if \"ok\" in db_heartbeat.keys():\n            return \"Database is connected\"\n        else:  \n            raise ConnectionFailure(\"Database is not connected\")\nclass Test_DatabasConnection(TestCase):",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "pipeline",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "pipeline = {\"$count\": \"ObjectId\"}\ndef connection_test():\n    db_heartbeat = client.admin.command(\"ping\")\n    if isinstance(db_heartbeat, dict):\n        if \"ok\" in db_heartbeat.keys():\n            return \"Database is connected\"\n        else:  \n            raise ConnectionFailure(\"Database is not connected\")\nclass Test_DatabasConnection(TestCase):\n    def test_database_connection(self):",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "InsultApiTest",
        "kind": 6,
        "importPath": "test.test_insults",
        "description": "test.test_insults",
        "peekOfCode": "class InsultApiTest(TestCase):\n    def test_get_random_joke(self):\n        with check:\n            joke = Jokester.get_random_joke()\n    def test_get_censored_joke(self):\n        pass\n    def get_categorized_joke(self):\n        pass",
        "detail": "test.test_insults",
        "documentation": {}
    },
    {
        "label": "TestGatekeeper",
        "kind": 6,
        "importPath": "test.test_utils",
        "description": "test.test_utils",
        "peekOfCode": "class TestGatekeeper(TestCase):\n    def test_check_if_token_is_revoked(self):\n        # Gatekeeper.check_if_token_is_revoked()\n        pass\nclass TestErrors(TestCase):\n    pass",
        "detail": "test.test_utils",
        "documentation": {}
    },
    {
        "label": "TestErrors",
        "kind": 6,
        "importPath": "test.test_utils",
        "description": "test.test_utils",
        "peekOfCode": "class TestErrors(TestCase):\n    pass",
        "detail": "test.test_utils",
        "documentation": {}
    },
    {
        "label": "Administrator",
        "kind": 6,
        "importPath": "utils.administrator",
        "description": "utils.administrator",
        "peekOfCode": "class Administrator:\n    @staticmethod\n    def count_user_and_jokes():\n        return tuple(Insult.objects().count(), User.objects().count())",
        "detail": "utils.administrator",
        "documentation": {}
    },
    {
        "label": "InternalServerError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class InternalServerError(Exception):\n    pass\nclass SchemaValidationError(Exception):\n    pass\nclass BannedUserError(Exception):\n    pass\nclass EmailAlreadyExistsError(Exception):\n    pass\nclass UnauthorizedError(Exception):\n    pass",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "SchemaValidationError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class SchemaValidationError(Exception):\n    pass\nclass BannedUserError(Exception):\n    pass\nclass EmailAlreadyExistsError(Exception):\n    pass\nclass UnauthorizedError(Exception):\n    pass\nclass UserDoesNotExist(Exception):\n    pass",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "BannedUserError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class BannedUserError(Exception):\n    pass\nclass EmailAlreadyExistsError(Exception):\n    pass\nclass UnauthorizedError(Exception):\n    pass\nclass UserDoesNotExist(Exception):\n    pass\nclass ValidationError(Exception):\n    pass",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "EmailAlreadyExistsError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class EmailAlreadyExistsError(Exception):\n    pass\nclass UnauthorizedError(Exception):\n    pass\nclass UserDoesNotExist(Exception):\n    pass\nclass ValidationError(Exception):\n    pass\nclass InvaildTokenError(Exception):\n    pass",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UnauthorizedError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class UnauthorizedError(Exception):\n    pass\nclass UserDoesNotExist(Exception):\n    pass\nclass ValidationError(Exception):\n    pass\nclass InvaildTokenError(Exception):\n    pass\nclass DBConnectionError(Exception):\n    pass",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UserDoesNotExist",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class UserDoesNotExist(Exception):\n    pass\nclass ValidationError(Exception):\n    pass\nclass InvaildTokenError(Exception):\n    pass\nclass DBConnectionError(Exception):\n    pass\nclass ResourceNotDFoundError(Exception):\n    pass",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class ValidationError(Exception):\n    pass\nclass InvaildTokenError(Exception):\n    pass\nclass DBConnectionError(Exception):\n    pass\nclass ResourceNotDFoundError(Exception):\n    pass\nclass BannedUserError(Exception):\n    pass",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "InvaildTokenError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class InvaildTokenError(Exception):\n    pass\nclass DBConnectionError(Exception):\n    pass\nclass ResourceNotDFoundError(Exception):\n    pass\nclass BannedUserError(Exception):\n    pass\nerrors = {\n    \"InternalServerError\": {\"message\": \"Something went wrong\", \"status\": 500},",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "DBConnectionError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class DBConnectionError(Exception):\n    pass\nclass ResourceNotDFoundError(Exception):\n    pass\nclass BannedUserError(Exception):\n    pass\nerrors = {\n    \"InternalServerError\": {\"message\": \"Something went wrong\", \"status\": 500},\n    \"SchemaValidationError\": {\n        \"message\": \"Request is missing required fields\",",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "ResourceNotDFoundError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class ResourceNotDFoundError(Exception):\n    pass\nclass BannedUserError(Exception):\n    pass\nerrors = {\n    \"InternalServerError\": {\"message\": \"Something went wrong\", \"status\": 500},\n    \"SchemaValidationError\": {\n        \"message\": \"Request is missing required fields\",\n        \"status\": 400,\n    },",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "BannedUserError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class BannedUserError(Exception):\n    pass\nerrors = {\n    \"InternalServerError\": {\"message\": \"Something went wrong\", \"status\": 500},\n    \"SchemaValidationError\": {\n        \"message\": \"Request is missing required fields\",\n        \"status\": 400,\n    },\n    \"EmailAlreadyExistsError\": {\n        \"message\": \"User with given email address already exists\",",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "errors",
        "kind": 5,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "errors = {\n    \"InternalServerError\": {\"message\": \"Something went wrong\", \"status\": 500},\n    \"SchemaValidationError\": {\n        \"message\": \"Request is missing required fields\",\n        \"status\": 400,\n    },\n    \"EmailAlreadyExistsError\": {\n        \"message\": \"User with given email address already exists\",\n        \"status\": 409,\n    },",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "GateKeeper",
        "kind": 6,
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "peekOfCode": "class GateKeeper:\n    @staticmethod\n    def is_user_banned(email):\n        email = email.lower()\n        user = User.objects(email=email).first()\n        if user[\"status\"] != \"active\":\n            raise BannedUserError(\"The User Associated With That Token Has Been Banned\")\n        else:\n            return False\n    @staticmethod",
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "jwt_redis_blocklist",
        "kind": 5,
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "peekOfCode": "jwt_redis_blocklist = redis.StrictRedis(\n    host=os.getenv(\"REDIS_URI\"), port=6379, db=0, decode_responses=True\n)\nACCESS_EXPIRES = timedelta(hours=1)\nTOKEN_EXPIRES = timedelta(days=7)\nclass GateKeeper:\n    @staticmethod\n    def is_user_banned(email):\n        email = email.lower()\n        user = User.objects(email=email).first()",
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "ACCESS_EXPIRES",
        "kind": 5,
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "peekOfCode": "ACCESS_EXPIRES = timedelta(hours=1)\nTOKEN_EXPIRES = timedelta(days=7)\nclass GateKeeper:\n    @staticmethod\n    def is_user_banned(email):\n        email = email.lower()\n        user = User.objects(email=email).first()\n        if user[\"status\"] != \"active\":\n            raise BannedUserError(\"The User Associated With That Token Has Been Banned\")\n        else:",
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "TOKEN_EXPIRES",
        "kind": 5,
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "peekOfCode": "TOKEN_EXPIRES = timedelta(days=7)\nclass GateKeeper:\n    @staticmethod\n    def is_user_banned(email):\n        email = email.lower()\n        user = User.objects(email=email).first()\n        if user[\"status\"] != \"active\":\n            raise BannedUserError(\"The User Associated With That Token Has Been Banned\")\n        else:\n            return False",
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "Jokester",
        "kind": 6,
        "importPath": "utils.jokester",
        "description": "utils.jokester",
        "peekOfCode": "class Jokester:\n    @staticmethod\n    def get_random_joke():\n        randomized_pipeline = [{\"$sample\": {\"size\": 1}}]\n        randomized_joke = str()\n        insult = Insult.objects().aggregate(randomized_pipeline)\n        for doc in insult:\n            randomized_joke = doc\n        return randomized_joke\n    @staticmethod",
        "detail": "utils.jokester",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp.config.from_object(Config)\napp.config[\"MONGODB_SETTINGS\"] = Config.MONGODB_DEV_SETTINGS\n#!SECTION Initialize the API Endpoints and Plugins\napi.init_app(app)\ninitialize_db(app)\nbcrypt = Bcrypt(app)\njwt = JWTManager(app)\n#!SECTION Server Error Logging\nif not app.debug:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"MONGODB_SETTINGS\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"MONGODB_SETTINGS\"] = Config.MONGODB_DEV_SETTINGS\n#!SECTION Initialize the API Endpoints and Plugins\napi.init_app(app)\ninitialize_db(app)\nbcrypt = Bcrypt(app)\njwt = JWTManager(app)\n#!SECTION Server Error Logging\nif not app.debug:\n    file_handler = FileHandler(\"error.log\")\n    file_handler.setLevel(WARNING)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "bcrypt = Bcrypt(app)\njwt = JWTManager(app)\n#!SECTION Server Error Logging\nif not app.debug:\n    file_handler = FileHandler(\"error.log\")\n    file_handler.setLevel(WARNING)\n    app.logger.addHandler(file_handler)\nif __name__ == \"__main__\":\n    app.run(host=\"localhost\", port=6969, debug=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "jwt = JWTManager(app)\n#!SECTION Server Error Logging\nif not app.debug:\n    file_handler = FileHandler(\"error.log\")\n    file_handler.setLevel(WARNING)\n    app.logger.addHandler(file_handler)\nif __name__ == \"__main__\":\n    app.run(host=\"localhost\", port=6969, debug=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config(object):\n    DEBUG = True\n    SECRET_KEY = os.getenv(key=\"SECRET_KEY\")\n    MONGODB_DEV_SETTINGS = {\"host\": os.getenv(\"MONGODB_URI\"), \"alias\": \"default\"}\n    BUNDLE_ERROR = True\n    ENV = (\"Development\",)\n    JWT_TOKEN_LOCATION = (\"headers\",)\n    JWT_HEADER_NAME = (\"Authorization\",)\n    JWT_SECRET_KEY = (os.getenv(\"JWT_SECRET_KEY\"),)\n    SECRET_KEY = os.getenv(\"SECRET_KEY\")",
        "detail": "config",
        "documentation": {}
    }
]