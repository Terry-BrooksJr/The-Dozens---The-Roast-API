[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "MongoEngine",
        "importPath": "flask_mongoengine",
        "description": "flask_mongoengine",
        "isExtraImport": true,
        "detail": "flask_mongoengine",
        "documentation": {}
    },
    {
        "label": "connect",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "connect",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "pendulum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pendulum",
        "description": "pendulum",
        "detail": "pendulum",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis",
        "description": "redis",
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "copy_current_request_context",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "verify_jwt_in_request",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "verify_jwt_in_request",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "Namespace",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "Namespace",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "apidoc",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "marshal_with",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "Namespace",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "flask_restx",
        "description": "flask_restx",
        "isExtraImport": true,
        "detail": "flask_restx",
        "documentation": {}
    },
    {
        "label": "BadRequest",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database.db",
        "description": "database.db",
        "isExtraImport": true,
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database.db",
        "description": "database.db",
        "isExtraImport": true,
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database.db",
        "description": "database.db",
        "isExtraImport": true,
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database.db",
        "description": "database.db",
        "isExtraImport": true,
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "initialize_db",
        "importPath": "database.db",
        "description": "database.db",
        "isExtraImport": true,
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "Insult",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "Insult",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "Insult",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "Insult",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "Insult",
        "importPath": "database.models",
        "description": "database.models",
        "isExtraImport": true,
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "EmailAlreadyExistsError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UnauthorizedError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UserDoesNotExist",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "BannedUserError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "InvaildTokenError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UnauthorizedError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "BannedUserError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "EmailAlreadyExistsError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "InternalServerError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "SchemaValidationError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UnauthorizedError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UserDoesNotExist",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "BannedUserError",
        "importPath": "utils.errors",
        "description": "utils.errors",
        "isExtraImport": true,
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "GateKeeper",
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "isExtraImport": true,
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "GateKeeper",
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "isExtraImport": true,
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "GateKeeper",
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "isExtraImport": true,
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "GateKeeper",
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "isExtraImport": true,
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "Jokester",
        "importPath": "utils.jokester",
        "description": "utils.jokester",
        "isExtraImport": true,
        "detail": "utils.jokester",
        "documentation": {}
    },
    {
        "label": "Jokester",
        "importPath": "utils.jokester",
        "description": "utils.jokester",
        "isExtraImport": true,
        "detail": "utils.jokester",
        "documentation": {}
    },
    {
        "label": "Administrator",
        "importPath": "utils.administrator",
        "description": "utils.administrator",
        "isExtraImport": true,
        "detail": "utils.administrator",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "Collection",
        "importPath": "pymongo.collection",
        "description": "pymongo.collection",
        "isExtraImport": true,
        "detail": "pymongo.collection",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "pymongo.database",
        "description": "pymongo.database",
        "isExtraImport": true,
        "detail": "pymongo.database",
        "documentation": {}
    },
    {
        "label": "ConnectionFailure",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "pytest_check",
        "description": "pytest_check",
        "isExtraImport": true,
        "detail": "pytest_check",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "pytest_check",
        "description": "pytest_check",
        "isExtraImport": true,
        "detail": "pytest_check",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "pytest_check",
        "description": "pytest_check",
        "isExtraImport": true,
        "detail": "pytest_check",
        "documentation": {}
    },
    {
        "label": "ConfigAwareApplicationInfoProvider",
        "importPath": "tracepointdebug.application.config_aware_application_info_provider",
        "description": "tracepointdebug.application.config_aware_application_info_provider",
        "isExtraImport": true,
        "detail": "tracepointdebug.application.config_aware_application_info_provider",
        "documentation": {}
    },
    {
        "label": "abc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "abc",
        "description": "abc",
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "config_names",
        "importPath": "tracepointdebug.config",
        "description": "tracepointdebug.config",
        "isExtraImport": true,
        "detail": "tracepointdebug.config",
        "documentation": {}
    },
    {
        "label": "config_names",
        "importPath": "tracepointdebug.config",
        "description": "tracepointdebug.config",
        "isExtraImport": true,
        "detail": "tracepointdebug.config",
        "documentation": {}
    },
    {
        "label": "config_names",
        "importPath": "tracepointdebug.config",
        "description": "tracepointdebug.config",
        "isExtraImport": true,
        "detail": "tracepointdebug.config",
        "documentation": {}
    },
    {
        "label": "config_names",
        "importPath": "tracepointdebug.config",
        "description": "tracepointdebug.config",
        "isExtraImport": true,
        "detail": "tracepointdebug.config",
        "documentation": {}
    },
    {
        "label": "config_names",
        "importPath": "tracepointdebug.config",
        "description": "tracepointdebug.config",
        "isExtraImport": true,
        "detail": "tracepointdebug.config",
        "documentation": {}
    },
    {
        "label": "config_names",
        "importPath": "tracepointdebug.config",
        "description": "tracepointdebug.config",
        "isExtraImport": true,
        "detail": "tracepointdebug.config",
        "documentation": {}
    },
    {
        "label": "ConfigProvider",
        "importPath": "tracepointdebug.config.config_provider",
        "description": "tracepointdebug.config.config_provider",
        "isExtraImport": true,
        "detail": "tracepointdebug.config.config_provider",
        "documentation": {}
    },
    {
        "label": "ConfigProvider",
        "importPath": "tracepointdebug.config.config_provider",
        "description": "tracepointdebug.config.config_provider",
        "isExtraImport": true,
        "detail": "tracepointdebug.config.config_provider",
        "documentation": {}
    },
    {
        "label": "ConfigProvider",
        "importPath": "tracepointdebug.config.config_provider",
        "description": "tracepointdebug.config.config_provider",
        "isExtraImport": true,
        "detail": "tracepointdebug.config.config_provider",
        "documentation": {}
    },
    {
        "label": "ConfigProvider",
        "importPath": "tracepointdebug.config.config_provider",
        "description": "tracepointdebug.config.config_provider",
        "isExtraImport": true,
        "detail": "tracepointdebug.config.config_provider",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "ApplicationInfoProvider",
        "importPath": "tracepointdebug.application.application_info_provider",
        "description": "tracepointdebug.application.application_info_provider",
        "isExtraImport": true,
        "detail": "tracepointdebug.application.application_info_provider",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "tracepointdebug.broker.event.base_event",
        "description": "tracepointdebug.broker.event.base_event",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.event.base_event",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "tracepointdebug.broker.event.base_event",
        "description": "tracepointdebug.broker.event.base_event",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.event.base_event",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "tracepointdebug.broker.event.base_event",
        "description": "tracepointdebug.broker.event.base_event",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.event.base_event",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "tracepointdebug.broker.event.base_event",
        "description": "tracepointdebug.broker.event.base_event",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.event.base_event",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "tracepointdebug.broker.event.base_event",
        "description": "tracepointdebug.broker.event.base_event",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.event.base_event",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "tracepointdebug.broker.event.base_event",
        "description": "tracepointdebug.broker.event.base_event",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.event.base_event",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "tracepointdebug.broker.event.base_event",
        "description": "tracepointdebug.broker.event.base_event",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.event.base_event",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "tracepointdebug.broker.event.base_event",
        "description": "tracepointdebug.broker.event.base_event",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.event.base_event",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "tracepointdebug.broker.event.base_event",
        "description": "tracepointdebug.broker.event.base_event",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.event.base_event",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "tracepointdebug.broker.event.event",
        "description": "tracepointdebug.broker.event.event",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.event.event",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "tracepointdebug.broker.request.request",
        "description": "tracepointdebug.broker.request.request",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.request.request",
        "documentation": {}
    },
    {
        "label": "ApplicationFilter",
        "importPath": "tracepointdebug.broker.application.application_filter",
        "description": "tracepointdebug.broker.application.application_filter",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.application.application_filter",
        "documentation": {}
    },
    {
        "label": "ApplicationFilter",
        "importPath": "tracepointdebug.broker.application.application_filter",
        "description": "tracepointdebug.broker.application.application_filter",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.application.application_filter",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "importPath": "tracepointdebug.broker.request.base_request",
        "description": "tracepointdebug.broker.request.base_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.request.base_request",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "importPath": "tracepointdebug.broker.request.base_request",
        "description": "tracepointdebug.broker.request.base_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.request.base_request",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "importPath": "tracepointdebug.broker.request.base_request",
        "description": "tracepointdebug.broker.request.base_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.request.base_request",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "importPath": "tracepointdebug.broker.request.base_request",
        "description": "tracepointdebug.broker.request.base_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.request.base_request",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "importPath": "tracepointdebug.broker.request.base_request",
        "description": "tracepointdebug.broker.request.base_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.request.base_request",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "importPath": "tracepointdebug.broker.request.base_request",
        "description": "tracepointdebug.broker.request.base_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.request.base_request",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "importPath": "tracepointdebug.broker.request.base_request",
        "description": "tracepointdebug.broker.request.base_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.request.base_request",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "importPath": "tracepointdebug.broker.request.base_request",
        "description": "tracepointdebug.broker.request.base_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.request.base_request",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "importPath": "tracepointdebug.broker.request.base_request",
        "description": "tracepointdebug.broker.request.base_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.request.base_request",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "importPath": "tracepointdebug.broker.request.base_request",
        "description": "tracepointdebug.broker.request.base_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.request.base_request",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "importPath": "tracepointdebug.broker.request.base_request",
        "description": "tracepointdebug.broker.request.base_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.request.base_request",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "importPath": "tracepointdebug.broker.request.base_request",
        "description": "tracepointdebug.broker.request.base_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.request.base_request",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "tracepointdebug.broker.response.response",
        "description": "tracepointdebug.broker.response.response",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.response.response",
        "documentation": {}
    },
    {
        "label": "CodedException",
        "importPath": "tracepointdebug.probe.coded_exception",
        "description": "tracepointdebug.probe.coded_exception",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.coded_exception",
        "documentation": {}
    },
    {
        "label": "CodedException",
        "importPath": "tracepointdebug.probe.coded_exception",
        "description": "tracepointdebug.probe.coded_exception",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.coded_exception",
        "documentation": {}
    },
    {
        "label": "CodedException",
        "importPath": "tracepointdebug.probe.coded_exception",
        "description": "tracepointdebug.probe.coded_exception",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.coded_exception",
        "documentation": {}
    },
    {
        "label": "CodedException",
        "importPath": "tracepointdebug.probe.coded_exception",
        "description": "tracepointdebug.probe.coded_exception",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.coded_exception",
        "documentation": {}
    },
    {
        "label": "CodedException",
        "importPath": "tracepointdebug.probe.coded_exception",
        "description": "tracepointdebug.probe.coded_exception",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.coded_exception",
        "documentation": {}
    },
    {
        "label": "CodedException",
        "importPath": "tracepointdebug.probe.coded_exception",
        "description": "tracepointdebug.probe.coded_exception",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.coded_exception",
        "documentation": {}
    },
    {
        "label": "CodedException",
        "importPath": "tracepointdebug.probe.coded_exception",
        "description": "tracepointdebug.probe.coded_exception",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.coded_exception",
        "documentation": {}
    },
    {
        "label": "CodedException",
        "importPath": "tracepointdebug.probe.coded_exception",
        "description": "tracepointdebug.probe.coded_exception",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.coded_exception",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "WARNING",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "FileHandler",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "RLock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "RLock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "RLock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "websocket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "websocket",
        "description": "websocket",
        "detail": "websocket",
        "documentation": {}
    },
    {
        "label": "ABNF",
        "importPath": "websocket",
        "description": "websocket",
        "isExtraImport": true,
        "detail": "websocket",
        "documentation": {}
    },
    {
        "label": "WebSocket",
        "importPath": "websocket",
        "description": "websocket",
        "isExtraImport": true,
        "detail": "websocket",
        "documentation": {}
    },
    {
        "label": "WebSocketApp",
        "importPath": "websocket",
        "description": "websocket",
        "isExtraImport": true,
        "detail": "websocket",
        "documentation": {}
    },
    {
        "label": "WebSocketException",
        "importPath": "websocket",
        "description": "websocket",
        "isExtraImport": true,
        "detail": "websocket",
        "documentation": {}
    },
    {
        "label": "WebSocketTimeoutException",
        "importPath": "websocket",
        "description": "websocket",
        "isExtraImport": true,
        "detail": "websocket",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "tracepointdebug.application.application",
        "description": "tracepointdebug.application.application",
        "isExtraImport": true,
        "detail": "tracepointdebug.application.application",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "tracepointdebug.application.application",
        "description": "tracepointdebug.application.application",
        "isExtraImport": true,
        "detail": "tracepointdebug.application.application",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "tracepointdebug.application.application",
        "description": "tracepointdebug.application.application",
        "isExtraImport": true,
        "detail": "tracepointdebug.application.application",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "tracepointdebug.application.application",
        "description": "tracepointdebug.application.application",
        "isExtraImport": true,
        "detail": "tracepointdebug.application.application",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "tracepointdebug.application.application",
        "description": "tracepointdebug.application.application",
        "isExtraImport": true,
        "detail": "tracepointdebug.application.application",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "tracepointdebug.application.application",
        "description": "tracepointdebug.application.application",
        "isExtraImport": true,
        "detail": "tracepointdebug.application.application",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "tracepointdebug.application.application",
        "description": "tracepointdebug.application.application",
        "isExtraImport": true,
        "detail": "tracepointdebug.application.application",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "tracepointdebug.application.application",
        "description": "tracepointdebug.application.application",
        "isExtraImport": true,
        "detail": "tracepointdebug.application.application",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "tracepointdebug.application.application",
        "description": "tracepointdebug.application.application",
        "isExtraImport": true,
        "detail": "tracepointdebug.application.application",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "tracepointdebug.application.application",
        "description": "tracepointdebug.application.application",
        "isExtraImport": true,
        "detail": "tracepointdebug.application.application",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "tracepointdebug.application.application",
        "description": "tracepointdebug.application.application",
        "isExtraImport": true,
        "detail": "tracepointdebug.application.application",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "tracepointdebug.application.application",
        "description": "tracepointdebug.application.application",
        "isExtraImport": true,
        "detail": "tracepointdebug.application.application",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "tracepointdebug.application.application",
        "description": "tracepointdebug.application.application",
        "isExtraImport": true,
        "detail": "tracepointdebug.application.application",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "tracepointdebug.application.application",
        "description": "tracepointdebug.application.application",
        "isExtraImport": true,
        "detail": "tracepointdebug.application.application",
        "documentation": {}
    },
    {
        "label": "WSApp",
        "importPath": "tracepointdebug.broker.ws_app",
        "description": "tracepointdebug.broker.ws_app",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.ws_app",
        "documentation": {}
    },
    {
        "label": "debug_logger",
        "importPath": "tracepointdebug.utils",
        "description": "tracepointdebug.utils",
        "isExtraImport": true,
        "detail": "tracepointdebug.utils",
        "documentation": {}
    },
    {
        "label": "debug_logger",
        "importPath": "tracepointdebug.utils",
        "description": "tracepointdebug.utils",
        "isExtraImport": true,
        "detail": "tracepointdebug.utils",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures.thread",
        "description": "concurrent.futures.thread",
        "isExtraImport": true,
        "detail": "concurrent.futures.thread",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "tracepointdebug.application",
        "description": "tracepointdebug.application",
        "isExtraImport": true,
        "detail": "tracepointdebug.application",
        "documentation": {}
    },
    {
        "label": "ApplicationStatus",
        "importPath": "tracepointdebug.broker.application.application_status",
        "description": "tracepointdebug.broker.application.application_status",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.application.application_status",
        "documentation": {}
    },
    {
        "label": "BrokerConnection",
        "importPath": "tracepointdebug.broker.broker_client",
        "description": "tracepointdebug.broker.broker_client",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.broker_client",
        "documentation": {}
    },
    {
        "label": "BrokerCredentials",
        "importPath": "tracepointdebug.broker.broker_credentials",
        "description": "tracepointdebug.broker.broker_credentials",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.broker_credentials",
        "documentation": {}
    },
    {
        "label": "BrokerMessageCallback",
        "importPath": "tracepointdebug.broker.broker_message_callback",
        "description": "tracepointdebug.broker.broker_message_callback",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.broker_message_callback",
        "documentation": {}
    },
    {
        "label": "ApplicationStatusEvent",
        "importPath": "tracepointdebug.broker.event.application_status_event",
        "description": "tracepointdebug.broker.event.application_status_event",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.event.application_status_event",
        "documentation": {}
    },
    {
        "label": "FilterLogPointsRequest",
        "importPath": "tracepointdebug.broker.request.filter_logpoints_request",
        "description": "tracepointdebug.broker.request.filter_logpoints_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.request.filter_logpoints_request",
        "documentation": {}
    },
    {
        "label": "FilterTracePointsRequest",
        "importPath": "tracepointdebug.broker.request.filter_tracepoints_request",
        "description": "tracepointdebug.broker.request.filter_tracepoints_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.request.filter_tracepoints_request",
        "documentation": {}
    },
    {
        "label": "ApplicationStatusTracePointProvider",
        "importPath": "tracepointdebug.probe.application.application_status_tracepoint_provider",
        "description": "tracepointdebug.probe.application.application_status_tracepoint_provider",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.application.application_status_tracepoint_provider",
        "documentation": {}
    },
    {
        "label": "to_json",
        "importPath": "tracepointdebug.probe.encoder",
        "description": "tracepointdebug.probe.encoder",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.encoder",
        "documentation": {}
    },
    {
        "label": "to_json",
        "importPath": "tracepointdebug.probe.encoder",
        "description": "tracepointdebug.probe.encoder",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.encoder",
        "documentation": {}
    },
    {
        "label": "DisableTracePointRequestHandler",
        "importPath": "tracepointdebug.probe.handler",
        "description": "tracepointdebug.probe.handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.handler",
        "documentation": {}
    },
    {
        "label": "EnableTracePointRequestHandler",
        "importPath": "tracepointdebug.probe.handler",
        "description": "tracepointdebug.probe.handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.handler",
        "documentation": {}
    },
    {
        "label": "FilterTracePointsResponseHandler",
        "importPath": "tracepointdebug.probe.handler",
        "description": "tracepointdebug.probe.handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.handler",
        "documentation": {}
    },
    {
        "label": "PutTracePointRequestHandler",
        "importPath": "tracepointdebug.probe.handler",
        "description": "tracepointdebug.probe.handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.handler",
        "documentation": {}
    },
    {
        "label": "RemoveTracePointRequestHandler",
        "importPath": "tracepointdebug.probe.handler",
        "description": "tracepointdebug.probe.handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.handler",
        "documentation": {}
    },
    {
        "label": "UpdateTracePointRequestHandler",
        "importPath": "tracepointdebug.probe.handler",
        "description": "tracepointdebug.probe.handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.handler",
        "documentation": {}
    },
    {
        "label": "DisableLogPointRequestHandler",
        "importPath": "tracepointdebug.probe.handler.request.logPoint.disable_log_point_request_handler",
        "description": "tracepointdebug.probe.handler.request.logPoint.disable_log_point_request_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.handler.request.logPoint.disable_log_point_request_handler",
        "documentation": {}
    },
    {
        "label": "EnableLogPointRequestHandler",
        "importPath": "tracepointdebug.probe.handler.request.logPoint.enable_log_point_request_handler",
        "description": "tracepointdebug.probe.handler.request.logPoint.enable_log_point_request_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.handler.request.logPoint.enable_log_point_request_handler",
        "documentation": {}
    },
    {
        "label": "PutLogPointRequestHandler",
        "importPath": "tracepointdebug.probe.handler.request.logPoint.put_log_point_request_handler",
        "description": "tracepointdebug.probe.handler.request.logPoint.put_log_point_request_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.handler.request.logPoint.put_log_point_request_handler",
        "documentation": {}
    },
    {
        "label": "RemoveLogPointRequestHandler",
        "importPath": "tracepointdebug.probe.handler.request.logPoint.remove_log_point_request_handler",
        "description": "tracepointdebug.probe.handler.request.logPoint.remove_log_point_request_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.handler.request.logPoint.remove_log_point_request_handler",
        "documentation": {}
    },
    {
        "label": "UpdateLogPointRequestHandler",
        "importPath": "tracepointdebug.probe.handler.request.logPoint.update_log_point_request_handler",
        "description": "tracepointdebug.probe.handler.request.logPoint.update_log_point_request_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.handler.request.logPoint.update_log_point_request_handler",
        "documentation": {}
    },
    {
        "label": "FilterLogPointsResponseHandler",
        "importPath": "tracepointdebug.probe.handler.response.filter_logpoints_response_handler",
        "description": "tracepointdebug.probe.handler.response.filter_logpoints_response_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.handler.response.filter_logpoints_response_handler",
        "documentation": {}
    },
    {
        "label": "six",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "six",
        "description": "six",
        "detail": "six",
        "documentation": {}
    },
    {
        "label": "CONFIG_METADATA",
        "importPath": "tracepointdebug.config.config_metadata",
        "description": "tracepointdebug.config.config_metadata",
        "isExtraImport": true,
        "detail": "tracepointdebug.config.config_metadata",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "trace",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "builtins",
        "importPath": "six.moves",
        "description": "six.moves",
        "isExtraImport": true,
        "detail": "six.moves",
        "documentation": {}
    },
    {
        "label": "gc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gc",
        "description": "gc",
        "detail": "gc",
        "documentation": {}
    },
    {
        "label": "ApplicationStatusProvider",
        "importPath": "tracepointdebug.broker.application.application_status_provider",
        "description": "tracepointdebug.broker.application.application_status_provider",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.application.application_status_provider",
        "documentation": {}
    },
    {
        "label": "LogPointManager",
        "importPath": "tracepointdebug.probe.log_point_manager",
        "description": "tracepointdebug.probe.log_point_manager",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.log_point_manager",
        "documentation": {}
    },
    {
        "label": "LogPointManager",
        "importPath": "tracepointdebug.probe.log_point_manager",
        "description": "tracepointdebug.probe.log_point_manager",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.log_point_manager",
        "documentation": {}
    },
    {
        "label": "LogPointManager",
        "importPath": "tracepointdebug.probe.log_point_manager",
        "description": "tracepointdebug.probe.log_point_manager",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.log_point_manager",
        "documentation": {}
    },
    {
        "label": "LogPointManager",
        "importPath": "tracepointdebug.probe.log_point_manager",
        "description": "tracepointdebug.probe.log_point_manager",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.log_point_manager",
        "documentation": {}
    },
    {
        "label": "LogPointManager",
        "importPath": "tracepointdebug.probe.log_point_manager",
        "description": "tracepointdebug.probe.log_point_manager",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.log_point_manager",
        "documentation": {}
    },
    {
        "label": "LogPointManager",
        "importPath": "tracepointdebug.probe.log_point_manager",
        "description": "tracepointdebug.probe.log_point_manager",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.log_point_manager",
        "documentation": {}
    },
    {
        "label": "LogPointManager",
        "importPath": "tracepointdebug.probe.log_point_manager",
        "description": "tracepointdebug.probe.log_point_manager",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.log_point_manager",
        "documentation": {}
    },
    {
        "label": "TracePointManager",
        "importPath": "tracepointdebug.probe.trace_point_manager",
        "description": "tracepointdebug.probe.trace_point_manager",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.trace_point_manager",
        "documentation": {}
    },
    {
        "label": "TracePointManager",
        "importPath": "tracepointdebug.probe.trace_point_manager",
        "description": "tracepointdebug.probe.trace_point_manager",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.trace_point_manager",
        "documentation": {}
    },
    {
        "label": "TracePointManager",
        "importPath": "tracepointdebug.probe.trace_point_manager",
        "description": "tracepointdebug.probe.trace_point_manager",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.trace_point_manager",
        "documentation": {}
    },
    {
        "label": "TracePointManager",
        "importPath": "tracepointdebug.probe.trace_point_manager",
        "description": "tracepointdebug.probe.trace_point_manager",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.trace_point_manager",
        "documentation": {}
    },
    {
        "label": "TracePointManager",
        "importPath": "tracepointdebug.probe.trace_point_manager",
        "description": "tracepointdebug.probe.trace_point_manager",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.trace_point_manager",
        "documentation": {}
    },
    {
        "label": "TracePointManager",
        "importPath": "tracepointdebug.probe.trace_point_manager",
        "description": "tracepointdebug.probe.trace_point_manager",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.trace_point_manager",
        "documentation": {}
    },
    {
        "label": "TracePointManager",
        "importPath": "tracepointdebug.probe.trace_point_manager",
        "description": "tracepointdebug.probe.trace_point_manager",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.trace_point_manager",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "antlr4",
        "description": "antlr4",
        "isExtraImport": true,
        "detail": "antlr4",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "antlr4",
        "description": "antlr4",
        "isExtraImport": true,
        "detail": "antlr4",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "antlr4",
        "description": "antlr4",
        "isExtraImport": true,
        "detail": "antlr4",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "antlr4",
        "description": "antlr4",
        "isExtraImport": true,
        "detail": "antlr4",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "antlr4",
        "description": "antlr4",
        "isExtraImport": true,
        "detail": "antlr4",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "antlr4",
        "description": "antlr4",
        "isExtraImport": true,
        "detail": "antlr4",
        "documentation": {}
    },
    {
        "label": "CommonTokenStream",
        "importPath": "antlr4",
        "description": "antlr4",
        "isExtraImport": true,
        "detail": "antlr4",
        "documentation": {}
    },
    {
        "label": "InputStream",
        "importPath": "antlr4",
        "description": "antlr4",
        "isExtraImport": true,
        "detail": "antlr4",
        "documentation": {}
    },
    {
        "label": "ParseTreeListener",
        "importPath": "antlr4",
        "description": "antlr4",
        "isExtraImport": true,
        "detail": "antlr4",
        "documentation": {}
    },
    {
        "label": "ParseTreeWalker",
        "importPath": "antlr4",
        "description": "antlr4",
        "isExtraImport": true,
        "detail": "antlr4",
        "documentation": {}
    },
    {
        "label": "TextIO",
        "importPath": "typing.io",
        "description": "typing.io",
        "isExtraImport": true,
        "detail": "typing.io",
        "documentation": {}
    },
    {
        "label": "TypedOperand",
        "importPath": "tracepointdebug.probe.condition.operand.typed_operand",
        "description": "tracepointdebug.probe.condition.operand.typed_operand",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.operand.typed_operand",
        "documentation": {}
    },
    {
        "label": "TypedOperand",
        "importPath": "tracepointdebug.probe.condition.operand.typed_operand",
        "description": "tracepointdebug.probe.condition.operand.typed_operand",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.operand.typed_operand",
        "documentation": {}
    },
    {
        "label": "TypedOperand",
        "importPath": "tracepointdebug.probe.condition.operand.typed_operand",
        "description": "tracepointdebug.probe.condition.operand.typed_operand",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.operand.typed_operand",
        "documentation": {}
    },
    {
        "label": "Operand",
        "importPath": "tracepointdebug.probe.condition.operand.operand",
        "description": "tracepointdebug.probe.condition.operand.operand",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.operand.operand",
        "documentation": {}
    },
    {
        "label": "Operand",
        "importPath": "tracepointdebug.probe.condition.operand.operand",
        "description": "tracepointdebug.probe.condition.operand.operand",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.operand.operand",
        "documentation": {}
    },
    {
        "label": "Operand",
        "importPath": "tracepointdebug.probe.condition.operand.operand",
        "description": "tracepointdebug.probe.condition.operand.operand",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.operand.operand",
        "documentation": {}
    },
    {
        "label": "Operand",
        "importPath": "tracepointdebug.probe.condition.operand.operand",
        "description": "tracepointdebug.probe.condition.operand.operand",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.operand.operand",
        "documentation": {}
    },
    {
        "label": "BooleanOperand",
        "importPath": "tracepointdebug.probe.condition.operand.boolean_operand",
        "description": "tracepointdebug.probe.condition.operand.boolean_operand",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.operand.boolean_operand",
        "documentation": {}
    },
    {
        "label": "BooleanOperand",
        "importPath": "tracepointdebug.probe.condition.operand.boolean_operand",
        "description": "tracepointdebug.probe.condition.operand.boolean_operand",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.operand.boolean_operand",
        "documentation": {}
    },
    {
        "label": "NullOperand",
        "importPath": "tracepointdebug.probe.condition.operand.null_operand",
        "description": "tracepointdebug.probe.condition.operand.null_operand",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.operand.null_operand",
        "documentation": {}
    },
    {
        "label": "NullOperand",
        "importPath": "tracepointdebug.probe.condition.operand.null_operand",
        "description": "tracepointdebug.probe.condition.operand.null_operand",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.operand.null_operand",
        "documentation": {}
    },
    {
        "label": "NumberOperand",
        "importPath": "tracepointdebug.probe.condition.operand.number_operand",
        "description": "tracepointdebug.probe.condition.operand.number_operand",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.operand.number_operand",
        "documentation": {}
    },
    {
        "label": "NumberOperand",
        "importPath": "tracepointdebug.probe.condition.operand.number_operand",
        "description": "tracepointdebug.probe.condition.operand.number_operand",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.operand.number_operand",
        "documentation": {}
    },
    {
        "label": "ObjectOperand",
        "importPath": "tracepointdebug.probe.condition.operand.object_operand",
        "description": "tracepointdebug.probe.condition.operand.object_operand",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.operand.object_operand",
        "documentation": {}
    },
    {
        "label": "StringOperand",
        "importPath": "tracepointdebug.probe.condition.operand.string_operand",
        "description": "tracepointdebug.probe.condition.operand.string_operand",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.operand.string_operand",
        "documentation": {}
    },
    {
        "label": "StringOperand",
        "importPath": "tracepointdebug.probe.condition.operand.string_operand",
        "description": "tracepointdebug.probe.condition.operand.string_operand",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.operand.string_operand",
        "documentation": {}
    },
    {
        "label": "VariableValueProvider",
        "importPath": "tracepointdebug.probe.condition.variable_value_provider",
        "description": "tracepointdebug.probe.condition.variable_value_provider",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.variable_value_provider",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "BinaryOperator",
        "importPath": "tracepointdebug.probe.condition.binary_operator",
        "description": "tracepointdebug.probe.condition.binary_operator",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.binary_operator",
        "documentation": {}
    },
    {
        "label": "BinaryOperator",
        "importPath": "tracepointdebug.probe.condition.binary_operator",
        "description": "tracepointdebug.probe.condition.binary_operator",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.binary_operator",
        "documentation": {}
    },
    {
        "label": "Condition",
        "importPath": "tracepointdebug.probe.condition.condition",
        "description": "tracepointdebug.probe.condition.condition",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.condition",
        "documentation": {}
    },
    {
        "label": "Condition",
        "importPath": "tracepointdebug.probe.condition.condition",
        "description": "tracepointdebug.probe.condition.condition",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.condition",
        "documentation": {}
    },
    {
        "label": "ComparisonOperator",
        "importPath": "tracepointdebug.probe.condition.comparison_operator",
        "description": "tracepointdebug.probe.condition.comparison_operator",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.comparison_operator",
        "documentation": {}
    },
    {
        "label": "ComparisonOperator",
        "importPath": "tracepointdebug.probe.condition.comparison_operator",
        "description": "tracepointdebug.probe.condition.comparison_operator",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.comparison_operator",
        "documentation": {}
    },
    {
        "label": "CompositeCondition",
        "importPath": "tracepointdebug.probe.condition.composite_condition",
        "description": "tracepointdebug.probe.condition.composite_condition",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.composite_condition",
        "documentation": {}
    },
    {
        "label": "ConstantValueProvider",
        "importPath": "tracepointdebug.probe.condition.constant_value_provider",
        "description": "tracepointdebug.probe.condition.constant_value_provider",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.constant_value_provider",
        "documentation": {}
    },
    {
        "label": "VariableOperand",
        "importPath": "tracepointdebug.probe.condition.operand.variable_operand",
        "description": "tracepointdebug.probe.condition.operand.variable_operand",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.operand.variable_operand",
        "documentation": {}
    },
    {
        "label": "SingleCondition",
        "importPath": "tracepointdebug.probe.condition.single_condition",
        "description": "tracepointdebug.probe.condition.single_condition",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.single_condition",
        "documentation": {}
    },
    {
        "label": "ValueProvider",
        "importPath": "tracepointdebug.probe.condition.value_provider",
        "description": "tracepointdebug.probe.condition.value_provider",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.value_provider",
        "documentation": {}
    },
    {
        "label": "ValueProvider",
        "importPath": "tracepointdebug.probe.condition.value_provider",
        "description": "tracepointdebug.probe.condition.value_provider",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.value_provider",
        "documentation": {}
    },
    {
        "label": "RequestHandler",
        "importPath": "tracepointdebug.broker.handler.request.request_handler",
        "description": "tracepointdebug.broker.handler.request.request_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.handler.request.request_handler",
        "documentation": {}
    },
    {
        "label": "RequestHandler",
        "importPath": "tracepointdebug.broker.handler.request.request_handler",
        "description": "tracepointdebug.broker.handler.request.request_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.handler.request.request_handler",
        "documentation": {}
    },
    {
        "label": "RequestHandler",
        "importPath": "tracepointdebug.broker.handler.request.request_handler",
        "description": "tracepointdebug.broker.handler.request.request_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.handler.request.request_handler",
        "documentation": {}
    },
    {
        "label": "RequestHandler",
        "importPath": "tracepointdebug.broker.handler.request.request_handler",
        "description": "tracepointdebug.broker.handler.request.request_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.handler.request.request_handler",
        "documentation": {}
    },
    {
        "label": "RequestHandler",
        "importPath": "tracepointdebug.broker.handler.request.request_handler",
        "description": "tracepointdebug.broker.handler.request.request_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.handler.request.request_handler",
        "documentation": {}
    },
    {
        "label": "RequestHandler",
        "importPath": "tracepointdebug.broker.handler.request.request_handler",
        "description": "tracepointdebug.broker.handler.request.request_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.handler.request.request_handler",
        "documentation": {}
    },
    {
        "label": "RequestHandler",
        "importPath": "tracepointdebug.broker.handler.request.request_handler",
        "description": "tracepointdebug.broker.handler.request.request_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.handler.request.request_handler",
        "documentation": {}
    },
    {
        "label": "RequestHandler",
        "importPath": "tracepointdebug.broker.handler.request.request_handler",
        "description": "tracepointdebug.broker.handler.request.request_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.handler.request.request_handler",
        "documentation": {}
    },
    {
        "label": "RequestHandler",
        "importPath": "tracepointdebug.broker.handler.request.request_handler",
        "description": "tracepointdebug.broker.handler.request.request_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.handler.request.request_handler",
        "documentation": {}
    },
    {
        "label": "RequestHandler",
        "importPath": "tracepointdebug.broker.handler.request.request_handler",
        "description": "tracepointdebug.broker.handler.request.request_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.handler.request.request_handler",
        "documentation": {}
    },
    {
        "label": "DisableLogPointRequest",
        "importPath": "tracepointdebug.probe.request.logPoint.disable_log_point_request",
        "description": "tracepointdebug.probe.request.logPoint.disable_log_point_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.request.logPoint.disable_log_point_request",
        "documentation": {}
    },
    {
        "label": "DisableLogPointResponse",
        "importPath": "tracepointdebug.probe.response.logPoint.disable_log_point_response",
        "description": "tracepointdebug.probe.response.logPoint.disable_log_point_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.response.logPoint.disable_log_point_response",
        "documentation": {}
    },
    {
        "label": "EnableLogPointRequest",
        "importPath": "tracepointdebug.probe.request.logPoint.enable_log_point_request",
        "description": "tracepointdebug.probe.request.logPoint.enable_log_point_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.request.logPoint.enable_log_point_request",
        "documentation": {}
    },
    {
        "label": "EnableLogPointResponse",
        "importPath": "tracepointdebug.probe.response.logPoint.enable_log_point_response",
        "description": "tracepointdebug.probe.response.logPoint.enable_log_point_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.response.logPoint.enable_log_point_response",
        "documentation": {}
    },
    {
        "label": "PutLogPointRequest",
        "importPath": "tracepointdebug.probe.request.logPoint.put_log_point_request",
        "description": "tracepointdebug.probe.request.logPoint.put_log_point_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.request.logPoint.put_log_point_request",
        "documentation": {}
    },
    {
        "label": "PutLogPointResponse",
        "importPath": "tracepointdebug.probe.response.logPoint.put_log_point_response",
        "description": "tracepointdebug.probe.response.logPoint.put_log_point_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.response.logPoint.put_log_point_response",
        "documentation": {}
    },
    {
        "label": "validate_file_name_and_line_no",
        "importPath": "tracepointdebug.utils.validation",
        "description": "tracepointdebug.utils.validation",
        "isExtraImport": true,
        "detail": "tracepointdebug.utils.validation",
        "documentation": {}
    },
    {
        "label": "validate_file_name_and_line_no",
        "importPath": "tracepointdebug.utils.validation",
        "description": "tracepointdebug.utils.validation",
        "isExtraImport": true,
        "detail": "tracepointdebug.utils.validation",
        "documentation": {}
    },
    {
        "label": "validate_file_name_and_line_no",
        "importPath": "tracepointdebug.utils.validation",
        "description": "tracepointdebug.utils.validation",
        "isExtraImport": true,
        "detail": "tracepointdebug.utils.validation",
        "documentation": {}
    },
    {
        "label": "validate_file_name_and_line_no",
        "importPath": "tracepointdebug.utils.validation",
        "description": "tracepointdebug.utils.validation",
        "isExtraImport": true,
        "detail": "tracepointdebug.utils.validation",
        "documentation": {}
    },
    {
        "label": "RemoveLogPointRequest",
        "importPath": "tracepointdebug.probe.request.logPoint.remove_log_point_request",
        "description": "tracepointdebug.probe.request.logPoint.remove_log_point_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.request.logPoint.remove_log_point_request",
        "documentation": {}
    },
    {
        "label": "RemoveLogPointResponse",
        "importPath": "tracepointdebug.probe.response.logPoint.remove_log_point_response",
        "description": "tracepointdebug.probe.response.logPoint.remove_log_point_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.response.logPoint.remove_log_point_response",
        "documentation": {}
    },
    {
        "label": "UpdateLogPointRequest",
        "importPath": "tracepointdebug.probe.request.logPoint.update_log_point_request",
        "description": "tracepointdebug.probe.request.logPoint.update_log_point_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.request.logPoint.update_log_point_request",
        "documentation": {}
    },
    {
        "label": "UpdateLogPointResponse",
        "importPath": "tracepointdebug.probe.response.logPoint.update_log_point_response",
        "description": "tracepointdebug.probe.response.logPoint.update_log_point_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.response.logPoint.update_log_point_response",
        "documentation": {}
    },
    {
        "label": "DisableTracePointRequest",
        "importPath": "tracepointdebug.probe.request.disable_trace_point_request",
        "description": "tracepointdebug.probe.request.disable_trace_point_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.request.disable_trace_point_request",
        "documentation": {}
    },
    {
        "label": "DisableTracePointResponse",
        "importPath": "tracepointdebug.probe.response.disable_trace_point_response",
        "description": "tracepointdebug.probe.response.disable_trace_point_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.response.disable_trace_point_response",
        "documentation": {}
    },
    {
        "label": "EnableTracePointRequest",
        "importPath": "tracepointdebug.probe.request.enable_trace_point_request",
        "description": "tracepointdebug.probe.request.enable_trace_point_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.request.enable_trace_point_request",
        "documentation": {}
    },
    {
        "label": "EnableTracePointResponse",
        "importPath": "tracepointdebug.probe.response.enable_trace_point_response",
        "description": "tracepointdebug.probe.response.enable_trace_point_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.response.enable_trace_point_response",
        "documentation": {}
    },
    {
        "label": "PutTracePointRequest",
        "importPath": "tracepointdebug.probe.request.put_trace_point_request",
        "description": "tracepointdebug.probe.request.put_trace_point_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.request.put_trace_point_request",
        "documentation": {}
    },
    {
        "label": "PutTracePointResponse",
        "importPath": "tracepointdebug.probe.response.put_trace_point_response",
        "description": "tracepointdebug.probe.response.put_trace_point_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.response.put_trace_point_response",
        "documentation": {}
    },
    {
        "label": "RemoveTracePointRequest",
        "importPath": "tracepointdebug.probe.request.remove_trace_point_request",
        "description": "tracepointdebug.probe.request.remove_trace_point_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.request.remove_trace_point_request",
        "documentation": {}
    },
    {
        "label": "RemoveTracePointResponse",
        "importPath": "tracepointdebug.probe.response.remove_trace_point_response",
        "description": "tracepointdebug.probe.response.remove_trace_point_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.response.remove_trace_point_response",
        "documentation": {}
    },
    {
        "label": "UpdateTracePointRequest",
        "importPath": "tracepointdebug.probe.request.update_trace_point_request",
        "description": "tracepointdebug.probe.request.update_trace_point_request",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.request.update_trace_point_request",
        "documentation": {}
    },
    {
        "label": "UpdateTracePointResponse",
        "importPath": "tracepointdebug.probe.response.update_trace_point_response",
        "description": "tracepointdebug.probe.response.update_trace_point_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.response.update_trace_point_response",
        "documentation": {}
    },
    {
        "label": "ResponseHandler",
        "importPath": "tracepointdebug.broker.handler.response.response_handler",
        "description": "tracepointdebug.broker.handler.response.response_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.handler.response.response_handler",
        "documentation": {}
    },
    {
        "label": "ResponseHandler",
        "importPath": "tracepointdebug.broker.handler.response.response_handler",
        "description": "tracepointdebug.broker.handler.response.response_handler",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.handler.response.response_handler",
        "documentation": {}
    },
    {
        "label": "tracepointdebug.probe.errors",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tracepointdebug.probe.errors",
        "description": "tracepointdebug.probe.errors",
        "detail": "tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "LOGPOINT_ALREADY_EXIST",
        "importPath": "tracepointdebug.probe.errors",
        "description": "tracepointdebug.probe.errors",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "TRACEPOINT_ALREADY_EXIST",
        "importPath": "tracepointdebug.probe.errors",
        "description": "tracepointdebug.probe.errors",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "CONDITION_CHECK_FAILED",
        "importPath": "tracepointdebug.probe.errors",
        "description": "tracepointdebug.probe.errors",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "LINE_NO_IS_NOT_AVAILABLE",
        "importPath": "tracepointdebug.probe.errors",
        "description": "tracepointdebug.probe.errors",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "LINE_NO_IS_NOT_AVAILABLE_2",
        "importPath": "tracepointdebug.probe.errors",
        "description": "tracepointdebug.probe.errors",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "LINE_NO_IS_NOT_AVAILABLE_3",
        "importPath": "tracepointdebug.probe.errors",
        "description": "tracepointdebug.probe.errors",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "PUT_TRACEPOINT_FAILED",
        "importPath": "tracepointdebug.probe.errors",
        "description": "tracepointdebug.probe.errors",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "SOURCE_CODE_MISMATCH_DETECTED",
        "importPath": "tracepointdebug.probe.errors",
        "description": "tracepointdebug.probe.errors",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "FILE_NAME_IS_MANDATORY",
        "importPath": "tracepointdebug.probe.errors",
        "description": "tracepointdebug.probe.errors",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "LINE_NUMBER_IS_MANDATORY",
        "importPath": "tracepointdebug.probe.errors",
        "description": "tracepointdebug.probe.errors",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "FilterLogPointsResponse",
        "importPath": "tracepointdebug.probe.response.logPoint.filter_logpoints_response",
        "description": "tracepointdebug.probe.response.logPoint.filter_logpoints_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.response.logPoint.filter_logpoints_response",
        "documentation": {}
    },
    {
        "label": "FilterTracePointsResponse",
        "importPath": "tracepointdebug.probe.response",
        "description": "tracepointdebug.probe.response",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.response",
        "documentation": {}
    },
    {
        "label": "RateLimitResult",
        "importPath": "tracepointdebug.probe.ratelimit.rate_limit_result",
        "description": "tracepointdebug.probe.ratelimit.rate_limit_result",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.ratelimit.rate_limit_result",
        "documentation": {}
    },
    {
        "label": "RateLimitResult",
        "importPath": "tracepointdebug.probe.ratelimit.rate_limit_result",
        "description": "tracepointdebug.probe.ratelimit.rate_limit_result",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.ratelimit.rate_limit_result",
        "documentation": {}
    },
    {
        "label": "RateLimitResult",
        "importPath": "tracepointdebug.probe.ratelimit.rate_limit_result",
        "description": "tracepointdebug.probe.ratelimit.rate_limit_result",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.ratelimit.rate_limit_result",
        "documentation": {}
    },
    {
        "label": "constants",
        "importPath": "tracepointdebug.probe",
        "description": "tracepointdebug.probe",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe",
        "documentation": {}
    },
    {
        "label": "constants",
        "importPath": "tracepointdebug.probe",
        "description": "tracepointdebug.probe",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe",
        "documentation": {}
    },
    {
        "label": "constants",
        "importPath": "tracepointdebug.probe",
        "description": "tracepointdebug.probe",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe",
        "documentation": {}
    },
    {
        "label": "constants",
        "importPath": "tracepointdebug.probe",
        "description": "tracepointdebug.probe",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "tracepointdebug.probe",
        "description": "tracepointdebug.probe",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "tracepointdebug.probe",
        "description": "tracepointdebug.probe",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "importPath": "tracepointdebug.broker.response.base_response",
        "description": "tracepointdebug.broker.response.base_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.response.base_response",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "importPath": "tracepointdebug.broker.response.base_response",
        "description": "tracepointdebug.broker.response.base_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.response.base_response",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "importPath": "tracepointdebug.broker.response.base_response",
        "description": "tracepointdebug.broker.response.base_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.response.base_response",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "importPath": "tracepointdebug.broker.response.base_response",
        "description": "tracepointdebug.broker.response.base_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.response.base_response",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "importPath": "tracepointdebug.broker.response.base_response",
        "description": "tracepointdebug.broker.response.base_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.response.base_response",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "importPath": "tracepointdebug.broker.response.base_response",
        "description": "tracepointdebug.broker.response.base_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.response.base_response",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "importPath": "tracepointdebug.broker.response.base_response",
        "description": "tracepointdebug.broker.response.base_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.response.base_response",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "importPath": "tracepointdebug.broker.response.base_response",
        "description": "tracepointdebug.broker.response.base_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.response.base_response",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "importPath": "tracepointdebug.broker.response.base_response",
        "description": "tracepointdebug.broker.response.base_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.response.base_response",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "importPath": "tracepointdebug.broker.response.base_response",
        "description": "tracepointdebug.broker.response.base_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.response.base_response",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "importPath": "tracepointdebug.broker.response.base_response",
        "description": "tracepointdebug.broker.response.base_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.response.base_response",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "importPath": "tracepointdebug.broker.response.base_response",
        "description": "tracepointdebug.broker.response.base_response",
        "isExtraImport": true,
        "detail": "tracepointdebug.broker.response.base_response",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "CodedError",
        "importPath": "tracepointdebug.probe.coded_error",
        "description": "tracepointdebug.probe.coded_error",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.coded_error",
        "documentation": {}
    },
    {
        "label": "pystache",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pystache",
        "description": "pystache",
        "detail": "pystache",
        "documentation": {}
    },
    {
        "label": "cdbg_native",
        "importPath": "tracepointdebug",
        "description": "tracepointdebug",
        "isExtraImport": true,
        "detail": "tracepointdebug",
        "documentation": {}
    },
    {
        "label": "cdbg_native",
        "importPath": "tracepointdebug",
        "description": "tracepointdebug",
        "isExtraImport": true,
        "detail": "tracepointdebug",
        "documentation": {}
    },
    {
        "label": "imphook2",
        "importPath": "tracepointdebug.external.googleclouddebugger",
        "description": "tracepointdebug.external.googleclouddebugger",
        "isExtraImport": true,
        "detail": "tracepointdebug.external.googleclouddebugger",
        "documentation": {}
    },
    {
        "label": "module_search2",
        "importPath": "tracepointdebug.external.googleclouddebugger",
        "description": "tracepointdebug.external.googleclouddebugger",
        "isExtraImport": true,
        "detail": "tracepointdebug.external.googleclouddebugger",
        "documentation": {}
    },
    {
        "label": "module_utils2",
        "importPath": "tracepointdebug.external.googleclouddebugger",
        "description": "tracepointdebug.external.googleclouddebugger",
        "isExtraImport": true,
        "detail": "tracepointdebug.external.googleclouddebugger",
        "documentation": {}
    },
    {
        "label": "imphook2",
        "importPath": "tracepointdebug.external.googleclouddebugger",
        "description": "tracepointdebug.external.googleclouddebugger",
        "isExtraImport": true,
        "detail": "tracepointdebug.external.googleclouddebugger",
        "documentation": {}
    },
    {
        "label": "module_search2",
        "importPath": "tracepointdebug.external.googleclouddebugger",
        "description": "tracepointdebug.external.googleclouddebugger",
        "isExtraImport": true,
        "detail": "tracepointdebug.external.googleclouddebugger",
        "documentation": {}
    },
    {
        "label": "module_utils2",
        "importPath": "tracepointdebug.external.googleclouddebugger",
        "description": "tracepointdebug.external.googleclouddebugger",
        "isExtraImport": true,
        "detail": "tracepointdebug.external.googleclouddebugger",
        "documentation": {}
    },
    {
        "label": "GetCodeObjectAtLine",
        "importPath": "tracepointdebug.external.googleclouddebugger.module_explorer",
        "description": "tracepointdebug.external.googleclouddebugger.module_explorer",
        "isExtraImport": true,
        "detail": "tracepointdebug.external.googleclouddebugger.module_explorer",
        "documentation": {}
    },
    {
        "label": "GetCodeObjectAtLine",
        "importPath": "tracepointdebug.external.googleclouddebugger.module_explorer",
        "description": "tracepointdebug.external.googleclouddebugger.module_explorer",
        "isExtraImport": true,
        "detail": "tracepointdebug.external.googleclouddebugger.module_explorer",
        "documentation": {}
    },
    {
        "label": "ConditionContext",
        "importPath": "tracepointdebug.probe.condition.condition_context",
        "description": "tracepointdebug.probe.condition.condition_context",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.condition_context",
        "documentation": {}
    },
    {
        "label": "ConditionContext",
        "importPath": "tracepointdebug.probe.condition.condition_context",
        "description": "tracepointdebug.probe.condition.condition_context",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.condition_context",
        "documentation": {}
    },
    {
        "label": "ConditionFactory",
        "importPath": "tracepointdebug.probe.condition.condition_factory",
        "description": "tracepointdebug.probe.condition.condition_factory",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.condition_factory",
        "documentation": {}
    },
    {
        "label": "ConditionFactory",
        "importPath": "tracepointdebug.probe.condition.condition_factory",
        "description": "tracepointdebug.probe.condition.condition_factory",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.condition.condition_factory",
        "documentation": {}
    },
    {
        "label": "LogPointEvent",
        "importPath": "tracepointdebug.probe.event.logpoint.log_point_event",
        "description": "tracepointdebug.probe.event.logpoint.log_point_event",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.event.logpoint.log_point_event",
        "documentation": {}
    },
    {
        "label": "LogPointFailedEvent",
        "importPath": "tracepointdebug.probe.event.logpoint.log_point_failed_event",
        "description": "tracepointdebug.probe.event.logpoint.log_point_failed_event",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.event.logpoint.log_point_failed_event",
        "documentation": {}
    },
    {
        "label": "PutLogPointFailedEvent",
        "importPath": "tracepointdebug.probe.event.logpoint.put_logpoint_failed_event",
        "description": "tracepointdebug.probe.event.logpoint.put_logpoint_failed_event",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.event.logpoint.put_logpoint_failed_event",
        "documentation": {}
    },
    {
        "label": "RateLimiter",
        "importPath": "tracepointdebug.probe.ratelimit.rate_limiter",
        "description": "tracepointdebug.probe.ratelimit.rate_limiter",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.ratelimit.rate_limiter",
        "documentation": {}
    },
    {
        "label": "RateLimiter",
        "importPath": "tracepointdebug.probe.ratelimit.rate_limiter",
        "description": "tracepointdebug.probe.ratelimit.rate_limiter",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.ratelimit.rate_limiter",
        "documentation": {}
    },
    {
        "label": "SnapshotCollector",
        "importPath": "tracepointdebug.probe.snapshot_collector",
        "description": "tracepointdebug.probe.snapshot_collector",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.snapshot_collector",
        "documentation": {}
    },
    {
        "label": "SnapshotCollector",
        "importPath": "tracepointdebug.probe.snapshot_collector",
        "description": "tracepointdebug.probe.snapshot_collector",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.snapshot_collector",
        "documentation": {}
    },
    {
        "label": "get_source_code_hash",
        "importPath": "tracepointdebug.probe.source_code_helper",
        "description": "tracepointdebug.probe.source_code_helper",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.source_code_helper",
        "documentation": {}
    },
    {
        "label": "get_source_code_hash",
        "importPath": "tracepointdebug.probe.source_code_helper",
        "description": "tracepointdebug.probe.source_code_helper",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.source_code_helper",
        "documentation": {}
    },
    {
        "label": "print_log_event_message",
        "importPath": "tracepointdebug.utils.log.logger",
        "description": "tracepointdebug.utils.log.logger",
        "isExtraImport": true,
        "detail": "tracepointdebug.utils.log.logger",
        "documentation": {}
    },
    {
        "label": "LogPoint",
        "importPath": "tracepointdebug.probe.log_point",
        "description": "tracepointdebug.probe.log_point",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.log_point",
        "documentation": {}
    },
    {
        "label": "LogPointConfig",
        "importPath": "tracepointdebug.probe.log_point_config",
        "description": "tracepointdebug.probe.log_point_config",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.log_point_config",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "tracepointdebug.probe.frame",
        "description": "tracepointdebug.probe.frame",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.frame",
        "documentation": {}
    },
    {
        "label": "Snapshot",
        "importPath": "tracepointdebug.probe.snapshot",
        "description": "tracepointdebug.probe.snapshot",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.snapshot",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "tracepointdebug.probe.value",
        "description": "tracepointdebug.probe.value",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.value",
        "documentation": {}
    },
    {
        "label": "Variable",
        "importPath": "tracepointdebug.probe.variable",
        "description": "tracepointdebug.probe.variable",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.variable",
        "documentation": {}
    },
    {
        "label": "Variables",
        "importPath": "tracepointdebug.probe.variables",
        "description": "tracepointdebug.probe.variables",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.variables",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "PutTracePointFailedEvent",
        "importPath": "tracepointdebug.probe.event.put_tracepoint_failed_event",
        "description": "tracepointdebug.probe.event.put_tracepoint_failed_event",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.event.put_tracepoint_failed_event",
        "documentation": {}
    },
    {
        "label": "TracePointRateLimitEvent",
        "importPath": "tracepointdebug.probe.event.trace_point_rate_limit_event",
        "description": "tracepointdebug.probe.event.trace_point_rate_limit_event",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.event.trace_point_rate_limit_event",
        "documentation": {}
    },
    {
        "label": "TracePointSnapshotEvent",
        "importPath": "tracepointdebug.probe.event.trace_point_snapshot_event",
        "description": "tracepointdebug.probe.event.trace_point_snapshot_event",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.event.trace_point_snapshot_event",
        "documentation": {}
    },
    {
        "label": "TracePointSnapshotFailedEvent",
        "importPath": "tracepointdebug.probe.event.tracepoint_snapshot_failed_event",
        "description": "tracepointdebug.probe.event.tracepoint_snapshot_failed_event",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.event.tracepoint_snapshot_failed_event",
        "documentation": {}
    },
    {
        "label": "TraceSupport",
        "importPath": "tracepointdebug.trace",
        "description": "tracepointdebug.trace",
        "isExtraImport": true,
        "detail": "tracepointdebug.trace",
        "documentation": {}
    },
    {
        "label": "TracePoint",
        "importPath": "tracepointdebug.probe.trace_point",
        "description": "tracepointdebug.probe.trace_point",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.trace_point",
        "documentation": {}
    },
    {
        "label": "TracePointConfig",
        "importPath": "tracepointdebug.probe.trace_point_config",
        "description": "tracepointdebug.probe.trace_point_config",
        "isExtraImport": true,
        "detail": "tracepointdebug.probe.trace_point_config",
        "documentation": {}
    },
    {
        "label": "database",
        "importPath": "test.test_db",
        "description": "test.test_db",
        "isExtraImport": true,
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "checkpw",
        "importPath": "bcrypt",
        "description": "bcrypt",
        "isExtraImport": true,
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "gensalt",
        "importPath": "bcrypt",
        "description": "bcrypt",
        "isExtraImport": true,
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "hashpw",
        "importPath": "bcrypt",
        "description": "bcrypt",
        "isExtraImport": true,
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Bcrypt",
        "importPath": "flask_bcrypt",
        "description": "flask_bcrypt",
        "isExtraImport": true,
        "detail": "flask_bcrypt",
        "documentation": {}
    },
    {
        "label": "utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils",
        "description": "utils",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "resources",
        "description": "resources",
        "isExtraImport": true,
        "detail": "resources",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "description": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "description": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "peekOfCode": "def main(argv):\n    results = []\n    for line in sys.stdin.readlines():\n        filename, line_number, message = line.split(\":\")\n        results.append(\n            to_result_sarif(\n                filename, int(line_number), 0, \"misspelled\", message.strip()\n            )\n        )\n    sarif = {",
        "detail": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.nancy.parse",
        "description": ".trunk.plugins.trunk.linters.nancy.parse",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.nancy.parse",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.nancy.parse",
        "description": ".trunk.plugins.trunk.linters.nancy.parse",
        "peekOfCode": "def main(argv):\n    results = []\n    nancy_output = json.load(sys.stdin)\n    for vuln_entry in nancy_output.get(\"vulnerable\", []):\n        for vuln in vuln_entry.get(\"Vulnerabilities\", []):\n            results.append(\n                to_result_sarif(\n                    \".\",\n                    0,\n                    0,",
        "detail": ".trunk.plugins.trunk.linters.nancy.parse",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "peekOfCode": "def main(argv):\n    sqlfluff_json = json.load(sys.stdin)\n    results = []\n    for result in sqlfluff_json:\n        filepath = result[\"filepath\"]\n        for violation in result[\"violations\"]:\n            line_number = violation[\"line_no\"]\n            column_number = violation[\"line_pos\"]\n            rule_id = violation[\"code\"]\n            message = violation[\"description\"]",
        "detail": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "documentation": {}
    },
    {
        "label": "initialize_db",
        "kind": 2,
        "importPath": "database.db",
        "description": "database.db",
        "peekOfCode": "def initialize_db(app):\n    db.init_app(app)",
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "database.db",
        "description": "database.db",
        "peekOfCode": "db = MongoEngine()\nconnect(host=os.getenv(\"MONGODB_URI\"))\ndef initialize_db(app):\n    db.init_app(app)",
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "Insult",
        "kind": 6,
        "importPath": "database.models",
        "description": "database.models",
        "peekOfCode": "class Insult(db.Document):\n    content = db.StringField(required=True)\n    category = db.StringField(required=True)\n    explict = db.BooleanField(required=True)\n    added_on = db.StringField(required=True)\n    added_by = db.StringField(required=True)\n    status = db.StringField(required=True, default=\"active\")\n    meta = {\"collection\": \"insults\"}\nclass User(db.Document):\n    email = db.EmailField(required=True, unique=True)",
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "database.models",
        "description": "database.models",
        "peekOfCode": "class User(db.Document):\n    email = db.EmailField(required=True, unique=True)\n    password = db.StringField(required=True, min_length=6)\n    joined_on = db.StringField(required=True)\n    status = db.StringField(required=True, default=\"active\")\n    meta = {\"collection\": \"users\"}",
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "database.models",
        "description": "database.models",
        "peekOfCode": "now = pendulum.now()\nclass Insult(db.Document):\n    content = db.StringField(required=True)\n    category = db.StringField(required=True)\n    explict = db.BooleanField(required=True)\n    added_on = db.StringField(required=True)\n    added_by = db.StringField(required=True)\n    status = db.StringField(required=True, default=\"active\")\n    meta = {\"collection\": \"insults\"}\nclass User(db.Document):",
        "detail": "database.models",
        "documentation": {}
    },
    {
        "label": "SignupApi",
        "kind": 6,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "class SignupApi(Resource):\n    @api.doc(model=signup_model, body=User)\n    @api.response(201, \"User Created\")\n    @api.response(400, \"Bad Request\")\n    @api.response(401, \"Unauthroized\")\n    @api.doc(parser=parser)\n    @api.expect(signup_model)\n    def post(self):\n        body = request.get_json()\n        # # Verifying the Required Keys Are In Payload",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "LoginApi",
        "kind": 6,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "class LoginApi(Resource):\n    @api.doc(model=token_request_model, body=User)\n    @api.response(401, \"Unauthorized - Incorrect Password or Un-Registred Email\")\n    @api.response(201, \"Token Issued\")\n    @api.doc(params={\"email\": \"A Vaild Email Address\", \"location\": \"form\"})\n    @api.doc(params={\"Password\": \"Any combination Of 7 or More ASCII Character.\"})\n    @api.expect(token_request_model)\n    def post(self):\n        body = request.get_json()\n        # if \"email\" not in body.keys():",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "api = Namespace(\n    \"Authorizations & Authentication\",\n    description=\"These endpoints encompass all the endpoints needed to:\\n 1. Sign-Up to contribute a joke. \\n 2. Provisioning a Bearer Token require at the time of submission. <br> <sub>Note: The Bearer Token is required to submit a joke, and registration is required to receive a token.</sub>\",\n)\n# Namespace Related Models\nsignup_model = api.model(\n    \"SignUp\",\n    {\n        \"email\": fields.String(required=True),\n        \"password\": fields.String(min_length=7, required=True),",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "signup_model",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "signup_model = api.model(\n    \"SignUp\",\n    {\n        \"email\": fields.String(required=True),\n        \"password\": fields.String(min_length=7, required=True),\n    },\n)\ntoken_request_model = api.model(\n    \"Bearer Token Provision\",\n    {",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "token_request_model",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "token_request_model = api.model(\n    \"Bearer Token Provision\",\n    {\n        \"email\": fields.String(required=True),\n        \"password\": fields.String(min_length=7, required=True),\n    },\n)\n# Top-Level Vaariables/Plugins\njwt_redis_blocklist = redis.StrictRedis(\n    host=os.getenv(\"REDIS_URI\"), port=6379, db=0, decode_responses=True",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "jwt_redis_blocklist",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "jwt_redis_blocklist = redis.StrictRedis(\n    host=os.getenv(\"REDIS_URI\"), port=6379, db=0, decode_responses=True\n)\nparser = reqparse.RequestParser()\nparser.add_argument(\"email\", type=str, required=True, location=\"form\")\nparser.add_argument(\"password\", type=str, required=True, location=\"form\")\nnow = pendulum.now()\n@api.route(\"auth\")\nclass SignupApi(Resource):\n    @api.doc(model=signup_model, body=User)",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "parser = reqparse.RequestParser()\nparser.add_argument(\"email\", type=str, required=True, location=\"form\")\nparser.add_argument(\"password\", type=str, required=True, location=\"form\")\nnow = pendulum.now()\n@api.route(\"auth\")\nclass SignupApi(Resource):\n    @api.doc(model=signup_model, body=User)\n    @api.response(201, \"User Created\")\n    @api.response(400, \"Bad Request\")\n    @api.response(401, \"Unauthroized\")",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "resources.auth",
        "description": "resources.auth",
        "peekOfCode": "now = pendulum.now()\n@api.route(\"auth\")\nclass SignupApi(Resource):\n    @api.doc(model=signup_model, body=User)\n    @api.response(201, \"User Created\")\n    @api.response(400, \"Bad Request\")\n    @api.response(401, \"Unauthroized\")\n    @api.doc(parser=parser)\n    @api.expect(signup_model)\n    def post(self):",
        "detail": "resources.auth",
        "documentation": {}
    },
    {
        "label": "InsultsAPI",
        "kind": 6,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "class InsultsAPI(Resource):\n    #! GET ENDPOINT - Insults\n    @marshal_with(GET_fields, skip_none=True)\n    @api.doc(model=GET_fields, parser=get_parsers)\n    @api.response(200, \"Insults Found\")\n    @api.response(\n        400, \"Bad Request - If passing a parameter, check values and reattempt\"\n    )\n    @api.expect(get_parsers)\n    def get(self):",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "api = Namespace(\"Insults\", description=\"Joke operations\")\n#!Namespace Related Models\nGET_fields = api.model(\n    \"Insult (Get Method)\",\n    {\n        \"explicit\": fields.Boolean,\n        \"catagory\": fields.String,\n    },\n)\nPOST_fields = api.model(",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "GET_fields",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "GET_fields = api.model(\n    \"Insult (Get Method)\",\n    {\n        \"explicit\": fields.Boolean,\n        \"catagory\": fields.String,\n    },\n)\nPOST_fields = api.model(\n    \"Insult (Post Method)\",\n    {",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "POST_fields",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "POST_fields = api.model(\n    \"Insult (Post Method)\",\n    {\n        \"content\": fields.String,\n        \"explicit\": fields.Boolean,\n        \"catagory\": fields.String,\n        \"bearer token\": fields.String,\n    },\n)\n#! Top-Level Vaariables/Plugins",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "now = pendulum.now()\nparser = reqparse.RequestParser()\njoke_categories = Jokester.get_catagories()\nprint(joke_categories)\n#!Request Parameters Designations\nparser.add_argument(\"content\", type=str, required=True, location=\"form\")\nparser.add_argument(\"explicit\", type=str, required=True, location=\"form\")\nparser.add_argument(\n    \"catagory\",\n    type=str,",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "parser = reqparse.RequestParser()\njoke_categories = Jokester.get_catagories()\nprint(joke_categories)\n#!Request Parameters Designations\nparser.add_argument(\"content\", type=str, required=True, location=\"form\")\nparser.add_argument(\"explicit\", type=str, required=True, location=\"form\")\nparser.add_argument(\n    \"catagory\",\n    type=str,\n    required=True,",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "joke_categories",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "joke_categories = Jokester.get_catagories()\nprint(joke_categories)\n#!Request Parameters Designations\nparser.add_argument(\"content\", type=str, required=True, location=\"form\")\nparser.add_argument(\"explicit\", type=str, required=True, location=\"form\")\nparser.add_argument(\n    \"catagory\",\n    type=str,\n    required=True,\n    location=\"form\",",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "get_parsers",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "get_parsers = parser.copy()\nPOST_parsers = parser.copy()\nget_parsers.replace_argument(\n    \"explicit\",\n    type=str,\n    required=False,\n    location=\"headers\",\n    help=\"Explicit Filter. When Set to True the default filter is turned off.\",\n    choices=[\"true\", \"false\"],\n)",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "POST_parsers",
        "kind": 5,
        "importPath": "resources.insult",
        "description": "resources.insult",
        "peekOfCode": "POST_parsers = parser.copy()\nget_parsers.replace_argument(\n    \"explicit\",\n    type=str,\n    required=False,\n    location=\"headers\",\n    help=\"Explicit Filter. When Set to True the default filter is turned off.\",\n    choices=[\"true\", \"false\"],\n)\nget_parsers.replace_argument(",
        "detail": "resources.insult",
        "documentation": {}
    },
    {
        "label": "ApiTest",
        "kind": 6,
        "importPath": "resources.status",
        "description": "resources.status",
        "peekOfCode": "class ApiTest(Resource):\n    \"\"\"Class for testing the API test Endpoints.\n    Inherits from the flask_restplus Resource class.\n    \"\"\"\n    #! GET ENDPOINT - Status\n    @api.doc()\n    @api.response(\n        200,\n        \"As of <DATETIME> UTC the API Is Up and actively insulting millions of Mamas\",\n    )",
        "detail": "resources.status",
        "documentation": {}
    },
    {
        "label": "ApiMetrics",
        "kind": 6,
        "importPath": "resources.status",
        "description": "resources.status",
        "peekOfCode": "class ApiMetrics(Resource):\n    @api.response(200, \"The Count of Insults in the Database\")\n    def get(self):\n        jokes, users = Administrator.count_user_and_jokes()\n        return jsonify(f\"There are {jokes} insults and {users} in the Database\")",
        "detail": "resources.status",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "resources.status",
        "description": "resources.status",
        "peekOfCode": "api = Namespace(\n    \"Testing & Status\",\n    description=\"These endpoints encompass all the endpoints needed to: \\n 1. Test the Current Status of the API. \\n 2. If admin, get operation metrics.\",\n)\n#!Namespace Related Models\n#! Top-Level Vaariables/Plugins\nnow = pendulum.now()\n#!Request Parameters Designations\n@api.route(\"status\")\nclass ApiTest(Resource):",
        "detail": "resources.status",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "resources.status",
        "description": "resources.status",
        "peekOfCode": "now = pendulum.now()\n#!Request Parameters Designations\n@api.route(\"status\")\nclass ApiTest(Resource):\n    \"\"\"Class for testing the API test Endpoints.\n    Inherits from the flask_restplus Resource class.\n    \"\"\"\n    #! GET ENDPOINT - Status\n    @api.doc()\n    @api.response(",
        "detail": "resources.status",
        "documentation": {}
    },
    {
        "label": "SignUpApiTest",
        "kind": 6,
        "importPath": "test.test_auth",
        "description": "test.test_auth",
        "peekOfCode": "class SignUpApiTest(TestCase):\n    def SetUp(self):\n        self.app = app.test_client()\n        self.db = app.get_db()\n    def test_successful_signup(self):\n        test_user = User(\n            email=\"Pytest_User@gmail.com\",\n            password=\"Butter_Baby\",\n            joined_on=\"1970-01-01\",\n        )",
        "detail": "test.test_auth",
        "documentation": {}
    },
    {
        "label": "Test_DatabasConnection",
        "kind": 6,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "class Test_DatabasConnection(TestCase):\n    def test_database_connection(self):\n        db_heartbeat = client.admin.command(\"ping\")\n        with check:\n            assert \"ok\" in db_heartbeat.keys()\n            assert isinstance(db_heartbeat, dict)\n    def test_database_health(self):\n        with check:\n            assert isinstance(database, Database)\n    def test_insult_connection(self):",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "connection_test",
        "kind": 2,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "def connection_test():\n    db_heartbeat = client.admin.command(\"ping\")\n    if isinstance(db_heartbeat, dict):\n        if \"ok\" in db_heartbeat.keys():\n            return \"Database is connected\"\n        else:\n            raise ConnectionFailure(\"Database is not connected\")\nclass Test_DatabasConnection(TestCase):\n    def test_database_connection(self):\n        db_heartbeat = client.admin.command(\"ping\")",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "CONNECTION_STRING",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "CONNECTION_STRING = getenv(\"MONGODB_URI\")\nclient = MongoClient(CONNECTION_STRING)\nmongoengine_connection = connect(alias=\"Mongo_Test_Connection\", host=CONNECTION_STRING)\ndatabase = client[\"InsultVault\"]\ninsult_collection = database[\"insults\"]\nuser_collections = database[\"users\"]\npipeline = {\"$count\": \"ObjectId\"}\ndef connection_test():\n    db_heartbeat = client.admin.command(\"ping\")\n    if isinstance(db_heartbeat, dict):",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "client = MongoClient(CONNECTION_STRING)\nmongoengine_connection = connect(alias=\"Mongo_Test_Connection\", host=CONNECTION_STRING)\ndatabase = client[\"InsultVault\"]\ninsult_collection = database[\"insults\"]\nuser_collections = database[\"users\"]\npipeline = {\"$count\": \"ObjectId\"}\ndef connection_test():\n    db_heartbeat = client.admin.command(\"ping\")\n    if isinstance(db_heartbeat, dict):\n        if \"ok\" in db_heartbeat.keys():",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "mongoengine_connection",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "mongoengine_connection = connect(alias=\"Mongo_Test_Connection\", host=CONNECTION_STRING)\ndatabase = client[\"InsultVault\"]\ninsult_collection = database[\"insults\"]\nuser_collections = database[\"users\"]\npipeline = {\"$count\": \"ObjectId\"}\ndef connection_test():\n    db_heartbeat = client.admin.command(\"ping\")\n    if isinstance(db_heartbeat, dict):\n        if \"ok\" in db_heartbeat.keys():\n            return \"Database is connected\"",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "database = client[\"InsultVault\"]\ninsult_collection = database[\"insults\"]\nuser_collections = database[\"users\"]\npipeline = {\"$count\": \"ObjectId\"}\ndef connection_test():\n    db_heartbeat = client.admin.command(\"ping\")\n    if isinstance(db_heartbeat, dict):\n        if \"ok\" in db_heartbeat.keys():\n            return \"Database is connected\"\n        else:",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "insult_collection",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "insult_collection = database[\"insults\"]\nuser_collections = database[\"users\"]\npipeline = {\"$count\": \"ObjectId\"}\ndef connection_test():\n    db_heartbeat = client.admin.command(\"ping\")\n    if isinstance(db_heartbeat, dict):\n        if \"ok\" in db_heartbeat.keys():\n            return \"Database is connected\"\n        else:\n            raise ConnectionFailure(\"Database is not connected\")",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "user_collections",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "user_collections = database[\"users\"]\npipeline = {\"$count\": \"ObjectId\"}\ndef connection_test():\n    db_heartbeat = client.admin.command(\"ping\")\n    if isinstance(db_heartbeat, dict):\n        if \"ok\" in db_heartbeat.keys():\n            return \"Database is connected\"\n        else:\n            raise ConnectionFailure(\"Database is not connected\")\nclass Test_DatabasConnection(TestCase):",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "pipeline",
        "kind": 5,
        "importPath": "test.test_db",
        "description": "test.test_db",
        "peekOfCode": "pipeline = {\"$count\": \"ObjectId\"}\ndef connection_test():\n    db_heartbeat = client.admin.command(\"ping\")\n    if isinstance(db_heartbeat, dict):\n        if \"ok\" in db_heartbeat.keys():\n            return \"Database is connected\"\n        else:\n            raise ConnectionFailure(\"Database is not connected\")\nclass Test_DatabasConnection(TestCase):\n    def test_database_connection(self):",
        "detail": "test.test_db",
        "documentation": {}
    },
    {
        "label": "InsultApiTest",
        "kind": 6,
        "importPath": "test.test_insults",
        "description": "test.test_insults",
        "peekOfCode": "class InsultApiTest(TestCase):\n    def test_get_random_joke(self):\n        with check:\n            joke = Jokester.get_random_joke()\n    def test_get_censored_joke(self):\n        pass\n    def get_categorized_joke(self):\n        pass",
        "detail": "test.test_insults",
        "documentation": {}
    },
    {
        "label": "TestGatekeeper",
        "kind": 6,
        "importPath": "test.test_utils",
        "description": "test.test_utils",
        "peekOfCode": "class TestGatekeeper(TestCase):\n    def test_check_if_token_is_revoked(self):\n        # Gatekeeper.check_if_token_is_revoked()\n        pass\nclass TestErrors(TestCase):\n    pass",
        "detail": "test.test_utils",
        "documentation": {}
    },
    {
        "label": "TestErrors",
        "kind": 6,
        "importPath": "test.test_utils",
        "description": "test.test_utils",
        "peekOfCode": "class TestErrors(TestCase):\n    pass",
        "detail": "test.test_utils",
        "documentation": {}
    },
    {
        "label": "Application",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.application.application",
        "description": "utils.debugger.tracepointdebug.application.application",
        "peekOfCode": "class Application(object):\n    application_info_provider = ConfigAwareApplicationInfoProvider()\n    @staticmethod\n    def get_application_info():\n        return Application.application_info_provider.get_application_info()\n    @staticmethod\n    def get_application_info_provider():\n        return Application.application_info_provider\n    @staticmethod\n    def set_application_info_provider(application_info_provider):",
        "detail": "utils.debugger.tracepointdebug.application.application",
        "documentation": {}
    },
    {
        "label": "ApplicationInfoProvider",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.application.application_info_provider",
        "description": "utils.debugger.tracepointdebug.application.application_info_provider",
        "peekOfCode": "class ApplicationInfoProvider(ABC):\n    APPLICATION_RUNTIME = \"python\"\n    APPLICATION_RUNTIME_VERSION = str(sys.version_info[0])\n    @abc.abstractmethod\n    def get_application_info(self):\n        pass\n    @staticmethod\n    def parse_application_tags():\n        application_tags = {}\n        prefix_length = len(config_names.SIDEKICK_APPLICATION_TAG_PREFIX)",
        "detail": "utils.debugger.tracepointdebug.application.application_info_provider",
        "documentation": {}
    },
    {
        "label": "ABC",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.application.application_info_provider",
        "description": "utils.debugger.tracepointdebug.application.application_info_provider",
        "peekOfCode": "ABC = abc.ABCMeta(\"ABC\", (object,), {})\nclass ApplicationInfoProvider(ABC):\n    APPLICATION_RUNTIME = \"python\"\n    APPLICATION_RUNTIME_VERSION = str(sys.version_info[0])\n    @abc.abstractmethod\n    def get_application_info(self):\n        pass\n    @staticmethod\n    def parse_application_tags():\n        application_tags = {}",
        "detail": "utils.debugger.tracepointdebug.application.application_info_provider",
        "documentation": {}
    },
    {
        "label": "ConfigAwareApplicationInfoProvider",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.application.config_aware_application_info_provider",
        "description": "utils.debugger.tracepointdebug.application.config_aware_application_info_provider",
        "peekOfCode": "class ConfigAwareApplicationInfoProvider(ApplicationInfoProvider):\n    def __init__(self):\n        self.application_info = (\n            ConfigAwareApplicationInfoProvider.get_application_info_from_config()\n        )\n        if self.application_info.get(\"applicationId\") is None:\n            self.application_info[\n                \"applicationId\"\n            ] = ConfigAwareApplicationInfoProvider.get_default_application_id(\n                self.application_info[\"applicationName\"]",
        "detail": "utils.debugger.tracepointdebug.application.config_aware_application_info_provider",
        "documentation": {}
    },
    {
        "label": "get_from_environment_variables",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.application.utils",
        "description": "utils.debugger.tracepointdebug.application.utils",
        "peekOfCode": "def get_from_environment_variables(config_name, default, type):\n    env_variables = os.environ\n    for var_name in env_variables:\n        if var_name.upper() == config_name:\n            return type(env_variables.get(var_name).strip())\n    return default",
        "detail": "utils.debugger.tracepointdebug.application.utils",
        "documentation": {}
    },
    {
        "label": "ApplicationFilter",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.application.application_filter",
        "description": "utils.debugger.tracepointdebug.broker.application.application_filter",
        "peekOfCode": "class ApplicationFilter:\n    @property\n    def name(self):\n        return self._name\n    @name.setter\n    def name(self, name):\n        self._name = name\n    @property\n    def stage(self):\n        return self._stage",
        "detail": "utils.debugger.tracepointdebug.broker.application.application_filter",
        "documentation": {}
    },
    {
        "label": "ApplicationStatus",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.application.application_status",
        "description": "utils.debugger.tracepointdebug.broker.application.application_status",
        "peekOfCode": "class ApplicationStatus(object):\n    def __init__(\n        self,\n        instance_id=None,\n        name=None,\n        stage=None,\n        version=None,\n        ip=None,\n        hostname=None,\n        trace_points=None,",
        "detail": "utils.debugger.tracepointdebug.broker.application.application_status",
        "documentation": {}
    },
    {
        "label": "ApplicationStatusProvider",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.application.application_status_provider",
        "description": "utils.debugger.tracepointdebug.broker.application.application_status_provider",
        "peekOfCode": "class ApplicationStatusProvider(ABC):\n    @abc.abstractmethod\n    def provide(self, application_status, client):\n        pass",
        "detail": "utils.debugger.tracepointdebug.broker.application.application_status_provider",
        "documentation": {}
    },
    {
        "label": "ABC",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.application.application_status_provider",
        "description": "utils.debugger.tracepointdebug.broker.application.application_status_provider",
        "peekOfCode": "ABC = abc.ABCMeta(\"ABC\", (object,), {})\nclass ApplicationStatusProvider(ABC):\n    @abc.abstractmethod\n    def provide(self, application_status, client):\n        pass",
        "detail": "utils.debugger.tracepointdebug.broker.application.application_status_provider",
        "documentation": {}
    },
    {
        "label": "ApplicationStatusEvent",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.event.application_status_event",
        "description": "utils.debugger.tracepointdebug.broker.event.application_status_event",
        "peekOfCode": "class ApplicationStatusEvent(BaseEvent):\n    EVENT_NAME = \"ApplicationStatusEvent\"\n    def __init__(self, client=None, application=None):\n        super(ApplicationStatusEvent, self).__init__(client=client)\n        self._application = application\n    @property\n    def application(self):\n        return self._application\n    @application.setter\n    def application(self, value):",
        "detail": "utils.debugger.tracepointdebug.broker.event.application_status_event",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.event.base_event",
        "description": "utils.debugger.tracepointdebug.broker.event.base_event",
        "peekOfCode": "class BaseEvent(Event):\n    def __init__(\n        self,\n        send_ack=False,\n        client=None,\n        time=None,\n        hostname=None,\n        application_name=None,\n        application_instance_id=None,\n    ):",
        "detail": "utils.debugger.tracepointdebug.broker.event.base_event",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.event.event",
        "description": "utils.debugger.tracepointdebug.broker.event.event",
        "peekOfCode": "class Event(ABC):\n    def get_type(self):\n        return \"Event\"\n    @property\n    @abc.abstractmethod\n    def name(self):\n        pass\n    @property\n    @abc.abstractmethod\n    def id(self):",
        "detail": "utils.debugger.tracepointdebug.broker.event.event",
        "documentation": {}
    },
    {
        "label": "ABC",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.event.event",
        "description": "utils.debugger.tracepointdebug.broker.event.event",
        "peekOfCode": "ABC = abc.ABCMeta(\"ABC\", (object,), {})\nclass Event(ABC):\n    def get_type(self):\n        return \"Event\"\n    @property\n    @abc.abstractmethod\n    def name(self):\n        pass\n    @property\n    @abc.abstractmethod",
        "detail": "utils.debugger.tracepointdebug.broker.event.event",
        "documentation": {}
    },
    {
        "label": "RequestHandler",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.handler.request.request_handler",
        "description": "utils.debugger.tracepointdebug.broker.handler.request.request_handler",
        "peekOfCode": "class RequestHandler(ABC):\n    @staticmethod\n    @abc.abstractmethod\n    def get_request_name():\n        pass\n    @staticmethod\n    @abc.abstractmethod\n    def get_request_cls():\n        pass\n    @staticmethod",
        "detail": "utils.debugger.tracepointdebug.broker.handler.request.request_handler",
        "documentation": {}
    },
    {
        "label": "ABC",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.handler.request.request_handler",
        "description": "utils.debugger.tracepointdebug.broker.handler.request.request_handler",
        "peekOfCode": "ABC = abc.ABCMeta(\"ABC\", (object,), {})\nclass RequestHandler(ABC):\n    @staticmethod\n    @abc.abstractmethod\n    def get_request_name():\n        pass\n    @staticmethod\n    @abc.abstractmethod\n    def get_request_cls():\n        pass",
        "detail": "utils.debugger.tracepointdebug.broker.handler.request.request_handler",
        "documentation": {}
    },
    {
        "label": "ResponseHandler",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.handler.response.response_handler",
        "description": "utils.debugger.tracepointdebug.broker.handler.response.response_handler",
        "peekOfCode": "class ResponseHandler(ABC):\n    @staticmethod\n    @abc.abstractmethod\n    def get_response_name():\n        pass\n    @staticmethod\n    @abc.abstractmethod\n    def get_response_cls():\n        pass\n    @staticmethod",
        "detail": "utils.debugger.tracepointdebug.broker.handler.response.response_handler",
        "documentation": {}
    },
    {
        "label": "ABC",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.handler.response.response_handler",
        "description": "utils.debugger.tracepointdebug.broker.handler.response.response_handler",
        "peekOfCode": "ABC = abc.ABCMeta(\"ABC\", (object,), {})\nclass ResponseHandler(ABC):\n    @staticmethod\n    @abc.abstractmethod\n    def get_response_name():\n        pass\n    @staticmethod\n    @abc.abstractmethod\n    def get_response_cls():\n        pass",
        "detail": "utils.debugger.tracepointdebug.broker.handler.response.response_handler",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.request.base_request",
        "description": "utils.debugger.tracepointdebug.broker.request.base_request",
        "peekOfCode": "class BaseRequest(Request):\n    def __init__(self, id, client=None):\n        self.id = id\n        self.client = client\n    def get_id(self):\n        return self.id\n    def get_name(self):\n        return self.__class__.__name__\n    def get_client(self):\n        return self.client",
        "detail": "utils.debugger.tracepointdebug.broker.request.base_request",
        "documentation": {}
    },
    {
        "label": "FilterLogPointsRequest",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.request.filter_logpoints_request",
        "description": "utils.debugger.tracepointdebug.broker.request.filter_logpoints_request",
        "peekOfCode": "class FilterLogPointsRequest(BaseRequest):\n    def __init__(self, name, version, stage, customTags):\n        super(FilterLogPointsRequest, self).__init__(str(uuid4()))\n        self._application_filter = ApplicationFilter()\n        self._application_filter.name = name\n        self._application_filter.version = version\n        self._application_filter.stage = stage\n        self._application_filter.custom_tags = customTags\n    def get_id(self):\n        return self.id",
        "detail": "utils.debugger.tracepointdebug.broker.request.filter_logpoints_request",
        "documentation": {}
    },
    {
        "label": "FilterTracePointsRequest",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.request.filter_tracepoints_request",
        "description": "utils.debugger.tracepointdebug.broker.request.filter_tracepoints_request",
        "peekOfCode": "class FilterTracePointsRequest(BaseRequest):\n    def __init__(self, name, version, stage, customTags):\n        super(FilterTracePointsRequest, self).__init__(str(uuid4()))\n        self._application_filter = ApplicationFilter()\n        self._application_filter.name = name\n        self._application_filter.version = version\n        self._application_filter.stage = stage\n        self._application_filter.custom_tags = customTags\n    def get_id(self):\n        return self.id",
        "detail": "utils.debugger.tracepointdebug.broker.request.filter_tracepoints_request",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.request.request",
        "description": "utils.debugger.tracepointdebug.broker.request.request",
        "peekOfCode": "class Request(ABC):\n    @staticmethod\n    def get_type():\n        return \"Request\"\n    @abc.abstractmethod\n    def get_id(self):\n        pass\n    @abc.abstractmethod\n    def get_name(self):\n        pass",
        "detail": "utils.debugger.tracepointdebug.broker.request.request",
        "documentation": {}
    },
    {
        "label": "ABC",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.request.request",
        "description": "utils.debugger.tracepointdebug.broker.request.request",
        "peekOfCode": "ABC = abc.ABCMeta(\"ABC\", (object,), {})\nclass Request(ABC):\n    @staticmethod\n    def get_type():\n        return \"Request\"\n    @abc.abstractmethod\n    def get_id(self):\n        pass\n    @abc.abstractmethod\n    def get_name(self):",
        "detail": "utils.debugger.tracepointdebug.broker.request.request",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.response.base_response",
        "description": "utils.debugger.tracepointdebug.broker.response.base_response",
        "peekOfCode": "class BaseResponse(Response):\n    def __init__(\n        self,\n        request_id=None,\n        client=None,\n        application_instance_id=None,\n        erroneous=False,\n        error_code=None,\n        error_type=None,\n        error_message=None,",
        "detail": "utils.debugger.tracepointdebug.broker.response.base_response",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.response.response",
        "description": "utils.debugger.tracepointdebug.broker.response.response",
        "peekOfCode": "class Response(ABC):\n    @abc.abstractmethod\n    def get_request_id(self):\n        pass\n    @abc.abstractmethod\n    def get_name(self):\n        pass\n    @abc.abstractmethod\n    def get_client(self):\n        pass",
        "detail": "utils.debugger.tracepointdebug.broker.response.response",
        "documentation": {}
    },
    {
        "label": "ABC",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.response.response",
        "description": "utils.debugger.tracepointdebug.broker.response.response",
        "peekOfCode": "ABC = abc.ABCMeta(\"ABC\", (object,), {})\nclass Response(ABC):\n    @abc.abstractmethod\n    def get_request_id(self):\n        pass\n    @abc.abstractmethod\n    def get_name(self):\n        pass\n    @abc.abstractmethod\n    def get_client(self):",
        "detail": "utils.debugger.tracepointdebug.broker.response.response",
        "documentation": {}
    },
    {
        "label": "BrokerConnection",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_client",
        "description": "utils.debugger.tracepointdebug.broker.broker_client",
        "peekOfCode": "class BrokerConnection:\n    def __init__(\n        self,\n        host,\n        port,\n        broker_credentials,\n        message_callback,\n        initial_request_to_broker,\n    ):\n        self.message_callback = message_callback",
        "detail": "utils.debugger.tracepointdebug.broker.broker_client",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_client",
        "description": "utils.debugger.tracepointdebug.broker.broker_client",
        "peekOfCode": "logger = logging.getLogger(__name__)\n_TIMEOUT = 3\nOPCODE_BINARY = 0x2\nBROKER_HANDSHAKE_HEADERS = {\n    \"API_KEY\": \"x-sidekick-api-key\",\n    \"APP_INSTANCE_ID\": \"x-sidekick-app-instance-id\",\n    \"APP_NAME\": \"x-sidekick-app-name\",\n    \"APP_VERSION\": \"x-sidekick-app-version\",\n    \"APP_STAGE\": \"x-sidekick-app-stage\",\n    \"APP_RUNTIME\": \"x-sidekick-app-runtime\",",
        "detail": "utils.debugger.tracepointdebug.broker.broker_client",
        "documentation": {}
    },
    {
        "label": "_TIMEOUT",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_client",
        "description": "utils.debugger.tracepointdebug.broker.broker_client",
        "peekOfCode": "_TIMEOUT = 3\nOPCODE_BINARY = 0x2\nBROKER_HANDSHAKE_HEADERS = {\n    \"API_KEY\": \"x-sidekick-api-key\",\n    \"APP_INSTANCE_ID\": \"x-sidekick-app-instance-id\",\n    \"APP_NAME\": \"x-sidekick-app-name\",\n    \"APP_VERSION\": \"x-sidekick-app-version\",\n    \"APP_STAGE\": \"x-sidekick-app-stage\",\n    \"APP_RUNTIME\": \"x-sidekick-app-runtime\",\n    \"APP_HOSTNAME\": \"x-sidekick-app-hostname\",",
        "detail": "utils.debugger.tracepointdebug.broker.broker_client",
        "documentation": {}
    },
    {
        "label": "OPCODE_BINARY",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_client",
        "description": "utils.debugger.tracepointdebug.broker.broker_client",
        "peekOfCode": "OPCODE_BINARY = 0x2\nBROKER_HANDSHAKE_HEADERS = {\n    \"API_KEY\": \"x-sidekick-api-key\",\n    \"APP_INSTANCE_ID\": \"x-sidekick-app-instance-id\",\n    \"APP_NAME\": \"x-sidekick-app-name\",\n    \"APP_VERSION\": \"x-sidekick-app-version\",\n    \"APP_STAGE\": \"x-sidekick-app-stage\",\n    \"APP_RUNTIME\": \"x-sidekick-app-runtime\",\n    \"APP_HOSTNAME\": \"x-sidekick-app-hostname\",\n}",
        "detail": "utils.debugger.tracepointdebug.broker.broker_client",
        "documentation": {}
    },
    {
        "label": "BROKER_HANDSHAKE_HEADERS",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_client",
        "description": "utils.debugger.tracepointdebug.broker.broker_client",
        "peekOfCode": "BROKER_HANDSHAKE_HEADERS = {\n    \"API_KEY\": \"x-sidekick-api-key\",\n    \"APP_INSTANCE_ID\": \"x-sidekick-app-instance-id\",\n    \"APP_NAME\": \"x-sidekick-app-name\",\n    \"APP_VERSION\": \"x-sidekick-app-version\",\n    \"APP_STAGE\": \"x-sidekick-app-stage\",\n    \"APP_RUNTIME\": \"x-sidekick-app-runtime\",\n    \"APP_HOSTNAME\": \"x-sidekick-app-hostname\",\n}\nAPP_TAG_HEADER_NAME_PREFIX = \"x-sidekick-app-tag-\"",
        "detail": "utils.debugger.tracepointdebug.broker.broker_client",
        "documentation": {}
    },
    {
        "label": "APP_TAG_HEADER_NAME_PREFIX",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_client",
        "description": "utils.debugger.tracepointdebug.broker.broker_client",
        "peekOfCode": "APP_TAG_HEADER_NAME_PREFIX = \"x-sidekick-app-tag-\"\nclass BrokerConnection:\n    def __init__(\n        self,\n        host,\n        port,\n        broker_credentials,\n        message_callback,\n        initial_request_to_broker,\n    ):",
        "detail": "utils.debugger.tracepointdebug.broker.broker_client",
        "documentation": {}
    },
    {
        "label": "BrokerCredentials",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_credentials",
        "description": "utils.debugger.tracepointdebug.broker.broker_credentials",
        "peekOfCode": "class BrokerCredentials(object):\n    def __init__(\n        self,\n        api_key=None,\n        app_instance_id=None,\n        app_name=None,\n        app_stage=None,\n        app_version=None,\n        hostname=None,\n        runtime=None,",
        "detail": "utils.debugger.tracepointdebug.broker.broker_credentials",
        "documentation": {}
    },
    {
        "label": "BrokerManager",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_manager",
        "description": "utils.debugger.tracepointdebug.broker.broker_manager",
        "peekOfCode": "class BrokerManager(object):\n    __instance = None\n    hostname = socket.gethostname()\n    def __init__(self):\n        self.broker_connection = None\n        self.initialized = False\n        self._event_executor = ThreadPoolExecutor()\n        self._request_executor = ThreadPoolExecutor()\n        import sys\n        if sys.version_info[0] >= 3:",
        "detail": "utils.debugger.tracepointdebug.broker.broker_manager",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_manager",
        "description": "utils.debugger.tracepointdebug.broker.broker_manager",
        "peekOfCode": "API_KEY = ConfigProvider.get(config_names.SIDEKICK_APIKEY)\nBROKER_HOST = utils.get_from_environment_variables(\n    \"SIDEKICK_BROKER_HOST\", \"wss://broker.service.runsidekick.com\", str\n)\nBROKER_PORT = utils.get_from_environment_variables(\"SIDEKICK_BROKER_PORT\", 443, int)\nAPPLICATION_STATUS_PUBLISH_PERIOD_IN_SECS = 60\nlogger = logging.getLogger(__name__)\nclass BrokerManager(object):\n    __instance = None\n    hostname = socket.gethostname()",
        "detail": "utils.debugger.tracepointdebug.broker.broker_manager",
        "documentation": {}
    },
    {
        "label": "BROKER_HOST",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_manager",
        "description": "utils.debugger.tracepointdebug.broker.broker_manager",
        "peekOfCode": "BROKER_HOST = utils.get_from_environment_variables(\n    \"SIDEKICK_BROKER_HOST\", \"wss://broker.service.runsidekick.com\", str\n)\nBROKER_PORT = utils.get_from_environment_variables(\"SIDEKICK_BROKER_PORT\", 443, int)\nAPPLICATION_STATUS_PUBLISH_PERIOD_IN_SECS = 60\nlogger = logging.getLogger(__name__)\nclass BrokerManager(object):\n    __instance = None\n    hostname = socket.gethostname()\n    def __init__(self):",
        "detail": "utils.debugger.tracepointdebug.broker.broker_manager",
        "documentation": {}
    },
    {
        "label": "BROKER_PORT",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_manager",
        "description": "utils.debugger.tracepointdebug.broker.broker_manager",
        "peekOfCode": "BROKER_PORT = utils.get_from_environment_variables(\"SIDEKICK_BROKER_PORT\", 443, int)\nAPPLICATION_STATUS_PUBLISH_PERIOD_IN_SECS = 60\nlogger = logging.getLogger(__name__)\nclass BrokerManager(object):\n    __instance = None\n    hostname = socket.gethostname()\n    def __init__(self):\n        self.broker_connection = None\n        self.initialized = False\n        self._event_executor = ThreadPoolExecutor()",
        "detail": "utils.debugger.tracepointdebug.broker.broker_manager",
        "documentation": {}
    },
    {
        "label": "APPLICATION_STATUS_PUBLISH_PERIOD_IN_SECS",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_manager",
        "description": "utils.debugger.tracepointdebug.broker.broker_manager",
        "peekOfCode": "APPLICATION_STATUS_PUBLISH_PERIOD_IN_SECS = 60\nlogger = logging.getLogger(__name__)\nclass BrokerManager(object):\n    __instance = None\n    hostname = socket.gethostname()\n    def __init__(self):\n        self.broker_connection = None\n        self.initialized = False\n        self._event_executor = ThreadPoolExecutor()\n        self._request_executor = ThreadPoolExecutor()",
        "detail": "utils.debugger.tracepointdebug.broker.broker_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_manager",
        "description": "utils.debugger.tracepointdebug.broker.broker_manager",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BrokerManager(object):\n    __instance = None\n    hostname = socket.gethostname()\n    def __init__(self):\n        self.broker_connection = None\n        self.initialized = False\n        self._event_executor = ThreadPoolExecutor()\n        self._request_executor = ThreadPoolExecutor()\n        import sys",
        "detail": "utils.debugger.tracepointdebug.broker.broker_manager",
        "documentation": {}
    },
    {
        "label": "BrokerMessageCallback",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_message_callback",
        "description": "utils.debugger.tracepointdebug.broker.broker_message_callback",
        "peekOfCode": "class BrokerMessageCallback(object):\n    def on_message(self, broker_client, message):\n        try:\n            message = json.loads(message)\n            message_type = message.get(\"type\", None)\n            if message_type == MESSAGE_REQUEST_TYPE:\n                handler = REQUEST_HANDLER_MAP.get(message.get(\"name\"))\n                if handler is not None:\n                    request = handler.get_request_cls()(message)\n                    response = handler.handle_request(request)",
        "detail": "utils.debugger.tracepointdebug.broker.broker_message_callback",
        "documentation": {}
    },
    {
        "label": "MESSAGE_REQUEST_TYPE",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_message_callback",
        "description": "utils.debugger.tracepointdebug.broker.broker_message_callback",
        "peekOfCode": "MESSAGE_REQUEST_TYPE = \"Request\"\nMESSAGE_RESPONSE_TYPE = \"Response\"\nREQUEST_HANDLER_MAP = {\n    \"DisableTracePointRequest\": DisableTracePointRequestHandler,\n    \"EnableTracePointRequest\": EnableTracePointRequestHandler,\n    \"PutTracePointRequest\": PutTracePointRequestHandler,\n    \"RemoveTracePointRequest\": RemoveTracePointRequestHandler,\n    \"UpdateTracePointRequest\": UpdateTracePointRequestHandler,\n    \"DisableLogPointRequest\": DisableLogPointRequestHandler,\n    \"EnableLogPointRequest\": EnableLogPointRequestHandler,",
        "detail": "utils.debugger.tracepointdebug.broker.broker_message_callback",
        "documentation": {}
    },
    {
        "label": "MESSAGE_RESPONSE_TYPE",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_message_callback",
        "description": "utils.debugger.tracepointdebug.broker.broker_message_callback",
        "peekOfCode": "MESSAGE_RESPONSE_TYPE = \"Response\"\nREQUEST_HANDLER_MAP = {\n    \"DisableTracePointRequest\": DisableTracePointRequestHandler,\n    \"EnableTracePointRequest\": EnableTracePointRequestHandler,\n    \"PutTracePointRequest\": PutTracePointRequestHandler,\n    \"RemoveTracePointRequest\": RemoveTracePointRequestHandler,\n    \"UpdateTracePointRequest\": UpdateTracePointRequestHandler,\n    \"DisableLogPointRequest\": DisableLogPointRequestHandler,\n    \"EnableLogPointRequest\": EnableLogPointRequestHandler,\n    \"PutLogPointRequest\": PutLogPointRequestHandler,",
        "detail": "utils.debugger.tracepointdebug.broker.broker_message_callback",
        "documentation": {}
    },
    {
        "label": "REQUEST_HANDLER_MAP",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_message_callback",
        "description": "utils.debugger.tracepointdebug.broker.broker_message_callback",
        "peekOfCode": "REQUEST_HANDLER_MAP = {\n    \"DisableTracePointRequest\": DisableTracePointRequestHandler,\n    \"EnableTracePointRequest\": EnableTracePointRequestHandler,\n    \"PutTracePointRequest\": PutTracePointRequestHandler,\n    \"RemoveTracePointRequest\": RemoveTracePointRequestHandler,\n    \"UpdateTracePointRequest\": UpdateTracePointRequestHandler,\n    \"DisableLogPointRequest\": DisableLogPointRequestHandler,\n    \"EnableLogPointRequest\": EnableLogPointRequestHandler,\n    \"PutLogPointRequest\": PutLogPointRequestHandler,\n    \"RemoveLogPointRequest\": RemoveLogPointRequestHandler,",
        "detail": "utils.debugger.tracepointdebug.broker.broker_message_callback",
        "documentation": {}
    },
    {
        "label": "RESPONSE_HANDLER_MAP",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.broker.broker_message_callback",
        "description": "utils.debugger.tracepointdebug.broker.broker_message_callback",
        "peekOfCode": "RESPONSE_HANDLER_MAP = {\n    \"FilterTracePointsResponse\": FilterTracePointsResponseHandler,\n    \"FilterLogPointsResponse\": FilterLogPointsResponseHandler,\n}\nclass BrokerMessageCallback(object):\n    def on_message(self, broker_client, message):\n        try:\n            message = json.loads(message)\n            message_type = message.get(\"type\", None)\n            if message_type == MESSAGE_REQUEST_TYPE:",
        "detail": "utils.debugger.tracepointdebug.broker.broker_message_callback",
        "documentation": {}
    },
    {
        "label": "WSApp",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.broker.ws_app",
        "description": "utils.debugger.tracepointdebug.broker.ws_app",
        "peekOfCode": "class WSApp(WebSocketApp):\n    def run_forever(\n        self,\n        sockopt=None,\n        sslopt=None,\n        ping_interval=0,\n        ping_timeout=None,\n        http_proxy_host=None,\n        http_proxy_port=None,\n        http_no_proxy=None,",
        "detail": "utils.debugger.tracepointdebug.broker.ws_app",
        "documentation": {}
    },
    {
        "label": "CONFIG_METADATA",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.config.config_metadata",
        "description": "utils.debugger.tracepointdebug.config.config_metadata",
        "peekOfCode": "CONFIG_METADATA = {\n    config_names.SIDEKICK_APIKEY: {\n        \"type\": \"string\",\n    },\n    config_names.SIDEKICK_DEBUG_ENABLE: {\n        \"type\": \"boolean\",\n        \"defaultValue\": False,\n    },\n    config_names.SIDEKICK_APPLICATION_ID: {\n        \"type\": \"string\",",
        "detail": "utils.debugger.tracepointdebug.config.config_metadata",
        "documentation": {}
    },
    {
        "label": "SIDEKICK_APIKEY",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.config.config_names",
        "description": "utils.debugger.tracepointdebug.config.config_names",
        "peekOfCode": "SIDEKICK_APIKEY = \"sidekick.apikey\"\nSIDEKICK_DEBUG_ENABLE = \"sidekick.debug.enable\"\n#############################################################################\nSIDEKICK_APPLICATION_ID = \"sidekick.application.id\"\nSIDEKICK_APPLICATION_INSTANCE_ID = \"sidekick.application.instanceid\"\nSIDEKICK_APPLICATION_NAME = \"sidekick.application.name\"\nSIDEKICK_APPLICATION_STAGE = \"sidekick.application.stage\"\nSIDEKICK_APPLICATION_DOMAIN_NAME = \"sidekick.application.domainname\"\nSIDEKICK_APPLICATION_CLASS_NAME = \"sidekick.application.classname\"\nSIDEKICK_APPLICATION_VERSION = \"sidekick.application.version\"",
        "detail": "utils.debugger.tracepointdebug.config.config_names",
        "documentation": {}
    },
    {
        "label": "SIDEKICK_DEBUG_ENABLE",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.config.config_names",
        "description": "utils.debugger.tracepointdebug.config.config_names",
        "peekOfCode": "SIDEKICK_DEBUG_ENABLE = \"sidekick.debug.enable\"\n#############################################################################\nSIDEKICK_APPLICATION_ID = \"sidekick.application.id\"\nSIDEKICK_APPLICATION_INSTANCE_ID = \"sidekick.application.instanceid\"\nSIDEKICK_APPLICATION_NAME = \"sidekick.application.name\"\nSIDEKICK_APPLICATION_STAGE = \"sidekick.application.stage\"\nSIDEKICK_APPLICATION_DOMAIN_NAME = \"sidekick.application.domainname\"\nSIDEKICK_APPLICATION_CLASS_NAME = \"sidekick.application.classname\"\nSIDEKICK_APPLICATION_VERSION = \"sidekick.application.version\"\nSIDEKICK_APPLICATION_TAG_PREFIX = \"sidekick.application.tag.prefix\"",
        "detail": "utils.debugger.tracepointdebug.config.config_names",
        "documentation": {}
    },
    {
        "label": "SIDEKICK_APPLICATION_ID",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.config.config_names",
        "description": "utils.debugger.tracepointdebug.config.config_names",
        "peekOfCode": "SIDEKICK_APPLICATION_ID = \"sidekick.application.id\"\nSIDEKICK_APPLICATION_INSTANCE_ID = \"sidekick.application.instanceid\"\nSIDEKICK_APPLICATION_NAME = \"sidekick.application.name\"\nSIDEKICK_APPLICATION_STAGE = \"sidekick.application.stage\"\nSIDEKICK_APPLICATION_DOMAIN_NAME = \"sidekick.application.domainname\"\nSIDEKICK_APPLICATION_CLASS_NAME = \"sidekick.application.classname\"\nSIDEKICK_APPLICATION_VERSION = \"sidekick.application.version\"\nSIDEKICK_APPLICATION_TAG_PREFIX = \"sidekick.application.tag.prefix\"\nSIDEKICK_APPLICATION_REGION = \"sidekick.application.region\"",
        "detail": "utils.debugger.tracepointdebug.config.config_names",
        "documentation": {}
    },
    {
        "label": "SIDEKICK_APPLICATION_INSTANCE_ID",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.config.config_names",
        "description": "utils.debugger.tracepointdebug.config.config_names",
        "peekOfCode": "SIDEKICK_APPLICATION_INSTANCE_ID = \"sidekick.application.instanceid\"\nSIDEKICK_APPLICATION_NAME = \"sidekick.application.name\"\nSIDEKICK_APPLICATION_STAGE = \"sidekick.application.stage\"\nSIDEKICK_APPLICATION_DOMAIN_NAME = \"sidekick.application.domainname\"\nSIDEKICK_APPLICATION_CLASS_NAME = \"sidekick.application.classname\"\nSIDEKICK_APPLICATION_VERSION = \"sidekick.application.version\"\nSIDEKICK_APPLICATION_TAG_PREFIX = \"sidekick.application.tag.prefix\"\nSIDEKICK_APPLICATION_REGION = \"sidekick.application.region\"",
        "detail": "utils.debugger.tracepointdebug.config.config_names",
        "documentation": {}
    },
    {
        "label": "SIDEKICK_APPLICATION_NAME",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.config.config_names",
        "description": "utils.debugger.tracepointdebug.config.config_names",
        "peekOfCode": "SIDEKICK_APPLICATION_NAME = \"sidekick.application.name\"\nSIDEKICK_APPLICATION_STAGE = \"sidekick.application.stage\"\nSIDEKICK_APPLICATION_DOMAIN_NAME = \"sidekick.application.domainname\"\nSIDEKICK_APPLICATION_CLASS_NAME = \"sidekick.application.classname\"\nSIDEKICK_APPLICATION_VERSION = \"sidekick.application.version\"\nSIDEKICK_APPLICATION_TAG_PREFIX = \"sidekick.application.tag.prefix\"\nSIDEKICK_APPLICATION_REGION = \"sidekick.application.region\"",
        "detail": "utils.debugger.tracepointdebug.config.config_names",
        "documentation": {}
    },
    {
        "label": "SIDEKICK_APPLICATION_STAGE",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.config.config_names",
        "description": "utils.debugger.tracepointdebug.config.config_names",
        "peekOfCode": "SIDEKICK_APPLICATION_STAGE = \"sidekick.application.stage\"\nSIDEKICK_APPLICATION_DOMAIN_NAME = \"sidekick.application.domainname\"\nSIDEKICK_APPLICATION_CLASS_NAME = \"sidekick.application.classname\"\nSIDEKICK_APPLICATION_VERSION = \"sidekick.application.version\"\nSIDEKICK_APPLICATION_TAG_PREFIX = \"sidekick.application.tag.prefix\"\nSIDEKICK_APPLICATION_REGION = \"sidekick.application.region\"",
        "detail": "utils.debugger.tracepointdebug.config.config_names",
        "documentation": {}
    },
    {
        "label": "SIDEKICK_APPLICATION_DOMAIN_NAME",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.config.config_names",
        "description": "utils.debugger.tracepointdebug.config.config_names",
        "peekOfCode": "SIDEKICK_APPLICATION_DOMAIN_NAME = \"sidekick.application.domainname\"\nSIDEKICK_APPLICATION_CLASS_NAME = \"sidekick.application.classname\"\nSIDEKICK_APPLICATION_VERSION = \"sidekick.application.version\"\nSIDEKICK_APPLICATION_TAG_PREFIX = \"sidekick.application.tag.prefix\"\nSIDEKICK_APPLICATION_REGION = \"sidekick.application.region\"",
        "detail": "utils.debugger.tracepointdebug.config.config_names",
        "documentation": {}
    },
    {
        "label": "SIDEKICK_APPLICATION_CLASS_NAME",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.config.config_names",
        "description": "utils.debugger.tracepointdebug.config.config_names",
        "peekOfCode": "SIDEKICK_APPLICATION_CLASS_NAME = \"sidekick.application.classname\"\nSIDEKICK_APPLICATION_VERSION = \"sidekick.application.version\"\nSIDEKICK_APPLICATION_TAG_PREFIX = \"sidekick.application.tag.prefix\"\nSIDEKICK_APPLICATION_REGION = \"sidekick.application.region\"",
        "detail": "utils.debugger.tracepointdebug.config.config_names",
        "documentation": {}
    },
    {
        "label": "SIDEKICK_APPLICATION_VERSION",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.config.config_names",
        "description": "utils.debugger.tracepointdebug.config.config_names",
        "peekOfCode": "SIDEKICK_APPLICATION_VERSION = \"sidekick.application.version\"\nSIDEKICK_APPLICATION_TAG_PREFIX = \"sidekick.application.tag.prefix\"\nSIDEKICK_APPLICATION_REGION = \"sidekick.application.region\"",
        "detail": "utils.debugger.tracepointdebug.config.config_names",
        "documentation": {}
    },
    {
        "label": "SIDEKICK_APPLICATION_TAG_PREFIX",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.config.config_names",
        "description": "utils.debugger.tracepointdebug.config.config_names",
        "peekOfCode": "SIDEKICK_APPLICATION_TAG_PREFIX = \"sidekick.application.tag.prefix\"\nSIDEKICK_APPLICATION_REGION = \"sidekick.application.region\"",
        "detail": "utils.debugger.tracepointdebug.config.config_names",
        "documentation": {}
    },
    {
        "label": "SIDEKICK_APPLICATION_REGION",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.config.config_names",
        "description": "utils.debugger.tracepointdebug.config.config_names",
        "peekOfCode": "SIDEKICK_APPLICATION_REGION = \"sidekick.application.region\"",
        "detail": "utils.debugger.tracepointdebug.config.config_names",
        "documentation": {}
    },
    {
        "label": "ConfigProvider",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.config.config_provider",
        "description": "utils.debugger.tracepointdebug.config.config_provider",
        "peekOfCode": "class ConfigProvider:\n    configs = {}\n    @staticmethod\n    def __init__(options=None):\n        ConfigProvider.clear()\n        if options is not None:\n            config_options = options.get(\"config\", {})\n            for opt in config_options:\n                if opt.lower() == config_names.SIDEKICK_APIKEY:\n                    ConfigProvider.configs[",
        "detail": "utils.debugger.tracepointdebug.config.config_provider",
        "documentation": {}
    },
    {
        "label": "BreakpointsManager",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.breakpoints_manager",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.breakpoints_manager",
        "peekOfCode": "class BreakpointsManager(object):\n    \"\"\"Manages active breakpoints.\n    The primary input to this class is the callback indicating that a list of\n    active breakpoints has changed. BreakpointsManager compares it with the\n    current list of breakpoints. It then creates PythonBreakpoint objects\n    corresponding to new breakpoints and removes breakpoints that are no\n    longer active.\n    This class is thread safe.\n    Args:\n      hub_client: queries active breakpoints from the backend and sends",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.breakpoints_manager",
        "documentation": {}
    },
    {
        "label": "LineNoFilter",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "class LineNoFilter(logging.Filter):\n    \"\"\"Enables overriding the path and line number in a logging record.\n    The \"extra\" parameter in logging cannot override existing fields in log\n    record, so we can't use it to directly set pathname and lineno. Instead,\n    we add this filter to the default logger, and it looks for \"cdbg_pathname\"\n    and \"cdbg_lineno\", moving them to the pathname and lineno fields accordingly.\n    \"\"\"\n    def filter(self, record):\n        # This method gets invoked for user-generated logging, so verify that this\n        # particular invocation came from our logging code.",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "_CaptureLimits",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "class _CaptureLimits(object):\n    \"\"\"Limits for variable capture.\n    Args:\n      max_value_len: Maximum number of character to allow for a single string\n        value.  Longer strings are truncated.\n      max_list_items: Maximum number of items in a list to capture.\n      max_depth: Maximum depth of dictionaries to capture.\n    \"\"\"\n    def __init__(self, max_value_len=256, max_list_items=25, max_depth=5):\n        self.max_value_len = max_value_len",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "CaptureCollector",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "class CaptureCollector(object):\n    \"\"\"Captures application state snapshot.\n    Captures call stack, local variables and referenced objects. Then formats the\n    result to be sent back to the user.\n    The performance of this class is important. Once the breakpoint hits, the\n    completion of the user request will be delayed until the collection is over.\n    It might make sense to implement this logic in C++.\n    Attributes:\n      breakpoint: breakpoint definition augmented with captured call stack,\n          local variables, arguments and referenced objects.",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "LogCollector",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "class LogCollector(object):\n    \"\"\"Captures minimal application snapshot and logs it to application log.\n    This is similar to CaptureCollector, but we don't need to capture local\n    variables, arguments and the objects tree. All we need to do is to format a\n    log message. We still need to evaluate watched expressions.\n    The actual log functions are defined globally outside of this module.\n    \"\"\"\n    def __init__(self, definition):\n        \"\"\"Class constructor.\n        Args:",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "NormalizePath",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "def NormalizePath(path):\n    \"\"\"Removes any Python system path prefix from the given path.\n    Python keeps almost all paths absolute. This is not what we actually\n    want to return. This loops through system paths (directories in which\n    Python will load modules). If \"path\" is relative to one of them, the\n    directory prefix is removed.\n    Args:\n      path: absolute path to normalize (relative paths will not be altered)\n    Returns:\n      Relative path if \"path\" is within one of the sys.path directories or",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "DetermineType",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "def DetermineType(value):\n    \"\"\"Determines the type of val, returning a \"full path\" string.\n    For example:\n      DetermineType(5) -> __builtin__.int\n      DetermineType(Foo()) -> com.google.bar.Foo\n    Args:\n      value: Any value, the value is irrelevant as only the type metadata\n      is checked\n    Returns:\n      Type path string.  None if type cannot be determined.",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "GetLoggingLocation",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "def GetLoggingLocation():\n    \"\"\"Search for and return the file and line number from the log collector.\n    Returns:\n      (pathname, lineno, func_name) The full path, line number, and function name\n      for the logpoint location.\n    \"\"\"\n    frame = inspect.currentframe()\n    this_file = frame.f_code.co_filename\n    frame = frame.f_back\n    while frame:",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "SetLogger",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "def SetLogger(logger):\n    \"\"\"Sets the logger object to use for all 'LOG' breakpoint actions.\"\"\"\n    global log_info_message\n    global log_warning_message\n    global log_error_message\n    log_info_message = logger.info\n    log_warning_message = logger.warning\n    log_error_message = logger.error\n    logger.addFilter(LineNoFilter())\nclass _CaptureLimits(object):",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "log_info_message",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "log_info_message = None\nlog_warning_message = None\nlog_error_message = None\n# Externally defined function to collect the request log id.\nrequest_log_id_collector = None\n# Externally defined function to collect the end user id.\nuser_id_collector = lambda: (None, None)\n# Externally defined function to collect the end user id.\nbreakpoint_labels_collector = lambda: {}\n_PRIMITIVE_TYPES = (",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "log_warning_message",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "log_warning_message = None\nlog_error_message = None\n# Externally defined function to collect the request log id.\nrequest_log_id_collector = None\n# Externally defined function to collect the end user id.\nuser_id_collector = lambda: (None, None)\n# Externally defined function to collect the end user id.\nbreakpoint_labels_collector = lambda: {}\n_PRIMITIVE_TYPES = (\n    (type(None), float, complex, bool, slice, bytearray, six.text_type, six.binary_type)",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "log_error_message",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "log_error_message = None\n# Externally defined function to collect the request log id.\nrequest_log_id_collector = None\n# Externally defined function to collect the end user id.\nuser_id_collector = lambda: (None, None)\n# Externally defined function to collect the end user id.\nbreakpoint_labels_collector = lambda: {}\n_PRIMITIVE_TYPES = (\n    (type(None), float, complex, bool, slice, bytearray, six.text_type, six.binary_type)\n    + six.integer_types",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "request_log_id_collector",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "request_log_id_collector = None\n# Externally defined function to collect the end user id.\nuser_id_collector = lambda: (None, None)\n# Externally defined function to collect the end user id.\nbreakpoint_labels_collector = lambda: {}\n_PRIMITIVE_TYPES = (\n    (type(None), float, complex, bool, slice, bytearray, six.text_type, six.binary_type)\n    + six.integer_types\n    + six.string_types\n)",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "user_id_collector",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "user_id_collector = lambda: (None, None)\n# Externally defined function to collect the end user id.\nbreakpoint_labels_collector = lambda: {}\n_PRIMITIVE_TYPES = (\n    (type(None), float, complex, bool, slice, bytearray, six.text_type, six.binary_type)\n    + six.integer_types\n    + six.string_types\n)\n_DATE_TYPES = (datetime.date, datetime.time, datetime.timedelta)\n_VECTOR_TYPES = (tuple, list, set)",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "breakpoint_labels_collector",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "breakpoint_labels_collector = lambda: {}\n_PRIMITIVE_TYPES = (\n    (type(None), float, complex, bool, slice, bytearray, six.text_type, six.binary_type)\n    + six.integer_types\n    + six.string_types\n)\n_DATE_TYPES = (datetime.date, datetime.time, datetime.timedelta)\n_VECTOR_TYPES = (tuple, list, set)\n# TODO: move to messages.py module.\nEMPTY_DICTIONARY = \"Empty dictionary\"",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "_PRIMITIVE_TYPES",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "_PRIMITIVE_TYPES = (\n    (type(None), float, complex, bool, slice, bytearray, six.text_type, six.binary_type)\n    + six.integer_types\n    + six.string_types\n)\n_DATE_TYPES = (datetime.date, datetime.time, datetime.timedelta)\n_VECTOR_TYPES = (tuple, list, set)\n# TODO: move to messages.py module.\nEMPTY_DICTIONARY = \"Empty dictionary\"\nEMPTY_COLLECTION = \"Empty collection\"",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "_DATE_TYPES",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "_DATE_TYPES = (datetime.date, datetime.time, datetime.timedelta)\n_VECTOR_TYPES = (tuple, list, set)\n# TODO: move to messages.py module.\nEMPTY_DICTIONARY = \"Empty dictionary\"\nEMPTY_COLLECTION = \"Empty collection\"\nOBJECT_HAS_NO_FIELDS = \"Object has no fields\"\nLOG_ACTION_NOT_SUPPORTED = \"Log action on a breakpoint not supported\"\nINVALID_EXPRESSION_INDEX = \"<N/A>\"\nDYNAMIC_LOG_OUT_OF_QUOTA = (\n    \"LOGPOINT: Logpoint is paused due to high log rate until log \" \"quota is restored\"",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "_VECTOR_TYPES",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "_VECTOR_TYPES = (tuple, list, set)\n# TODO: move to messages.py module.\nEMPTY_DICTIONARY = \"Empty dictionary\"\nEMPTY_COLLECTION = \"Empty collection\"\nOBJECT_HAS_NO_FIELDS = \"Object has no fields\"\nLOG_ACTION_NOT_SUPPORTED = \"Log action on a breakpoint not supported\"\nINVALID_EXPRESSION_INDEX = \"<N/A>\"\nDYNAMIC_LOG_OUT_OF_QUOTA = (\n    \"LOGPOINT: Logpoint is paused due to high log rate until log \" \"quota is restored\"\n)",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "EMPTY_DICTIONARY",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "EMPTY_DICTIONARY = \"Empty dictionary\"\nEMPTY_COLLECTION = \"Empty collection\"\nOBJECT_HAS_NO_FIELDS = \"Object has no fields\"\nLOG_ACTION_NOT_SUPPORTED = \"Log action on a breakpoint not supported\"\nINVALID_EXPRESSION_INDEX = \"<N/A>\"\nDYNAMIC_LOG_OUT_OF_QUOTA = (\n    \"LOGPOINT: Logpoint is paused due to high log rate until log \" \"quota is restored\"\n)\ndef _ListTypeFormatString(value):\n    \"\"\"Returns the appropriate format string for formatting a list object.\"\"\"",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "EMPTY_COLLECTION",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "EMPTY_COLLECTION = \"Empty collection\"\nOBJECT_HAS_NO_FIELDS = \"Object has no fields\"\nLOG_ACTION_NOT_SUPPORTED = \"Log action on a breakpoint not supported\"\nINVALID_EXPRESSION_INDEX = \"<N/A>\"\nDYNAMIC_LOG_OUT_OF_QUOTA = (\n    \"LOGPOINT: Logpoint is paused due to high log rate until log \" \"quota is restored\"\n)\ndef _ListTypeFormatString(value):\n    \"\"\"Returns the appropriate format string for formatting a list object.\"\"\"\n    if isinstance(value, tuple):",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "OBJECT_HAS_NO_FIELDS",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "OBJECT_HAS_NO_FIELDS = \"Object has no fields\"\nLOG_ACTION_NOT_SUPPORTED = \"Log action on a breakpoint not supported\"\nINVALID_EXPRESSION_INDEX = \"<N/A>\"\nDYNAMIC_LOG_OUT_OF_QUOTA = (\n    \"LOGPOINT: Logpoint is paused due to high log rate until log \" \"quota is restored\"\n)\ndef _ListTypeFormatString(value):\n    \"\"\"Returns the appropriate format string for formatting a list object.\"\"\"\n    if isinstance(value, tuple):\n        return \"({0})\"",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "LOG_ACTION_NOT_SUPPORTED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "LOG_ACTION_NOT_SUPPORTED = \"Log action on a breakpoint not supported\"\nINVALID_EXPRESSION_INDEX = \"<N/A>\"\nDYNAMIC_LOG_OUT_OF_QUOTA = (\n    \"LOGPOINT: Logpoint is paused due to high log rate until log \" \"quota is restored\"\n)\ndef _ListTypeFormatString(value):\n    \"\"\"Returns the appropriate format string for formatting a list object.\"\"\"\n    if isinstance(value, tuple):\n        return \"({0})\"\n    if isinstance(value, set):",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "INVALID_EXPRESSION_INDEX",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "INVALID_EXPRESSION_INDEX = \"<N/A>\"\nDYNAMIC_LOG_OUT_OF_QUOTA = (\n    \"LOGPOINT: Logpoint is paused due to high log rate until log \" \"quota is restored\"\n)\ndef _ListTypeFormatString(value):\n    \"\"\"Returns the appropriate format string for formatting a list object.\"\"\"\n    if isinstance(value, tuple):\n        return \"({0})\"\n    if isinstance(value, set):\n        return \"{{{0}}}\"",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "DYNAMIC_LOG_OUT_OF_QUOTA",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "peekOfCode": "DYNAMIC_LOG_OUT_OF_QUOTA = (\n    \"LOGPOINT: Logpoint is paused due to high log rate until log \" \"quota is restored\"\n)\ndef _ListTypeFormatString(value):\n    \"\"\"Returns the appropriate format string for formatting a list object.\"\"\"\n    if isinstance(value, tuple):\n        return \"({0})\"\n    if isinstance(value, set):\n        return \"{{{0}}}\"\n    return \"[{0}]\"",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.capture_collector",
        "documentation": {}
    },
    {
        "label": "AddImportCallbackBySuffix",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "peekOfCode": "def AddImportCallbackBySuffix(path, callback):\n    \"\"\"Register import hook.\n    This function overrides the default import process. Then whenever a module\n    whose suffix matches path is imported, the callback will be invoked.\n    A module may be imported multiple times. Import event only means that the\n    Python code contained an \"import\" statement. The actual loading and\n    initialization of a new module normally happens only once, at which time\n    the callback will be invoked. This function does not validates the existence\n    of such a module and it's the responsibility of the caller.\n    TODO: handle module reload.",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "documentation": {}
    },
    {
        "label": "_import_callbacks",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "peekOfCode": "_import_callbacks = {}\n_import_callbacks_lock = threading.Lock()\n# Per thread data holding information about the import call nest level.\n_import_local = threading.local()\n# Original __import__ function if import hook is installed or None otherwise.\n_real_import = None\n# Original importlib.import_module function if import hook is installed or None\n# otherwise.\n_real_import_module = None\ndef AddImportCallbackBySuffix(path, callback):",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "documentation": {}
    },
    {
        "label": "_import_callbacks_lock",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "peekOfCode": "_import_callbacks_lock = threading.Lock()\n# Per thread data holding information about the import call nest level.\n_import_local = threading.local()\n# Original __import__ function if import hook is installed or None otherwise.\n_real_import = None\n# Original importlib.import_module function if import hook is installed or None\n# otherwise.\n_real_import_module = None\ndef AddImportCallbackBySuffix(path, callback):\n    \"\"\"Register import hook.",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "documentation": {}
    },
    {
        "label": "_import_local",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "peekOfCode": "_import_local = threading.local()\n# Original __import__ function if import hook is installed or None otherwise.\n_real_import = None\n# Original importlib.import_module function if import hook is installed or None\n# otherwise.\n_real_import_module = None\ndef AddImportCallbackBySuffix(path, callback):\n    \"\"\"Register import hook.\n    This function overrides the default import process. Then whenever a module\n    whose suffix matches path is imported, the callback will be invoked.",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "documentation": {}
    },
    {
        "label": "_real_import",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "peekOfCode": "_real_import = None\n# Original importlib.import_module function if import hook is installed or None\n# otherwise.\n_real_import_module = None\ndef AddImportCallbackBySuffix(path, callback):\n    \"\"\"Register import hook.\n    This function overrides the default import process. Then whenever a module\n    whose suffix matches path is imported, the callback will be invoked.\n    A module may be imported multiple times. Import event only means that the\n    Python code contained an \"import\" statement. The actual loading and",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "documentation": {}
    },
    {
        "label": "_real_import_module",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "peekOfCode": "_real_import_module = None\ndef AddImportCallbackBySuffix(path, callback):\n    \"\"\"Register import hook.\n    This function overrides the default import process. Then whenever a module\n    whose suffix matches path is imported, the callback will be invoked.\n    A module may be imported multiple times. Import event only means that the\n    Python code contained an \"import\" statement. The actual loading and\n    initialization of a new module normally happens only once, at which time\n    the callback will be invoked. This function does not validates the existence\n    of such a module and it's the responsibility of the caller.",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.imphook2",
        "documentation": {}
    },
    {
        "label": "_VisitRecorder",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "peekOfCode": "class _VisitRecorder(object):\n    \"\"\"Helper class to track of already visited objects and implement quota.\n    This class keeps a map from integer to object. The key is a unique object\n    ID (raw object pointer). The value is the object itself. We need to keep the\n    object in the map, so that it doesn't get released during iteration (since\n    object ID is only unique as long as the object is alive).\n    \"\"\"\n    def __init__(self):\n        self._visit_recorder_objects = {}\n    def Record(self, obj):",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "documentation": {}
    },
    {
        "label": "GetCodeObjectAtLine",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "peekOfCode": "def GetCodeObjectAtLine(module, line):\n    \"\"\"Searches for a code object at the specified line in the specified module.\n    Args:\n      module: module to explore.\n      line: 1-based line number of the statement.\n    Returns:\n      (True, Code object) on success or (False, (prev_line, next_line)) on\n      failure, where prev_line and next_line are the closest lines with code above\n      and below the specified line, or None if they do not exist.\n    \"\"\"",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "documentation": {}
    },
    {
        "label": "_MAX_REFERENTS_BFS_DEPTH",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "peekOfCode": "_MAX_REFERENTS_BFS_DEPTH = 15\n# Absolute limit on the amount of objects to scan when looking for all the code\n# objects implemented in a module.\n_MAX_VISIT_OBJECTS = 100000\n# Maximum referents an object can have before it is skipped in the BFS\n# traversal. This is to prevent things like long objects or dictionaries that\n# probably do not contain code objects from using the _MAX_VISIT_OBJECTS quota.\n_MAX_OBJECT_REFERENTS = 1000\n# Object types to ignore when looking for the code objects.\n_BFS_IGNORE_TYPES = (",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "documentation": {}
    },
    {
        "label": "_MAX_VISIT_OBJECTS",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "peekOfCode": "_MAX_VISIT_OBJECTS = 100000\n# Maximum referents an object can have before it is skipped in the BFS\n# traversal. This is to prevent things like long objects or dictionaries that\n# probably do not contain code objects from using the _MAX_VISIT_OBJECTS quota.\n_MAX_OBJECT_REFERENTS = 1000\n# Object types to ignore when looking for the code objects.\n_BFS_IGNORE_TYPES = (\n    types.ModuleType,\n    type(None),\n    bool,",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "documentation": {}
    },
    {
        "label": "_MAX_OBJECT_REFERENTS",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "peekOfCode": "_MAX_OBJECT_REFERENTS = 1000\n# Object types to ignore when looking for the code objects.\n_BFS_IGNORE_TYPES = (\n    types.ModuleType,\n    type(None),\n    bool,\n    float,\n    six.binary_type,\n    six.text_type,\n    types.BuiltinFunctionType,",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "documentation": {}
    },
    {
        "label": "_BFS_IGNORE_TYPES",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "peekOfCode": "_BFS_IGNORE_TYPES = (\n    types.ModuleType,\n    type(None),\n    bool,\n    float,\n    six.binary_type,\n    six.text_type,\n    types.BuiltinFunctionType,\n    types.BuiltinMethodType,\n    list,",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_explorer",
        "documentation": {}
    },
    {
        "label": "Search",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_search2",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_search2",
        "peekOfCode": "def Search(path):\n    \"\"\"Search sys.path to find a source file that matches path.\n    The provided input path may have an unknown number of irrelevant outer\n    directories (e.g., /garbage1/garbage2/real1/real2/x.py').  This function\n    does multiple search iterations until an actual Python module file that\n    matches the input path is found. At each iteration, it strips one leading\n    directory from the path and searches the directories at sys.path\n    for a match.\n    Examples:\n      sys.path: ['/x1/x2', '/y1/y2']",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_search2",
        "documentation": {}
    },
    {
        "label": "IsPathSuffix",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_utils2",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_utils2",
        "peekOfCode": "def IsPathSuffix(mod_path, path):\n    \"\"\"Checks whether path is a full path suffix of mod_path.\n    Args:\n      mod_path: Must be an absolute path to a source file. Must not have\n                file extension.\n      path: A relative path. Must not have file extension.\n    Returns:\n      True if path is a full path suffix of mod_path. False otherwise.\n    \"\"\"\n    return mod_path.endswith(path) and (",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_utils2",
        "documentation": {}
    },
    {
        "label": "GetLoadedModuleBySuffix",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_utils2",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_utils2",
        "peekOfCode": "def GetLoadedModuleBySuffix(path):\n    \"\"\"Searches sys.modules to find a module with the given file path.\n    Args:\n      path: Path to the source file. It can be relative or absolute, as suffix\n            match can handle both. If absolute, it must have already been\n            sanitized.\n    Algorithm:\n      The given path must be a full suffix of a loaded module to be a valid match.\n      File extensions are ignored when performing suffix match.\n    Example:",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.module_utils2",
        "documentation": {}
    },
    {
        "label": "PythonBreakpoint",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "peekOfCode": "class PythonBreakpoint(object):\n    \"\"\"Handles a single Python breakpoint.\n    Taking care of a breakpoint starts with setting one and evaluating\n    condition. When a breakpoint we need to evaluate all the watched expressions\n    and take an action. The action can be either to collect all the data or\n    to log a statement.\n    \"\"\"\n    def __init__(\n        self, definition, hub_client, breakpoints_manager, data_visibility_policy\n    ):",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "documentation": {}
    },
    {
        "label": "ERROR_LOCATION_FILE_EXTENSION_0",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "peekOfCode": "ERROR_LOCATION_FILE_EXTENSION_0 = \"Only files with .py extension are supported\"\nERROR_LOCATION_MODULE_NOT_FOUND_0 = (\n    \"Python module not found. Please ensure this file is present in the \"\n    \"version of the service you are trying to debug.\"\n)\nERROR_LOCATION_MULTIPLE_MODULES_1 = (\n    \"Multiple modules matching $0. Please specify the module path.\"\n)\nERROR_LOCATION_MULTIPLE_MODULES_3 = \"Multiple modules matching $0 ($1, $2)\"\nERROR_LOCATION_MULTIPLE_MODULES_4 = \"Multiple modules matching $0 ($1, $2, and $3 more)\"",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "documentation": {}
    },
    {
        "label": "ERROR_LOCATION_MODULE_NOT_FOUND_0",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "peekOfCode": "ERROR_LOCATION_MODULE_NOT_FOUND_0 = (\n    \"Python module not found. Please ensure this file is present in the \"\n    \"version of the service you are trying to debug.\"\n)\nERROR_LOCATION_MULTIPLE_MODULES_1 = (\n    \"Multiple modules matching $0. Please specify the module path.\"\n)\nERROR_LOCATION_MULTIPLE_MODULES_3 = \"Multiple modules matching $0 ($1, $2)\"\nERROR_LOCATION_MULTIPLE_MODULES_4 = \"Multiple modules matching $0 ($1, $2, and $3 more)\"\nERROR_LOCATION_NO_CODE_FOUND_AT_LINE_2 = \"No code found at line $0 in $1\"",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "documentation": {}
    },
    {
        "label": "ERROR_LOCATION_MULTIPLE_MODULES_1",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "peekOfCode": "ERROR_LOCATION_MULTIPLE_MODULES_1 = (\n    \"Multiple modules matching $0. Please specify the module path.\"\n)\nERROR_LOCATION_MULTIPLE_MODULES_3 = \"Multiple modules matching $0 ($1, $2)\"\nERROR_LOCATION_MULTIPLE_MODULES_4 = \"Multiple modules matching $0 ($1, $2, and $3 more)\"\nERROR_LOCATION_NO_CODE_FOUND_AT_LINE_2 = \"No code found at line $0 in $1\"\nERROR_LOCATION_NO_CODE_FOUND_AT_LINE_3 = \"No code found at line $0 in $1. Try line $2.\"\nERROR_LOCATION_NO_CODE_FOUND_AT_LINE_4 = (\n    \"No code found at line $0 in $1. Try lines $2 or $3.\"\n)",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "documentation": {}
    },
    {
        "label": "ERROR_LOCATION_MULTIPLE_MODULES_3",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "peekOfCode": "ERROR_LOCATION_MULTIPLE_MODULES_3 = \"Multiple modules matching $0 ($1, $2)\"\nERROR_LOCATION_MULTIPLE_MODULES_4 = \"Multiple modules matching $0 ($1, $2, and $3 more)\"\nERROR_LOCATION_NO_CODE_FOUND_AT_LINE_2 = \"No code found at line $0 in $1\"\nERROR_LOCATION_NO_CODE_FOUND_AT_LINE_3 = \"No code found at line $0 in $1. Try line $2.\"\nERROR_LOCATION_NO_CODE_FOUND_AT_LINE_4 = (\n    \"No code found at line $0 in $1. Try lines $2 or $3.\"\n)\nERROR_CONDITION_GLOBAL_QUOTA_EXCEEDED_0 = (\n    \"Snapshot cancelled. The condition evaluation cost for all active \"\n    \"snapshots might affect the application performance.\"",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "documentation": {}
    },
    {
        "label": "ERROR_LOCATION_MULTIPLE_MODULES_4",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "peekOfCode": "ERROR_LOCATION_MULTIPLE_MODULES_4 = \"Multiple modules matching $0 ($1, $2, and $3 more)\"\nERROR_LOCATION_NO_CODE_FOUND_AT_LINE_2 = \"No code found at line $0 in $1\"\nERROR_LOCATION_NO_CODE_FOUND_AT_LINE_3 = \"No code found at line $0 in $1. Try line $2.\"\nERROR_LOCATION_NO_CODE_FOUND_AT_LINE_4 = (\n    \"No code found at line $0 in $1. Try lines $2 or $3.\"\n)\nERROR_CONDITION_GLOBAL_QUOTA_EXCEEDED_0 = (\n    \"Snapshot cancelled. The condition evaluation cost for all active \"\n    \"snapshots might affect the application performance.\"\n)",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "documentation": {}
    },
    {
        "label": "ERROR_LOCATION_NO_CODE_FOUND_AT_LINE_2",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "peekOfCode": "ERROR_LOCATION_NO_CODE_FOUND_AT_LINE_2 = \"No code found at line $0 in $1\"\nERROR_LOCATION_NO_CODE_FOUND_AT_LINE_3 = \"No code found at line $0 in $1. Try line $2.\"\nERROR_LOCATION_NO_CODE_FOUND_AT_LINE_4 = (\n    \"No code found at line $0 in $1. Try lines $2 or $3.\"\n)\nERROR_CONDITION_GLOBAL_QUOTA_EXCEEDED_0 = (\n    \"Snapshot cancelled. The condition evaluation cost for all active \"\n    \"snapshots might affect the application performance.\"\n)\nERROR_CONDITION_BREAKPOINT_QUOTA_EXCEEDED_0 = (",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "documentation": {}
    },
    {
        "label": "ERROR_LOCATION_NO_CODE_FOUND_AT_LINE_3",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "peekOfCode": "ERROR_LOCATION_NO_CODE_FOUND_AT_LINE_3 = \"No code found at line $0 in $1. Try line $2.\"\nERROR_LOCATION_NO_CODE_FOUND_AT_LINE_4 = (\n    \"No code found at line $0 in $1. Try lines $2 or $3.\"\n)\nERROR_CONDITION_GLOBAL_QUOTA_EXCEEDED_0 = (\n    \"Snapshot cancelled. The condition evaluation cost for all active \"\n    \"snapshots might affect the application performance.\"\n)\nERROR_CONDITION_BREAKPOINT_QUOTA_EXCEEDED_0 = (\n    \"Snapshot cancelled. The condition evaluation at this location might \"",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "documentation": {}
    },
    {
        "label": "ERROR_LOCATION_NO_CODE_FOUND_AT_LINE_4",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "peekOfCode": "ERROR_LOCATION_NO_CODE_FOUND_AT_LINE_4 = (\n    \"No code found at line $0 in $1. Try lines $2 or $3.\"\n)\nERROR_CONDITION_GLOBAL_QUOTA_EXCEEDED_0 = (\n    \"Snapshot cancelled. The condition evaluation cost for all active \"\n    \"snapshots might affect the application performance.\"\n)\nERROR_CONDITION_BREAKPOINT_QUOTA_EXCEEDED_0 = (\n    \"Snapshot cancelled. The condition evaluation at this location might \"\n    \"affect application performance. Please simplify the condition or move \"",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "documentation": {}
    },
    {
        "label": "ERROR_CONDITION_GLOBAL_QUOTA_EXCEEDED_0",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "peekOfCode": "ERROR_CONDITION_GLOBAL_QUOTA_EXCEEDED_0 = (\n    \"Snapshot cancelled. The condition evaluation cost for all active \"\n    \"snapshots might affect the application performance.\"\n)\nERROR_CONDITION_BREAKPOINT_QUOTA_EXCEEDED_0 = (\n    \"Snapshot cancelled. The condition evaluation at this location might \"\n    \"affect application performance. Please simplify the condition or move \"\n    \"the snapshot to a less frequently called statement.\"\n)\nERROR_CONDITION_MUTABLE_0 = (",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "documentation": {}
    },
    {
        "label": "ERROR_CONDITION_BREAKPOINT_QUOTA_EXCEEDED_0",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "peekOfCode": "ERROR_CONDITION_BREAKPOINT_QUOTA_EXCEEDED_0 = (\n    \"Snapshot cancelled. The condition evaluation at this location might \"\n    \"affect application performance. Please simplify the condition or move \"\n    \"the snapshot to a less frequently called statement.\"\n)\nERROR_CONDITION_MUTABLE_0 = (\n    \"Only immutable expressions can be used in snapshot conditions\"\n)\nERROR_AGE_SNAPSHOT_EXPIRED_0 = \"The snapshot has expired\"\nERROR_AGE_LOGPOINT_EXPIRED_0 = \"The logpoint has expired\"",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "documentation": {}
    },
    {
        "label": "ERROR_CONDITION_MUTABLE_0",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "peekOfCode": "ERROR_CONDITION_MUTABLE_0 = (\n    \"Only immutable expressions can be used in snapshot conditions\"\n)\nERROR_AGE_SNAPSHOT_EXPIRED_0 = \"The snapshot has expired\"\nERROR_AGE_LOGPOINT_EXPIRED_0 = \"The logpoint has expired\"\nERROR_UNSPECIFIED_INTERNAL_ERROR = \"Internal error occurred\"\n# Status messages for different breakpoint events (except of \"hit\").\n_BREAKPOINT_EVENT_STATUS = dict(\n    [\n        (",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "documentation": {}
    },
    {
        "label": "ERROR_AGE_SNAPSHOT_EXPIRED_0",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "peekOfCode": "ERROR_AGE_SNAPSHOT_EXPIRED_0 = \"The snapshot has expired\"\nERROR_AGE_LOGPOINT_EXPIRED_0 = \"The logpoint has expired\"\nERROR_UNSPECIFIED_INTERNAL_ERROR = \"Internal error occurred\"\n# Status messages for different breakpoint events (except of \"hit\").\n_BREAKPOINT_EVENT_STATUS = dict(\n    [\n        (\n            native.BREAKPOINT_EVENT_ERROR,\n            {\n                \"isError\": True,",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "documentation": {}
    },
    {
        "label": "ERROR_AGE_LOGPOINT_EXPIRED_0",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "peekOfCode": "ERROR_AGE_LOGPOINT_EXPIRED_0 = \"The logpoint has expired\"\nERROR_UNSPECIFIED_INTERNAL_ERROR = \"Internal error occurred\"\n# Status messages for different breakpoint events (except of \"hit\").\n_BREAKPOINT_EVENT_STATUS = dict(\n    [\n        (\n            native.BREAKPOINT_EVENT_ERROR,\n            {\n                \"isError\": True,\n                \"description\": {\"format\": ERROR_UNSPECIFIED_INTERNAL_ERROR},",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "documentation": {}
    },
    {
        "label": "ERROR_UNSPECIFIED_INTERNAL_ERROR",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "peekOfCode": "ERROR_UNSPECIFIED_INTERNAL_ERROR = \"Internal error occurred\"\n# Status messages for different breakpoint events (except of \"hit\").\n_BREAKPOINT_EVENT_STATUS = dict(\n    [\n        (\n            native.BREAKPOINT_EVENT_ERROR,\n            {\n                \"isError\": True,\n                \"description\": {\"format\": ERROR_UNSPECIFIED_INTERNAL_ERROR},\n            },",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "documentation": {}
    },
    {
        "label": "_BREAKPOINT_EVENT_STATUS",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "peekOfCode": "_BREAKPOINT_EVENT_STATUS = dict(\n    [\n        (\n            native.BREAKPOINT_EVENT_ERROR,\n            {\n                \"isError\": True,\n                \"description\": {\"format\": ERROR_UNSPECIFIED_INTERNAL_ERROR},\n            },\n        ),\n        (",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.python_breakpoint",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.external.googleclouddebugger.version",
        "description": "utils.debugger.tracepointdebug.external.googleclouddebugger.version",
        "peekOfCode": "__version__ = \"2.15\"",
        "detail": "utils.debugger.tracepointdebug.external.googleclouddebugger.version",
        "documentation": {}
    },
    {
        "label": "ApplicationStatusTracePointProvider",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.application.application_status_tracepoint_provider",
        "description": "utils.debugger.tracepointdebug.probe.application.application_status_tracepoint_provider",
        "peekOfCode": "class ApplicationStatusTracePointProvider(ApplicationStatusProvider):\n    def provide(self, application_status, client=None):\n        application_status.trace_points = (\n            TracePointManager.instance().list_trace_points(client)\n        )\n        application_status.log_points = LogPointManager.instance().list_log_points(\n            client\n        )",
        "detail": "utils.debugger.tracepointdebug.probe.application.application_status_tracepoint_provider",
        "documentation": {}
    },
    {
        "label": "ABC",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.application.application_status_tracepoint_provider",
        "description": "utils.debugger.tracepointdebug.probe.application.application_status_tracepoint_provider",
        "peekOfCode": "ABC = abc.ABCMeta(\"ABC\", (object,), {})\nclass ApplicationStatusTracePointProvider(ApplicationStatusProvider):\n    def provide(self, application_status, client=None):\n        application_status.trace_points = (\n            TracePointManager.instance().list_trace_points(client)\n        )\n        application_status.log_points = LogPointManager.instance().list_log_points(\n            client\n        )",
        "detail": "utils.debugger.tracepointdebug.probe.application.application_status_tracepoint_provider",
        "documentation": {}
    },
    {
        "label": "ConditionLexer",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python2_runtime.ConditionLexer",
        "description": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python2_runtime.ConditionLexer",
        "peekOfCode": "class ConditionLexer(Lexer):\n    atn = ATNDeserializer().deserialize(serializedATN())\n    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]\n    BOOLEAN = 1\n    AND = 2\n    OR = 3\n    NOT = 4\n    TRUE = 5\n    FALSE = 6\n    NULL = 7",
        "detail": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python2_runtime.ConditionLexer",
        "documentation": {}
    },
    {
        "label": "serializedATN",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python2_runtime.ConditionLexer",
        "description": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python2_runtime.ConditionLexer",
        "peekOfCode": "def serializedATN():\n    with StringIO() as buf:\n        buf.write(\"\\3\\u608b\\ua72a\\u8133\\ub9ed\\u417c\\u3be7\\u7786\\u5964\\2\")\n        buf.write(\"\\27\\u009c\\b\\1\\4\\2\\t\\2\\4\\3\\t\\3\\4\\4\\t\\4\\4\\5\\t\\5\\4\\6\\t\\6\")\n        buf.write(\"\\4\\7\\t\\7\\4\\b\\t\\b\\4\\t\\t\\t\\4\\n\\t\\n\\4\\13\\t\\13\\4\\f\\t\\f\\4\")\n        buf.write(\"\\r\\t\\r\\4\\16\\t\\16\\4\\17\\t\\17\\4\\20\\t\\20\\4\\21\\t\\21\\4\\22\\t\")\n        buf.write(\"\\22\\4\\23\\t\\23\\4\\24\\t\\24\\4\\25\\t\\25\\4\\26\\t\\26\\3\\2\\3\\2\\5\")\n        buf.write(\"\\2\\60\\n\\2\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\5\\3\\67\\n\\3\\3\\4\\3\\4\\3\\4\")\n        buf.write(\"\\3\\4\\5\\4=\\n\\4\\3\\5\\3\\5\\3\\5\\3\\5\\3\\6\\3\\6\\3\\6\\3\\6\\3\\6\\3\\7\")\n        buf.write(\"\\3\\7\\3\\7\\3\\7\\3\\7\\3\\7\\3\\b\\3\\b\\3\\b\\3\\b\\3\\b\\3\\t\\3\\t\\3\\n\")",
        "detail": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python2_runtime.ConditionLexer",
        "documentation": {}
    },
    {
        "label": "ConditionListener",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python2_runtime.ConditionListener",
        "description": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python2_runtime.ConditionListener",
        "peekOfCode": "class ConditionListener(ParseTreeListener):\n    # Enter a parse tree produced by ConditionParser#parse.\n    def enterParse(self, ctx):\n        pass\n    # Exit a parse tree produced by ConditionParser#parse.\n    def exitParse(self, ctx):\n        pass\n    # Enter a parse tree produced by ConditionParser#binaryExpression.\n    def enterBinaryExpression(self, ctx):\n        pass",
        "detail": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python2_runtime.ConditionListener",
        "documentation": {}
    },
    {
        "label": "ConditionParser",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python2_runtime.ConditionParser",
        "description": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python2_runtime.ConditionParser",
        "peekOfCode": "class ConditionParser(Parser):\n    grammarFileName = \"Condition.g4\"\n    atn = ATNDeserializer().deserialize(serializedATN())\n    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]\n    sharedContextCache = PredictionContextCache()\n    literalNames = [\n        \"<INVALID>\",\n        \"<INVALID>\",\n        \"<INVALID>\",\n        \"<INVALID>\",",
        "detail": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python2_runtime.ConditionParser",
        "documentation": {}
    },
    {
        "label": "serializedATN",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python2_runtime.ConditionParser",
        "description": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python2_runtime.ConditionParser",
        "peekOfCode": "def serializedATN():\n    with StringIO() as buf:\n        buf.write(\"\\3\\u608b\\ua72a\\u8133\\ub9ed\\u417c\\u3be7\\u7786\\u5964\\3\")\n        buf.write(\"\\27*\\4\\2\\t\\2\\4\\3\\t\\3\\4\\4\\t\\4\\4\\5\\t\\5\\4\\6\\t\\6\\3\\2\\3\\2\")\n        buf.write(\"\\3\\2\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\5\\3\\31\\n\\3\\3\")\n        buf.write('\\3\\3\\3\\3\\3\\3\\3\\7\\3\\37\\n\\3\\f\\3\\16\\3\"\\13\\3\\3\\4\\3\\4\\3\\5')\n        buf.write(\"\\3\\5\\3\\6\\3\\6\\3\\6\\2\\3\\4\\7\\2\\4\\6\\b\\n\\2\\5\\3\\2\\n\\17\\3\\2\\4\")\n        buf.write(\"\\5\\5\\2\\3\\3\\t\\t\\22\\26\\2&\\2\\f\\3\\2\\2\\2\\4\\30\\3\\2\\2\\2\\6#\\3\")\n        buf.write(\"\\2\\2\\2\\b%\\3\\2\\2\\2\\n'\\3\\2\\2\\2\\f\\r\\5\\4\\3\\2\\r\\16\\7\\2\\2\")\n        buf.write(\"\\3\\16\\3\\3\\2\\2\\2\\17\\20\\b\\3\\1\\2\\20\\21\\7\\20\\2\\2\\21\\22\\5\")",
        "detail": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python2_runtime.ConditionParser",
        "documentation": {}
    },
    {
        "label": "ConditionLexer",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python3_runtime.ConditionLexer",
        "description": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python3_runtime.ConditionLexer",
        "peekOfCode": "class ConditionLexer(Lexer):\n    atn = ATNDeserializer().deserialize(serializedATN())\n    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]\n    BOOLEAN = 1\n    AND = 2\n    OR = 3\n    NOT = 4\n    TRUE = 5\n    FALSE = 6\n    NULL = 7",
        "detail": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python3_runtime.ConditionLexer",
        "documentation": {}
    },
    {
        "label": "serializedATN",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python3_runtime.ConditionLexer",
        "description": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python3_runtime.ConditionLexer",
        "peekOfCode": "def serializedATN():\n    with StringIO() as buf:\n        buf.write(\"\\3\\u608b\\ua72a\\u8133\\ub9ed\\u417c\\u3be7\\u7786\\u5964\\2\\27\")\n        buf.write(\"\\u009c\\b\\1\\4\\2\\t\\2\\4\\3\\t\\3\\4\\4\\t\\4\\4\\5\\t\\5\\4\\6\\t\\6\\4\\7\")\n        buf.write(\"\\t\\7\\4\\b\\t\\b\\4\\t\\t\\t\\4\\n\\t\\n\\4\\13\\t\\13\\4\\f\\t\\f\\4\\r\\t\\r\")\n        buf.write(\"\\4\\16\\t\\16\\4\\17\\t\\17\\4\\20\\t\\20\\4\\21\\t\\21\\4\\22\\t\\22\\4\\23\")\n        buf.write(\"\\t\\23\\4\\24\\t\\24\\4\\25\\t\\25\\4\\26\\t\\26\\3\\2\\3\\2\\5\\2\\60\\n\\2\")\n        buf.write(\"\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\5\\3\\67\\n\\3\\3\\4\\3\\4\\3\\4\\3\\4\\5\\4=\\n\")\n        buf.write(\"\\4\\3\\5\\3\\5\\3\\5\\3\\5\\3\\6\\3\\6\\3\\6\\3\\6\\3\\6\\3\\7\\3\\7\\3\\7\\3\\7\")\n        buf.write(\"\\3\\7\\3\\7\\3\\b\\3\\b\\3\\b\\3\\b\\3\\b\\3\\t\\3\\t\\3\\n\\3\\n\\3\\n\\3\\13\")",
        "detail": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python3_runtime.ConditionLexer",
        "documentation": {}
    },
    {
        "label": "ConditionListener",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python3_runtime.ConditionListener",
        "description": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python3_runtime.ConditionListener",
        "peekOfCode": "class ConditionListener(ParseTreeListener):\n    # Enter a parse tree produced by ConditionParser#parse.\n    def enterParse(self, ctx: ConditionParser.ParseContext):\n        pass\n    # Exit a parse tree produced by ConditionParser#parse.\n    def exitParse(self, ctx: ConditionParser.ParseContext):\n        pass\n    # Enter a parse tree produced by ConditionParser#binaryExpression.\n    def enterBinaryExpression(self, ctx: ConditionParser.BinaryExpressionContext):\n        pass",
        "detail": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python3_runtime.ConditionListener",
        "documentation": {}
    },
    {
        "label": "ConditionParser",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python3_runtime.ConditionParser",
        "description": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python3_runtime.ConditionParser",
        "peekOfCode": "class ConditionParser(Parser):\n    grammarFileName = \"Condition.g4\"\n    atn = ATNDeserializer().deserialize(serializedATN())\n    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]\n    sharedContextCache = PredictionContextCache()\n    literalNames = [\n        \"<INVALID>\",\n        \"<INVALID>\",\n        \"<INVALID>\",\n        \"<INVALID>\",",
        "detail": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python3_runtime.ConditionParser",
        "documentation": {}
    },
    {
        "label": "serializedATN",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python3_runtime.ConditionParser",
        "description": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python3_runtime.ConditionParser",
        "peekOfCode": "def serializedATN():\n    with StringIO() as buf:\n        buf.write(\"\\3\\u608b\\ua72a\\u8133\\ub9ed\\u417c\\u3be7\\u7786\\u5964\\3\\27\")\n        buf.write(\"*\\4\\2\\t\\2\\4\\3\\t\\3\\4\\4\\t\\4\\4\\5\\t\\5\\4\\6\\t\\6\\3\\2\\3\\2\\3\\2\")\n        buf.write(\"\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\3\\5\\3\\31\\n\\3\\3\\3\\3\")\n        buf.write('\\3\\3\\3\\3\\3\\7\\3\\37\\n\\3\\f\\3\\16\\3\"\\13\\3\\3\\4\\3\\4\\3\\5\\3\\5')\n        buf.write(\"\\3\\6\\3\\6\\3\\6\\2\\3\\4\\7\\2\\4\\6\\b\\n\\2\\5\\3\\2\\n\\17\\3\\2\\4\\5\\5\")\n        buf.write(\"\\2\\3\\3\\t\\t\\22\\26\\2&\\2\\f\\3\\2\\2\\2\\4\\30\\3\\2\\2\\2\\6#\\3\\2\\2\")\n        buf.write(\"\\2\\b%\\3\\2\\2\\2\\n'\\3\\2\\2\\2\\f\\r\\5\\4\\3\\2\\r\\16\\7\\2\\2\\3\\16\")\n        buf.write(\"\\3\\3\\2\\2\\2\\17\\20\\b\\3\\1\\2\\20\\21\\7\\20\\2\\2\\21\\22\\5\\4\\3\\2\")",
        "detail": "utils.debugger.tracepointdebug.probe.condition.antlr4parser.python3_runtime.ConditionParser",
        "documentation": {}
    },
    {
        "label": "BooleanOperand",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.operand.boolean_operand",
        "description": "utils.debugger.tracepointdebug.probe.condition.operand.boolean_operand",
        "peekOfCode": "class BooleanOperand(TypedOperand):\n    def __init__(self, value_provider):\n        super(BooleanOperand, self).__init__(bool, value_provider)\n    def is_eq(self, value, condition_context):\n        cur_val = self.get_value(condition_context)\n        return cur_val == value\n    def is_ne(self, value, condition_context):\n        cur_val = self.get_value(condition_context)\n        return cur_val != value",
        "detail": "utils.debugger.tracepointdebug.probe.condition.operand.boolean_operand",
        "documentation": {}
    },
    {
        "label": "NullOperand",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.operand.null_operand",
        "description": "utils.debugger.tracepointdebug.probe.condition.operand.null_operand",
        "peekOfCode": "class NullOperand(Operand):\n    def get_value(self, condition_context):\n        return None\n    def eq(self, operand, condition_context):\n        return operand.get_value(condition_context) is None\n    def ne(self, operand, condition_context):\n        return operand.get_value(condition_context) is not None\n    def lt(self, operand, condition_context):\n        return False\n    def le(self, operand, condition_context):",
        "detail": "utils.debugger.tracepointdebug.probe.condition.operand.null_operand",
        "documentation": {}
    },
    {
        "label": "NumberOperand",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.operand.number_operand",
        "description": "utils.debugger.tracepointdebug.probe.condition.operand.number_operand",
        "peekOfCode": "class NumberOperand(TypedOperand):\n    def __init__(self, value_provider):\n        super(NumberOperand, self).__init__((float, int), value_provider)\n    def is_eq(self, value, condition_context):\n        cur_val = self.get_value(condition_context)\n        return cur_val == value\n    def is_ne(self, value, condition_context):\n        cur_val = self.get_value(condition_context)\n        return cur_val != value\n    def is_lt(self, value, condition_context):",
        "detail": "utils.debugger.tracepointdebug.probe.condition.operand.number_operand",
        "documentation": {}
    },
    {
        "label": "ObjectOperand",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.operand.object_operand",
        "description": "utils.debugger.tracepointdebug.probe.condition.operand.object_operand",
        "peekOfCode": "class ObjectOperand(Operand):\n    def __init__(self, value_provider):\n        self.value_provider = value_provider\n    def get_value(self, condition_context):\n        return self.value_provider.get_value(condition_context)\n    def eq(self, operand, condition_context):\n        cur_val = self.get_value(condition_context)\n        return cur_val == operand.get_value(condition_context)\n    def ne(self, operand, condition_context):\n        cur_val = self.get_value(condition_context)",
        "detail": "utils.debugger.tracepointdebug.probe.condition.operand.object_operand",
        "documentation": {}
    },
    {
        "label": "Operand",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.operand.operand",
        "description": "utils.debugger.tracepointdebug.probe.condition.operand.operand",
        "peekOfCode": "class Operand(ABC):\n    @abc.abstractmethod\n    def get_value(self, condition_context):\n        pass\n    @abc.abstractmethod\n    def eq(self, operand, condition_context):\n        return False\n    @abc.abstractmethod\n    def ne(self, operand, condition_context):\n        return False",
        "detail": "utils.debugger.tracepointdebug.probe.condition.operand.operand",
        "documentation": {}
    },
    {
        "label": "ABC",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.operand.operand",
        "description": "utils.debugger.tracepointdebug.probe.condition.operand.operand",
        "peekOfCode": "ABC = abc.ABCMeta(\"ABC\", (object,), {})\nclass Operand(ABC):\n    @abc.abstractmethod\n    def get_value(self, condition_context):\n        pass\n    @abc.abstractmethod\n    def eq(self, operand, condition_context):\n        return False\n    @abc.abstractmethod\n    def ne(self, operand, condition_context):",
        "detail": "utils.debugger.tracepointdebug.probe.condition.operand.operand",
        "documentation": {}
    },
    {
        "label": "StringOperand",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.operand.string_operand",
        "description": "utils.debugger.tracepointdebug.probe.condition.operand.string_operand",
        "peekOfCode": "class StringOperand(TypedOperand):\n    def __init__(self, value_provider):\n        if sys.version_info[0] >= 3:\n            super(StringOperand, self).__init__(str, value_provider)\n        else:\n            super(StringOperand, self).__init__((str, unicode), value_provider)\n    def is_eq(self, value, condition_context):\n        cur_val = self.get_value(condition_context)\n        return cur_val == value\n    def is_ne(self, value, condition_context):",
        "detail": "utils.debugger.tracepointdebug.probe.condition.operand.string_operand",
        "documentation": {}
    },
    {
        "label": "TypedOperand",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.operand.typed_operand",
        "description": "utils.debugger.tracepointdebug.probe.condition.operand.typed_operand",
        "peekOfCode": "class TypedOperand(Operand):\n    def __init__(self, value_type, value_provider):\n        self.value_type = value_type\n        self.value_provider = value_provider\n    def get_value(self, condition_context):\n        value = self.value_provider.get_value(condition_context)\n        if value is None or isinstance(value, self.value_type):\n            return value\n        return None\n    def is_eq(self, value, condition_context):",
        "detail": "utils.debugger.tracepointdebug.probe.condition.operand.typed_operand",
        "documentation": {}
    },
    {
        "label": "VariableOperand",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.operand.variable_operand",
        "description": "utils.debugger.tracepointdebug.probe.condition.operand.variable_operand",
        "peekOfCode": "class VariableOperand(Operand):\n    def __init__(self, var_name):\n        var_name = str(var_name)\n        self.value_provider = VariableValueProvider(var_name)\n    def create_variable_operand(self, var_value):\n        if isinstance(var_value, bool):\n            return BooleanOperand(self.value_provider)\n        if isinstance(var_value, (int, float)):\n            return NumberOperand(self.value_provider)\n        if isinstance(var_value, str):",
        "detail": "utils.debugger.tracepointdebug.probe.condition.operand.variable_operand",
        "documentation": {}
    },
    {
        "label": "BinaryOperator",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.binary_operator",
        "description": "utils.debugger.tracepointdebug.probe.condition.binary_operator",
        "peekOfCode": "class BinaryOperator(Enum):\n    AND = 1\n    OR = 2",
        "detail": "utils.debugger.tracepointdebug.probe.condition.binary_operator",
        "documentation": {}
    },
    {
        "label": "ComparisonOperator",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.comparison_operator",
        "description": "utils.debugger.tracepointdebug.probe.condition.comparison_operator",
        "peekOfCode": "class ComparisonOperator(Enum):\n    EQ = \"==\"\n    NE = \"!=\"\n    LT = \"<\"\n    LE = \"<=\"\n    GT = \">\"\n    GE = \">=\"\n    @staticmethod\n    def from_expression(expression):\n        for op in ComparisonOperator:",
        "detail": "utils.debugger.tracepointdebug.probe.condition.comparison_operator",
        "documentation": {}
    },
    {
        "label": "CompositeCondition",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.composite_condition",
        "description": "utils.debugger.tracepointdebug.probe.condition.composite_condition",
        "peekOfCode": "class CompositeCondition(Condition):\n    def __init__(self, conditions, operators):\n        self.conditions = conditions\n        self.operators = operators\n    def evaluate(self, condition_context):\n        result = None\n        for i in range(len(self.conditions)):\n            condition = self.conditions[i]\n            evaluation_result = condition.evaluate(condition_context)\n            if result is None:",
        "detail": "utils.debugger.tracepointdebug.probe.condition.composite_condition",
        "documentation": {}
    },
    {
        "label": "Condition",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.condition",
        "description": "utils.debugger.tracepointdebug.probe.condition.condition",
        "peekOfCode": "class Condition(ABC):\n    @abc.abstractmethod\n    def evaluate(self, condition_context):\n        pass",
        "detail": "utils.debugger.tracepointdebug.probe.condition.condition",
        "documentation": {}
    },
    {
        "label": "ABC",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.condition",
        "description": "utils.debugger.tracepointdebug.probe.condition.condition",
        "peekOfCode": "ABC = abc.ABCMeta(\"ABC\", (object,), {})\nclass Condition(ABC):\n    @abc.abstractmethod\n    def evaluate(self, condition_context):\n        pass",
        "detail": "utils.debugger.tracepointdebug.probe.condition.condition",
        "documentation": {}
    },
    {
        "label": "ConditionContext",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.condition_context",
        "description": "utils.debugger.tracepointdebug.probe.condition.condition_context",
        "peekOfCode": "class ConditionContext(object):\n    def __init__(self, variables):\n        self.variables = variables\n    def get_variable_value(self, var_name):\n        attr_lst = var_name.split(\".\")\n        cur = self.variables\n        for attr in attr_lst:\n            if hasattr(cur, attr):\n                cur = getattr(cur, attr)\n            elif isinstance(cur, dict) and cur.get(attr) is not None:",
        "detail": "utils.debugger.tracepointdebug.probe.condition.condition_context",
        "documentation": {}
    },
    {
        "label": "ConditionBuilder",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "description": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "peekOfCode": "class ConditionBuilder(ABC):\n    @abc.abstractmethod\n    def build(self):\n        pass\n    @abc.abstractmethod\n    def add_builder(self, builder):\n        pass\n    @abc.abstractmethod\n    def add_operator(self, builder):\n        pass",
        "detail": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "documentation": {}
    },
    {
        "label": "SingleConditionBuilder",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "description": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "peekOfCode": "class SingleConditionBuilder(ConditionBuilder):\n    def __init__(self):\n        self.left_operand = None\n        self.right_operand = None\n        self.comparison_operator = None\n    def build(self):\n        return SingleCondition(\n            left_operand=self.left_operand,\n            right_operand=self.right_operand,\n            comparison_operator=self.comparison_operator,",
        "detail": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "documentation": {}
    },
    {
        "label": "CompositeConditionBuilder",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "description": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "peekOfCode": "class CompositeConditionBuilder(ConditionBuilder):\n    def __init__(self):\n        self.builders = []\n        self.operators = []\n    def build(self):\n        if len(self.builders) == 1:\n            return self.builders[0].build()\n        conditions = []\n        for builder in self.builders:\n            conditions.append(builder.build())",
        "detail": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "documentation": {}
    },
    {
        "label": "ConditionListener",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "description": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "peekOfCode": "class ConditionListener(ParseTreeListener):\n    # Enter a parse tree produced by ConditionParser#parse.\n    def __init__(self):\n        self.condition_builder_stack = [CompositeConditionBuilder()]\n    def enterParse(self, ctx):\n        pass\n    # Exit a parse tree produced by ConditionParser#parse.\n    def exitParse(self, ctx):\n        pass\n    # Enter a parse tree produced by ConditionParser#binaryExpression.",
        "detail": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "documentation": {}
    },
    {
        "label": "ConditionFactory",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "description": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "peekOfCode": "class ConditionFactory(object):\n    @staticmethod\n    def create_boolean_operand(operand_expression):\n        return BooleanOperand(\n            ConstantValueProvider(operand_expression.lower() == \"true\")\n        )\n    @staticmethod\n    def create_string_operand(operand_expression):\n        return StringOperand(ConstantValueProvider(operand_expression[1:-1]))\n    @staticmethod",
        "detail": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "documentation": {}
    },
    {
        "label": "ABC",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "description": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "peekOfCode": "ABC = abc.ABCMeta(\"ABC\", (object,), {})\nclass ConditionBuilder(ABC):\n    @abc.abstractmethod\n    def build(self):\n        pass\n    @abc.abstractmethod\n    def add_builder(self, builder):\n        pass\n    @abc.abstractmethod\n    def add_operator(self, builder):",
        "detail": "utils.debugger.tracepointdebug.probe.condition.condition_factory",
        "documentation": {}
    },
    {
        "label": "ConstantValueProvider",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.constant_value_provider",
        "description": "utils.debugger.tracepointdebug.probe.condition.constant_value_provider",
        "peekOfCode": "class ConstantValueProvider(ValueProvider):\n    def __init__(self, value):\n        self.value = value\n    def get_value(self, condition_context):\n        return self.value",
        "detail": "utils.debugger.tracepointdebug.probe.condition.constant_value_provider",
        "documentation": {}
    },
    {
        "label": "SingleCondition",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.single_condition",
        "description": "utils.debugger.tracepointdebug.probe.condition.single_condition",
        "peekOfCode": "class SingleCondition(Condition):\n    def __init__(self, left_operand, right_operand, comparison_operator):\n        self.left_operand = left_operand\n        self.right_operand = right_operand\n        self.comparison_operator = comparison_operator\n    def evaluate(self, condition_context):\n        if self.comparison_operator == ComparisonOperator.EQ:\n            return self.left_operand.eq(\n                self.right_operand, condition_context=condition_context\n            )",
        "detail": "utils.debugger.tracepointdebug.probe.condition.single_condition",
        "documentation": {}
    },
    {
        "label": "ValueProvider",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.value_provider",
        "description": "utils.debugger.tracepointdebug.probe.condition.value_provider",
        "peekOfCode": "class ValueProvider(ABC):\n    @abc.abstractmethod\n    def get_value(self, condition_context):\n        pass",
        "detail": "utils.debugger.tracepointdebug.probe.condition.value_provider",
        "documentation": {}
    },
    {
        "label": "ABC",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.value_provider",
        "description": "utils.debugger.tracepointdebug.probe.condition.value_provider",
        "peekOfCode": "ABC = abc.ABCMeta(\"ABC\", (object,), {})\nclass ValueProvider(ABC):\n    @abc.abstractmethod\n    def get_value(self, condition_context):\n        pass",
        "detail": "utils.debugger.tracepointdebug.probe.condition.value_provider",
        "documentation": {}
    },
    {
        "label": "VariableValueProvider",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.condition.variable_value_provider",
        "description": "utils.debugger.tracepointdebug.probe.condition.variable_value_provider",
        "peekOfCode": "class VariableValueProvider(ValueProvider):\n    def __init__(self, var_name):\n        self.var_name = var_name\n    def get_value(self, condition_context):\n        return condition_context.get_variable_value(self.var_name)",
        "detail": "utils.debugger.tracepointdebug.probe.condition.variable_value_provider",
        "documentation": {}
    },
    {
        "label": "LogPointEvent",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.event.logpoint.log_point_event",
        "description": "utils.debugger.tracepointdebug.probe.event.logpoint.log_point_event",
        "peekOfCode": "class LogPointEvent(BaseEvent):\n    EVENT_NAME = \"LogPointEvent\"\n    def __init__(\n        self, log_point_id, file, line_no, method_name, log_message, created_at\n    ):\n        super(LogPointEvent, self).__init__()\n        self.log_point_id = log_point_id\n        self.file = file\n        self.line_no = line_no\n        self.method_name = method_name",
        "detail": "utils.debugger.tracepointdebug.probe.event.logpoint.log_point_event",
        "documentation": {}
    },
    {
        "label": "LogPointFailedEvent",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.event.logpoint.log_point_failed_event",
        "description": "utils.debugger.tracepointdebug.probe.event.logpoint.log_point_failed_event",
        "peekOfCode": "class LogPointFailedEvent(BaseEvent):\n    EVENT_NAME = \"LogPointFailedEvent\"\n    def __init__(self, file, line_no, error_code, error_message):\n        super(LogPointFailedEvent, self).__init__()\n        self.file = file\n        self.line_no = line_no\n        self.error_code = error_code\n        self.error_message = error_message\n    def to_json(self):\n        return {",
        "detail": "utils.debugger.tracepointdebug.probe.event.logpoint.log_point_failed_event",
        "documentation": {}
    },
    {
        "label": "LogPointRateLimitEvent",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.event.logpoint.log_point_rate_limit_event",
        "description": "utils.debugger.tracepointdebug.probe.event.logpoint.log_point_rate_limit_event",
        "peekOfCode": "class LogPointRateLimitEvent(BaseEvent):\n    EVENT_NAME = \"LogPointRateLimitEvent\"\n    def __init__(self, file, line_no):\n        super(LogPointRateLimitEvent, self).__init__()\n        self.file = file\n        self.line_no = line_no\n    def to_json(self):\n        return {\n            \"name\": self.name,\n            \"type\": self.get_type(),",
        "detail": "utils.debugger.tracepointdebug.probe.event.logpoint.log_point_rate_limit_event",
        "documentation": {}
    },
    {
        "label": "PutLogPointFailedEvent",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.event.logpoint.put_logpoint_failed_event",
        "description": "utils.debugger.tracepointdebug.probe.event.logpoint.put_logpoint_failed_event",
        "peekOfCode": "class PutLogPointFailedEvent(BaseEvent):\n    EVENT_NAME = \"PutLogPointFailedEvent\"\n    def __init__(self, file, line_no, error_code, error_message):\n        super(PutLogPointFailedEvent, self).__init__()\n        self.file = file\n        self.line_no = line_no\n        self.error_code = error_code\n        self.error_message = error_message\n    def to_json(self):\n        return {",
        "detail": "utils.debugger.tracepointdebug.probe.event.logpoint.put_logpoint_failed_event",
        "documentation": {}
    },
    {
        "label": "PutTracePointFailedEvent",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.event.put_tracepoint_failed_event",
        "description": "utils.debugger.tracepointdebug.probe.event.put_tracepoint_failed_event",
        "peekOfCode": "class PutTracePointFailedEvent(BaseEvent):\n    EVENT_NAME = \"PutTracePointFailedEvent\"\n    def __init__(self, file, line_no, error_code, error_message):\n        super(PutTracePointFailedEvent, self).__init__()\n        self.file = file\n        self.line_no = line_no\n        self.error_code = error_code\n        self.error_message = error_message\n    def to_json(self):\n        return {",
        "detail": "utils.debugger.tracepointdebug.probe.event.put_tracepoint_failed_event",
        "documentation": {}
    },
    {
        "label": "TracePointRateLimitEvent",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.event.trace_point_rate_limit_event",
        "description": "utils.debugger.tracepointdebug.probe.event.trace_point_rate_limit_event",
        "peekOfCode": "class TracePointRateLimitEvent(BaseEvent):\n    EVENT_NAME = \"TracePointRateLimitEvent\"\n    def __init__(self, file, line_no):\n        super(TracePointRateLimitEvent, self).__init__()\n        self.file = file\n        self.line_no = line_no\n    def to_json(self):\n        return {\n            \"name\": self.name,\n            \"type\": self.get_type(),",
        "detail": "utils.debugger.tracepointdebug.probe.event.trace_point_rate_limit_event",
        "documentation": {}
    },
    {
        "label": "TracePointSnapshotEvent",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.event.trace_point_snapshot_event",
        "description": "utils.debugger.tracepointdebug.probe.event.trace_point_snapshot_event",
        "peekOfCode": "class TracePointSnapshotEvent(BaseEvent):\n    EVENT_NAME = \"TracePointSnapshotEvent\"\n    def __init__(\n        self,\n        tracepoint_id,\n        file,\n        line_no,\n        method_name,\n        frames,\n        trace_id=None,",
        "detail": "utils.debugger.tracepointdebug.probe.event.trace_point_snapshot_event",
        "documentation": {}
    },
    {
        "label": "TracePointSnapshotFailedEvent",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.event.tracepoint_snapshot_failed_event",
        "description": "utils.debugger.tracepointdebug.probe.event.tracepoint_snapshot_failed_event",
        "peekOfCode": "class TracePointSnapshotFailedEvent(BaseEvent):\n    EVENT_NAME = \"TracePointSnapshotFailedEvent\"\n    def __init__(self, file, line_no, error_code, error_message):\n        super(TracePointSnapshotFailedEvent, self).__init__()\n        self.file = file\n        self.line_no = line_no\n        self.error_code = error_code\n        self.error_message = error_message\n    def to_json(self):\n        return {",
        "detail": "utils.debugger.tracepointdebug.probe.event.tracepoint_snapshot_failed_event",
        "documentation": {}
    },
    {
        "label": "DisableLogPointRequestHandler",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.handler.request.logPoint.disable_log_point_request_handler",
        "description": "utils.debugger.tracepointdebug.probe.handler.request.logPoint.disable_log_point_request_handler",
        "peekOfCode": "class DisableLogPointRequestHandler(RequestHandler):\n    REQUEST_NAME = \"DisableLogPointRequest\"\n    @staticmethod\n    def get_request_name():\n        return DisableLogPointRequestHandler.REQUEST_NAME\n    @staticmethod\n    def get_request_cls():\n        return DisableLogPointRequest\n    @staticmethod\n    def handle_request(request):",
        "detail": "utils.debugger.tracepointdebug.probe.handler.request.logPoint.disable_log_point_request_handler",
        "documentation": {}
    },
    {
        "label": "EnableLogPointRequestHandler",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.handler.request.logPoint.enable_log_point_request_handler",
        "description": "utils.debugger.tracepointdebug.probe.handler.request.logPoint.enable_log_point_request_handler",
        "peekOfCode": "class EnableLogPointRequestHandler(RequestHandler):\n    REQUEST_NAME = \"EnableLogPointRequest\"\n    @staticmethod\n    def get_request_name():\n        return EnableLogPointRequestHandler.REQUEST_NAME\n    @staticmethod\n    def get_request_cls():\n        return EnableLogPointRequest\n    @staticmethod\n    def handle_request(request):",
        "detail": "utils.debugger.tracepointdebug.probe.handler.request.logPoint.enable_log_point_request_handler",
        "documentation": {}
    },
    {
        "label": "PutLogPointRequestHandler",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.handler.request.logPoint.put_log_point_request_handler",
        "description": "utils.debugger.tracepointdebug.probe.handler.request.logPoint.put_log_point_request_handler",
        "peekOfCode": "class PutLogPointRequestHandler(RequestHandler):\n    REQUEST_NAME = \"PutLogPointRequest\"\n    @staticmethod\n    def get_request_name():\n        return PutLogPointRequestHandler.REQUEST_NAME\n    @staticmethod\n    def get_request_cls():\n        return PutLogPointRequest\n    @staticmethod\n    def handle_request(request):",
        "detail": "utils.debugger.tracepointdebug.probe.handler.request.logPoint.put_log_point_request_handler",
        "documentation": {}
    },
    {
        "label": "RemoveLogPointRequestHandler",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.handler.request.logPoint.remove_log_point_request_handler",
        "description": "utils.debugger.tracepointdebug.probe.handler.request.logPoint.remove_log_point_request_handler",
        "peekOfCode": "class RemoveLogPointRequestHandler(RequestHandler):\n    REQUEST_NAME = \"RemoveLogPointRequest\"\n    @staticmethod\n    def get_request_name():\n        return RemoveLogPointRequestHandler.REQUEST_NAME\n    @staticmethod\n    def get_request_cls():\n        return RemoveLogPointRequest\n    @staticmethod\n    def handle_request(request):",
        "detail": "utils.debugger.tracepointdebug.probe.handler.request.logPoint.remove_log_point_request_handler",
        "documentation": {}
    },
    {
        "label": "UpdateLogPointRequestHandler",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.handler.request.logPoint.update_log_point_request_handler",
        "description": "utils.debugger.tracepointdebug.probe.handler.request.logPoint.update_log_point_request_handler",
        "peekOfCode": "class UpdateLogPointRequestHandler(RequestHandler):\n    REQUEST_NAME = \"UpdateLogPointRequest\"\n    @staticmethod\n    def get_request_name():\n        return UpdateLogPointRequestHandler.REQUEST_NAME\n    @staticmethod\n    def get_request_cls():\n        return UpdateLogPointRequest\n    @staticmethod\n    def handle_request(request):",
        "detail": "utils.debugger.tracepointdebug.probe.handler.request.logPoint.update_log_point_request_handler",
        "documentation": {}
    },
    {
        "label": "DisableTracePointRequestHandler",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.handler.request.disable_trace_point_request_handler",
        "description": "utils.debugger.tracepointdebug.probe.handler.request.disable_trace_point_request_handler",
        "peekOfCode": "class DisableTracePointRequestHandler(RequestHandler):\n    REQUEST_NAME = \"DisableTracePointRequest\"\n    @staticmethod\n    def get_request_name():\n        return DisableTracePointRequestHandler.REQUEST_NAME\n    @staticmethod\n    def get_request_cls():\n        return DisableTracePointRequest\n    @staticmethod\n    def handle_request(request):",
        "detail": "utils.debugger.tracepointdebug.probe.handler.request.disable_trace_point_request_handler",
        "documentation": {}
    },
    {
        "label": "EnableTracePointRequestHandler",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.handler.request.enable_trace_point_request_handler",
        "description": "utils.debugger.tracepointdebug.probe.handler.request.enable_trace_point_request_handler",
        "peekOfCode": "class EnableTracePointRequestHandler(RequestHandler):\n    REQUEST_NAME = \"EnableTracePointRequest\"\n    @staticmethod\n    def get_request_name():\n        return EnableTracePointRequestHandler.REQUEST_NAME\n    @staticmethod\n    def get_request_cls():\n        return EnableTracePointRequest\n    @staticmethod\n    def handle_request(request):",
        "detail": "utils.debugger.tracepointdebug.probe.handler.request.enable_trace_point_request_handler",
        "documentation": {}
    },
    {
        "label": "PutTracePointRequestHandler",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.handler.request.put_trace_point_request_handler",
        "description": "utils.debugger.tracepointdebug.probe.handler.request.put_trace_point_request_handler",
        "peekOfCode": "class PutTracePointRequestHandler(RequestHandler):\n    REQUEST_NAME = \"PutTracePointRequest\"\n    @staticmethod\n    def get_request_name():\n        return PutTracePointRequestHandler.REQUEST_NAME\n    @staticmethod\n    def get_request_cls():\n        return PutTracePointRequest\n    @staticmethod\n    def handle_request(request):",
        "detail": "utils.debugger.tracepointdebug.probe.handler.request.put_trace_point_request_handler",
        "documentation": {}
    },
    {
        "label": "RemoveTracePointRequestHandler",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.handler.request.remove_trace_point_request_handler",
        "description": "utils.debugger.tracepointdebug.probe.handler.request.remove_trace_point_request_handler",
        "peekOfCode": "class RemoveTracePointRequestHandler(RequestHandler):\n    REQUEST_NAME = \"RemoveTracePointRequest\"\n    @staticmethod\n    def get_request_name():\n        return RemoveTracePointRequestHandler.REQUEST_NAME\n    @staticmethod\n    def get_request_cls():\n        return RemoveTracePointRequest\n    @staticmethod\n    def handle_request(request):",
        "detail": "utils.debugger.tracepointdebug.probe.handler.request.remove_trace_point_request_handler",
        "documentation": {}
    },
    {
        "label": "UpdateTracePointRequestHandler",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.handler.request.update_trace_point_request_handler",
        "description": "utils.debugger.tracepointdebug.probe.handler.request.update_trace_point_request_handler",
        "peekOfCode": "class UpdateTracePointRequestHandler(RequestHandler):\n    REQUEST_NAME = \"UpdateTracePointRequest\"\n    @staticmethod\n    def get_request_name():\n        return UpdateTracePointRequestHandler.REQUEST_NAME\n    @staticmethod\n    def get_request_cls():\n        return UpdateTracePointRequest\n    @staticmethod\n    def handle_request(request):",
        "detail": "utils.debugger.tracepointdebug.probe.handler.request.update_trace_point_request_handler",
        "documentation": {}
    },
    {
        "label": "FilterLogPointsResponseHandler",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.handler.response.filter_logpoints_response_handler",
        "description": "utils.debugger.tracepointdebug.probe.handler.response.filter_logpoints_response_handler",
        "peekOfCode": "class FilterLogPointsResponseHandler(ResponseHandler):\n    RESPONSE_NAME = \"FilterLogPointsResponse\"\n    @staticmethod\n    def get_response_name():\n        return FilterLogPointsResponseHandler.RESPONSE_NAME\n    @staticmethod\n    def get_response_cls():\n        return FilterLogPointsResponse\n    @staticmethod\n    def handle_response(response):",
        "detail": "utils.debugger.tracepointdebug.probe.handler.response.filter_logpoints_response_handler",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.handler.response.filter_logpoints_response_handler",
        "description": "utils.debugger.tracepointdebug.probe.handler.response.filter_logpoints_response_handler",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef _applyLogPoint(log_point):\n    try:\n        validate_file_name_and_line_no(\n            log_point.get(\"fileName\"), log_point.get(\"lineNo\")\n        )\n        condition = log_point.get(\"condition\", None)\n        client = log_point.get(\"client\", None)\n        file_name = log_point.get(\"fileName\", None)\n        log_expression = log_point.get(\"logExpression\", \"\")",
        "detail": "utils.debugger.tracepointdebug.probe.handler.response.filter_logpoints_response_handler",
        "documentation": {}
    },
    {
        "label": "FilterTracePointsResponseHandler",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.handler.response.filter_tracepoints_response_handler",
        "description": "utils.debugger.tracepointdebug.probe.handler.response.filter_tracepoints_response_handler",
        "peekOfCode": "class FilterTracePointsResponseHandler(ResponseHandler):\n    RESPONSE_NAME = \"FilterTracePointsResponse\"\n    @staticmethod\n    def get_response_name():\n        return FilterTracePointsResponseHandler.RESPONSE_NAME\n    @staticmethod\n    def get_response_cls():\n        return FilterTracePointsResponse\n    @staticmethod\n    def handle_response(response):",
        "detail": "utils.debugger.tracepointdebug.probe.handler.response.filter_tracepoints_response_handler",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.handler.response.filter_tracepoints_response_handler",
        "description": "utils.debugger.tracepointdebug.probe.handler.response.filter_tracepoints_response_handler",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef _applyTracePoint(trace_point):\n    try:\n        validate_file_name_and_line_no(\n            trace_point.get(\"fileName\"), trace_point.get(\"lineNo\")\n        )\n        condition = trace_point.get(\"condition\", None)\n        client = trace_point.get(\"client\", None)\n        file_name = trace_point.get(\"fileName\", None)\n        trace_point_manager = TracePointManager.instance()",
        "detail": "utils.debugger.tracepointdebug.probe.handler.response.filter_tracepoints_response_handler",
        "documentation": {}
    },
    {
        "label": "RateLimitResult",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limit_result",
        "description": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limit_result",
        "peekOfCode": "class RateLimitResult(Enum):\n    OK = \"OK\"\n    HIT = \"HIT\"\n    EXCEEDED = \"EXCEEDED\"",
        "detail": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limit_result",
        "documentation": {}
    },
    {
        "label": "RateLimitInfo",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "description": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "peekOfCode": "class RateLimitInfo(object):\n    def __init__(self, minute):\n        self._lock = Lock()\n        self.minute = minute\n        self.count = 0\n    def increment_and_get(self):\n        with self._lock:\n            self.count += 1\n            count = self.count\n        return count",
        "detail": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "documentation": {}
    },
    {
        "label": "RateLimiter",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "description": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "peekOfCode": "class RateLimiter(object):\n    def __init__(self):\n        self._lock = Lock()\n        self.rate_limit_infos = [None] * RATE_LIMIT_WINDOW\n    def check_rate_limit(self, current_time):\n        current_min = int(current_time / SECONDS_IN_MINUTE)\n        rate_limit_info_idx = current_min & RATE_LIMIT_IDX_MASK\n        with self._lock:\n            rate_limit_info = self.rate_limit_infos[rate_limit_info_idx]\n            if rate_limit_info is None or rate_limit_info.minute < current_min:",
        "detail": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "documentation": {}
    },
    {
        "label": "SECONDS_IN_MINUTE",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "description": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "peekOfCode": "SECONDS_IN_MINUTE = 60\nRATE_LIMIT_WINDOW = 4\nRATE_LIMIT_IDX_MASK = RATE_LIMIT_WINDOW - 1\nLIMIT_IN_MINUTE = 1000\nclass RateLimitInfo(object):\n    def __init__(self, minute):\n        self._lock = Lock()\n        self.minute = minute\n        self.count = 0\n    def increment_and_get(self):",
        "detail": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "documentation": {}
    },
    {
        "label": "RATE_LIMIT_WINDOW",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "description": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "peekOfCode": "RATE_LIMIT_WINDOW = 4\nRATE_LIMIT_IDX_MASK = RATE_LIMIT_WINDOW - 1\nLIMIT_IN_MINUTE = 1000\nclass RateLimitInfo(object):\n    def __init__(self, minute):\n        self._lock = Lock()\n        self.minute = minute\n        self.count = 0\n    def increment_and_get(self):\n        with self._lock:",
        "detail": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "documentation": {}
    },
    {
        "label": "RATE_LIMIT_IDX_MASK",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "description": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "peekOfCode": "RATE_LIMIT_IDX_MASK = RATE_LIMIT_WINDOW - 1\nLIMIT_IN_MINUTE = 1000\nclass RateLimitInfo(object):\n    def __init__(self, minute):\n        self._lock = Lock()\n        self.minute = minute\n        self.count = 0\n    def increment_and_get(self):\n        with self._lock:\n            self.count += 1",
        "detail": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "documentation": {}
    },
    {
        "label": "LIMIT_IN_MINUTE",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "description": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "peekOfCode": "LIMIT_IN_MINUTE = 1000\nclass RateLimitInfo(object):\n    def __init__(self, minute):\n        self._lock = Lock()\n        self.minute = minute\n        self.count = 0\n    def increment_and_get(self):\n        with self._lock:\n            self.count += 1\n            count = self.count",
        "detail": "utils.debugger.tracepointdebug.probe.ratelimit.rate_limiter",
        "documentation": {}
    },
    {
        "label": "DisableLogPointRequest",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.request.logPoint.disable_log_point_request",
        "description": "utils.debugger.tracepointdebug.probe.request.logPoint.disable_log_point_request",
        "peekOfCode": "class DisableLogPointRequest(BaseRequest):\n    def __init__(self, request):\n        super(DisableLogPointRequest, self).__init__(\n            id=request.get(\"id\"), client=request.get(\"client\")\n        )\n        self.log_point_id = request.get(\"logPointId\")\n    def get_id(self):\n        return self.id\n    def get_log_point_id(self):\n        return self.log_point_id",
        "detail": "utils.debugger.tracepointdebug.probe.request.logPoint.disable_log_point_request",
        "documentation": {}
    },
    {
        "label": "EnableLogPointRequest",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.request.logPoint.enable_log_point_request",
        "description": "utils.debugger.tracepointdebug.probe.request.logPoint.enable_log_point_request",
        "peekOfCode": "class EnableLogPointRequest(BaseRequest):\n    def __init__(self, request):\n        super(EnableLogPointRequest, self).__init__(\n            id=request.get(\"id\"), client=request.get(\"client\")\n        )\n        self.log_point_id = request.get(\"logPointId\")\n    def get_id(self):\n        return self.id\n    def get_log_point_id(self):\n        return self.log_point_id",
        "detail": "utils.debugger.tracepointdebug.probe.request.logPoint.enable_log_point_request",
        "documentation": {}
    },
    {
        "label": "PutLogPointRequest",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.request.logPoint.put_log_point_request",
        "description": "utils.debugger.tracepointdebug.probe.request.logPoint.put_log_point_request",
        "peekOfCode": "class PutLogPointRequest(BaseRequest):\n    def __init__(self, request):\n        super(PutLogPointRequest, self).__init__(\n            id=request.get(\"id\"), client=request.get(\"client\")\n        )\n        self.log_point_id = request.get(\"logPointId\")\n        self.file = request.get(\"fileName\", None)\n        self.file_hash = request.get(\"fileHash\")\n        self.line_no = request.get(\"lineNo\", -1)\n        self.condition = request.get(\"conditionExpression\")",
        "detail": "utils.debugger.tracepointdebug.probe.request.logPoint.put_log_point_request",
        "documentation": {}
    },
    {
        "label": "RemoveLogPointRequest",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.request.logPoint.remove_log_point_request",
        "description": "utils.debugger.tracepointdebug.probe.request.logPoint.remove_log_point_request",
        "peekOfCode": "class RemoveLogPointRequest(BaseRequest):\n    def __init__(self, request):\n        super(RemoveLogPointRequest, self).__init__(\n            id=request.get(\"id\"), client=request.get(\"client\")\n        )\n        self.log_point_id = request.get(\"logPointId\")\n    def get_id(self):\n        return self.id\n    def get_log_point_id(self):\n        return self.log_point_id",
        "detail": "utils.debugger.tracepointdebug.probe.request.logPoint.remove_log_point_request",
        "documentation": {}
    },
    {
        "label": "UpdateLogPointRequest",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.request.logPoint.update_log_point_request",
        "description": "utils.debugger.tracepointdebug.probe.request.logPoint.update_log_point_request",
        "peekOfCode": "class UpdateLogPointRequest(BaseRequest):\n    def __init__(self, request):\n        super(UpdateLogPointRequest, self).__init__(\n            id=request.get(\"id\"), client=request.get(\"client\")\n        )\n        self.log_point_id = request.get(\"logPointId\")\n        self.log_expression = request.get(\"logExpression\")\n        self.condition = request.get(\"conditionExpression\")\n        self.disable = request.get(\"disable\")\n        self.expire_secs = min(",
        "detail": "utils.debugger.tracepointdebug.probe.request.logPoint.update_log_point_request",
        "documentation": {}
    },
    {
        "label": "DisableTracePointRequest",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.request.disable_trace_point_request",
        "description": "utils.debugger.tracepointdebug.probe.request.disable_trace_point_request",
        "peekOfCode": "class DisableTracePointRequest(BaseRequest):\n    def __init__(self, request):\n        super(DisableTracePointRequest, self).__init__(\n            id=request.get(\"id\"), client=request.get(\"client\")\n        )\n        self.trace_point_id = request.get(\"tracePointId\")\n    def get_id(self):\n        return self.id\n    def get_trace_point_id(self):\n        return self.trace_point_id",
        "detail": "utils.debugger.tracepointdebug.probe.request.disable_trace_point_request",
        "documentation": {}
    },
    {
        "label": "EnableTracePointRequest",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.request.enable_trace_point_request",
        "description": "utils.debugger.tracepointdebug.probe.request.enable_trace_point_request",
        "peekOfCode": "class EnableTracePointRequest(BaseRequest):\n    def __init__(self, request):\n        super(EnableTracePointRequest, self).__init__(\n            id=request.get(\"id\"), client=request.get(\"client\")\n        )\n        self.trace_point_id = request.get(\"tracePointId\")\n    def get_id(self):\n        return self.id\n    def get_trace_point_id(self):\n        return self.trace_point_id",
        "detail": "utils.debugger.tracepointdebug.probe.request.enable_trace_point_request",
        "documentation": {}
    },
    {
        "label": "PutTracePointRequest",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.request.put_trace_point_request",
        "description": "utils.debugger.tracepointdebug.probe.request.put_trace_point_request",
        "peekOfCode": "class PutTracePointRequest(BaseRequest):\n    def __init__(self, request):\n        super(PutTracePointRequest, self).__init__(\n            id=request.get(\"id\"), client=request.get(\"client\")\n        )\n        self.trace_point_id = request.get(\"tracePointId\")\n        self.file = request.get(\"fileName\", None)\n        self.file_hash = request.get(\"fileHash\")\n        self.line_no = request.get(\"lineNo\", -1)\n        self.enable_tracing = request.get(\"enableTracing\")",
        "detail": "utils.debugger.tracepointdebug.probe.request.put_trace_point_request",
        "documentation": {}
    },
    {
        "label": "RemoveTracePointRequest",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.request.remove_trace_point_request",
        "description": "utils.debugger.tracepointdebug.probe.request.remove_trace_point_request",
        "peekOfCode": "class RemoveTracePointRequest(BaseRequest):\n    def __init__(self, request):\n        super(RemoveTracePointRequest, self).__init__(\n            id=request.get(\"id\"), client=request.get(\"client\")\n        )\n        self.trace_point_id = request.get(\"tracePointId\")\n    def get_id(self):\n        return self.id\n    def get_trace_point_id(self):\n        return self.trace_point_id",
        "detail": "utils.debugger.tracepointdebug.probe.request.remove_trace_point_request",
        "documentation": {}
    },
    {
        "label": "UpdateTracePointRequest",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.request.update_trace_point_request",
        "description": "utils.debugger.tracepointdebug.probe.request.update_trace_point_request",
        "peekOfCode": "class UpdateTracePointRequest(BaseRequest):\n    def __init__(self, request):\n        super(UpdateTracePointRequest, self).__init__(\n            id=request.get(\"id\"), client=request.get(\"client\")\n        )\n        self.trace_point_id = request.get(\"tracePointId\")\n        self.enable_tracing = request.get(\"enableTracing\")\n        self.condition = request.get(\"conditionExpression\")\n        self.disable = request.get(\"disable\")\n        self.expire_secs = min(",
        "detail": "utils.debugger.tracepointdebug.probe.request.update_trace_point_request",
        "documentation": {}
    },
    {
        "label": "DisableLogPointResponse",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.response.logPoint.disable_log_point_response",
        "description": "utils.debugger.tracepointdebug.probe.response.logPoint.disable_log_point_response",
        "peekOfCode": "class DisableLogPointResponse(BaseResponse):\n    def __init__(\n        self,\n        request_id=None,\n        client=None,\n        application_instance_id=None,\n        erroneous=False,\n        error_code=None,\n        error_type=None,\n        error_message=None,",
        "detail": "utils.debugger.tracepointdebug.probe.response.logPoint.disable_log_point_response",
        "documentation": {}
    },
    {
        "label": "EnableLogPointResponse",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.response.logPoint.enable_log_point_response",
        "description": "utils.debugger.tracepointdebug.probe.response.logPoint.enable_log_point_response",
        "peekOfCode": "class EnableLogPointResponse(BaseResponse):\n    def __init__(\n        self,\n        request_id=None,\n        client=None,\n        application_instance_id=None,\n        erroneous=False,\n        error_code=None,\n        error_type=None,\n        error_message=None,",
        "detail": "utils.debugger.tracepointdebug.probe.response.logPoint.enable_log_point_response",
        "documentation": {}
    },
    {
        "label": "FilterLogPointsResponse",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.response.logPoint.filter_logpoints_response",
        "description": "utils.debugger.tracepointdebug.probe.response.logPoint.filter_logpoints_response",
        "peekOfCode": "class FilterLogPointsResponse(BaseResponse):\n    def __init__(\n        self,\n        logPoints=None,\n        requestId=None,\n        source=None,\n        applicationInstanceId=None,\n        erroneous=False,\n        errorCode=None,\n        errorType=None,",
        "detail": "utils.debugger.tracepointdebug.probe.response.logPoint.filter_logpoints_response",
        "documentation": {}
    },
    {
        "label": "PutLogPointResponse",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.response.logPoint.put_log_point_response",
        "description": "utils.debugger.tracepointdebug.probe.response.logPoint.put_log_point_response",
        "peekOfCode": "class PutLogPointResponse(BaseResponse):\n    def __init__(\n        self,\n        request_id=None,\n        client=None,\n        application_instance_id=None,\n        erroneous=False,\n        error_code=None,\n        error_type=None,\n        error_message=None,",
        "detail": "utils.debugger.tracepointdebug.probe.response.logPoint.put_log_point_response",
        "documentation": {}
    },
    {
        "label": "RemoveLogPointResponse",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.response.logPoint.remove_log_point_response",
        "description": "utils.debugger.tracepointdebug.probe.response.logPoint.remove_log_point_response",
        "peekOfCode": "class RemoveLogPointResponse(BaseResponse):\n    def __init__(\n        self,\n        request_id=None,\n        client=None,\n        application_instance_id=None,\n        erroneous=False,\n        error_code=None,\n        error_type=None,\n        error_message=None,",
        "detail": "utils.debugger.tracepointdebug.probe.response.logPoint.remove_log_point_response",
        "documentation": {}
    },
    {
        "label": "UpdateLogPointResponse",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.response.logPoint.update_log_point_response",
        "description": "utils.debugger.tracepointdebug.probe.response.logPoint.update_log_point_response",
        "peekOfCode": "class UpdateLogPointResponse(BaseResponse):\n    def __init__(\n        self,\n        request_id=None,\n        client=None,\n        application_instance_id=None,\n        erroneous=False,\n        error_code=None,\n        error_type=None,\n        error_message=None,",
        "detail": "utils.debugger.tracepointdebug.probe.response.logPoint.update_log_point_response",
        "documentation": {}
    },
    {
        "label": "DisableTracePointResponse",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.response.disable_trace_point_response",
        "description": "utils.debugger.tracepointdebug.probe.response.disable_trace_point_response",
        "peekOfCode": "class DisableTracePointResponse(BaseResponse):\n    def __init__(\n        self,\n        request_id=None,\n        client=None,\n        application_instance_id=None,\n        erroneous=False,\n        error_code=None,\n        error_type=None,\n        error_message=None,",
        "detail": "utils.debugger.tracepointdebug.probe.response.disable_trace_point_response",
        "documentation": {}
    },
    {
        "label": "EnableTracePointResponse",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.response.enable_trace_point_response",
        "description": "utils.debugger.tracepointdebug.probe.response.enable_trace_point_response",
        "peekOfCode": "class EnableTracePointResponse(BaseResponse):\n    def __init__(\n        self,\n        request_id=None,\n        client=None,\n        application_instance_id=None,\n        erroneous=False,\n        error_code=None,\n        error_type=None,\n        error_message=None,",
        "detail": "utils.debugger.tracepointdebug.probe.response.enable_trace_point_response",
        "documentation": {}
    },
    {
        "label": "FilterTracePointsResponse",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.response.filter_tracepoints_response",
        "description": "utils.debugger.tracepointdebug.probe.response.filter_tracepoints_response",
        "peekOfCode": "class FilterTracePointsResponse(BaseResponse):\n    def __init__(\n        self,\n        tracePoints=None,\n        requestId=None,\n        source=None,\n        applicationInstanceId=None,\n        erroneous=False,\n        errorCode=None,\n        errorType=None,",
        "detail": "utils.debugger.tracepointdebug.probe.response.filter_tracepoints_response",
        "documentation": {}
    },
    {
        "label": "PutTracePointResponse",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.response.put_trace_point_response",
        "description": "utils.debugger.tracepointdebug.probe.response.put_trace_point_response",
        "peekOfCode": "class PutTracePointResponse(BaseResponse):\n    def __init__(\n        self,\n        request_id=None,\n        client=None,\n        application_instance_id=None,\n        erroneous=False,\n        error_code=None,\n        error_type=None,\n        error_message=None,",
        "detail": "utils.debugger.tracepointdebug.probe.response.put_trace_point_response",
        "documentation": {}
    },
    {
        "label": "RemoveTracePointResponse",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.response.remove_trace_point_response",
        "description": "utils.debugger.tracepointdebug.probe.response.remove_trace_point_response",
        "peekOfCode": "class RemoveTracePointResponse(BaseResponse):\n    def __init__(\n        self,\n        request_id=None,\n        client=None,\n        application_instance_id=None,\n        erroneous=False,\n        error_code=None,\n        error_type=None,\n        error_message=None,",
        "detail": "utils.debugger.tracepointdebug.probe.response.remove_trace_point_response",
        "documentation": {}
    },
    {
        "label": "UpdateTracePointResponse",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.response.update_trace_point_response",
        "description": "utils.debugger.tracepointdebug.probe.response.update_trace_point_response",
        "peekOfCode": "class UpdateTracePointResponse(BaseResponse):\n    def __init__(\n        self,\n        request_id=None,\n        client=None,\n        application_instance_id=None,\n        erroneous=False,\n        error_code=None,\n        error_type=None,\n        error_message=None,",
        "detail": "utils.debugger.tracepointdebug.probe.response.update_trace_point_response",
        "documentation": {}
    },
    {
        "label": "CodedError",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.coded_error",
        "description": "utils.debugger.tracepointdebug.probe.coded_error",
        "peekOfCode": "class CodedError:\n    def __init__(self, code, msg_template):\n        self.code = code\n        self.msg_template = msg_template\n    def format_message(self, args):\n        return self.msg_template.format(*args)",
        "detail": "utils.debugger.tracepointdebug.probe.coded_error",
        "documentation": {}
    },
    {
        "label": "CodedException",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.coded_exception",
        "description": "utils.debugger.tracepointdebug.probe.coded_exception",
        "peekOfCode": "class CodedException(Exception):\n    def __init__(self, coded_error, args):\n        super(CodedException, self).__init__(coded_error.format_message(args))\n        self.code = coded_error.code",
        "detail": "utils.debugger.tracepointdebug.probe.coded_exception",
        "documentation": {}
    },
    {
        "label": "TRACEPOINT_DEFAULT_EXPIRY_SECS",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.constants",
        "description": "utils.debugger.tracepointdebug.probe.constants",
        "peekOfCode": "TRACEPOINT_DEFAULT_EXPIRY_SECS = 1800\nTRACEPOINT_DEFAULT_EXPIRY_COUNT = 50\nTRACEPOINT_MAX_EXPIRY_SECS = 86400\nTRACEPOINT_MAX_EXPIRY_COUNT = 1000\nLOGPOINT_DEFAULT_EXPIRY_SECS = 1800\nLOGPOINT_DEFAULT_EXPIRY_COUNT = 50\nLOGPOINT_MAX_EXPIRY_SECS = 86400\nLOGPOINT_MAX_EXPIRY_COUNT = 1000",
        "detail": "utils.debugger.tracepointdebug.probe.constants",
        "documentation": {}
    },
    {
        "label": "TRACEPOINT_DEFAULT_EXPIRY_COUNT",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.constants",
        "description": "utils.debugger.tracepointdebug.probe.constants",
        "peekOfCode": "TRACEPOINT_DEFAULT_EXPIRY_COUNT = 50\nTRACEPOINT_MAX_EXPIRY_SECS = 86400\nTRACEPOINT_MAX_EXPIRY_COUNT = 1000\nLOGPOINT_DEFAULT_EXPIRY_SECS = 1800\nLOGPOINT_DEFAULT_EXPIRY_COUNT = 50\nLOGPOINT_MAX_EXPIRY_SECS = 86400\nLOGPOINT_MAX_EXPIRY_COUNT = 1000",
        "detail": "utils.debugger.tracepointdebug.probe.constants",
        "documentation": {}
    },
    {
        "label": "TRACEPOINT_MAX_EXPIRY_SECS",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.constants",
        "description": "utils.debugger.tracepointdebug.probe.constants",
        "peekOfCode": "TRACEPOINT_MAX_EXPIRY_SECS = 86400\nTRACEPOINT_MAX_EXPIRY_COUNT = 1000\nLOGPOINT_DEFAULT_EXPIRY_SECS = 1800\nLOGPOINT_DEFAULT_EXPIRY_COUNT = 50\nLOGPOINT_MAX_EXPIRY_SECS = 86400\nLOGPOINT_MAX_EXPIRY_COUNT = 1000",
        "detail": "utils.debugger.tracepointdebug.probe.constants",
        "documentation": {}
    },
    {
        "label": "TRACEPOINT_MAX_EXPIRY_COUNT",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.constants",
        "description": "utils.debugger.tracepointdebug.probe.constants",
        "peekOfCode": "TRACEPOINT_MAX_EXPIRY_COUNT = 1000\nLOGPOINT_DEFAULT_EXPIRY_SECS = 1800\nLOGPOINT_DEFAULT_EXPIRY_COUNT = 50\nLOGPOINT_MAX_EXPIRY_SECS = 86400\nLOGPOINT_MAX_EXPIRY_COUNT = 1000",
        "detail": "utils.debugger.tracepointdebug.probe.constants",
        "documentation": {}
    },
    {
        "label": "LOGPOINT_DEFAULT_EXPIRY_SECS",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.constants",
        "description": "utils.debugger.tracepointdebug.probe.constants",
        "peekOfCode": "LOGPOINT_DEFAULT_EXPIRY_SECS = 1800\nLOGPOINT_DEFAULT_EXPIRY_COUNT = 50\nLOGPOINT_MAX_EXPIRY_SECS = 86400\nLOGPOINT_MAX_EXPIRY_COUNT = 1000",
        "detail": "utils.debugger.tracepointdebug.probe.constants",
        "documentation": {}
    },
    {
        "label": "LOGPOINT_DEFAULT_EXPIRY_COUNT",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.constants",
        "description": "utils.debugger.tracepointdebug.probe.constants",
        "peekOfCode": "LOGPOINT_DEFAULT_EXPIRY_COUNT = 50\nLOGPOINT_MAX_EXPIRY_SECS = 86400\nLOGPOINT_MAX_EXPIRY_COUNT = 1000",
        "detail": "utils.debugger.tracepointdebug.probe.constants",
        "documentation": {}
    },
    {
        "label": "LOGPOINT_MAX_EXPIRY_SECS",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.constants",
        "description": "utils.debugger.tracepointdebug.probe.constants",
        "peekOfCode": "LOGPOINT_MAX_EXPIRY_SECS = 86400\nLOGPOINT_MAX_EXPIRY_COUNT = 1000",
        "detail": "utils.debugger.tracepointdebug.probe.constants",
        "documentation": {}
    },
    {
        "label": "LOGPOINT_MAX_EXPIRY_COUNT",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.constants",
        "description": "utils.debugger.tracepointdebug.probe.constants",
        "peekOfCode": "LOGPOINT_MAX_EXPIRY_COUNT = 1000",
        "detail": "utils.debugger.tracepointdebug.probe.constants",
        "documentation": {}
    },
    {
        "label": "JSONEncoder",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.encoder",
        "description": "utils.debugger.tracepointdebug.probe.encoder",
        "peekOfCode": "class JSONEncoder(json.JSONEncoder):\n    def default(self, z):\n        try:\n            if \"to_json\" in dir(z):\n                return z.to_json()\n            elif isinstance(z, bytes):\n                return z.decode(\"utf-8\", errors=\"ignore\")\n            else:\n                return super(JSONEncoder, self).default(z)\n        except Exception as e:",
        "detail": "utils.debugger.tracepointdebug.probe.encoder",
        "documentation": {}
    },
    {
        "label": "to_json",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.probe.encoder",
        "description": "utils.debugger.tracepointdebug.probe.encoder",
        "peekOfCode": "def to_json(data, separators=None):\n    return json.dumps(data, separators=separators, cls=JSONEncoder)",
        "detail": "utils.debugger.tracepointdebug.probe.encoder",
        "documentation": {}
    },
    {
        "label": "UNKNOWN",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "UNKNOWN = CodedError(0, \"Unknown\")\nINSTRUMENTATION_IS_NOT_ACTIVE = CodedError(\n    1000,\n    \"Couldn't activate instrumentation support.\"\n    + \" So custom tracepoints is not supported\",\n)\nUNABLE_TO_FIND_MODULE = CodedError(1002, \"Unable to find module\")\nLINE_NO_IS_NOT_AVAILABLE = CodedError(\n    1004, \"Line {} is not available in {} for tracepoint\"\n)",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "INSTRUMENTATION_IS_NOT_ACTIVE",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "INSTRUMENTATION_IS_NOT_ACTIVE = CodedError(\n    1000,\n    \"Couldn't activate instrumentation support.\"\n    + \" So custom tracepoints is not supported\",\n)\nUNABLE_TO_FIND_MODULE = CodedError(1002, \"Unable to find module\")\nLINE_NO_IS_NOT_AVAILABLE = CodedError(\n    1004, \"Line {} is not available in {} for tracepoint\"\n)\nLINE_NO_IS_NOT_AVAILABLE_2 = CodedError(",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "UNABLE_TO_FIND_MODULE",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "UNABLE_TO_FIND_MODULE = CodedError(1002, \"Unable to find module\")\nLINE_NO_IS_NOT_AVAILABLE = CodedError(\n    1004, \"Line {} is not available in {} for tracepoint\"\n)\nLINE_NO_IS_NOT_AVAILABLE_2 = CodedError(\n    1004, \"Line {} is not available in {} for tracepoint. Try line {}\"\n)\nLINE_NO_IS_NOT_AVAILABLE_3 = CodedError(\n    1004, \"Line {} is not available in {} for tracepoint. Try lines {} or {}\"\n)",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "LINE_NO_IS_NOT_AVAILABLE",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "LINE_NO_IS_NOT_AVAILABLE = CodedError(\n    1004, \"Line {} is not available in {} for tracepoint\"\n)\nLINE_NO_IS_NOT_AVAILABLE_2 = CodedError(\n    1004, \"Line {} is not available in {} for tracepoint. Try line {}\"\n)\nLINE_NO_IS_NOT_AVAILABLE_3 = CodedError(\n    1004, \"Line {} is not available in {} for tracepoint. Try lines {} or {}\"\n)\nCONDITION_CHECK_FAILED = CodedError(",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "LINE_NO_IS_NOT_AVAILABLE_2",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "LINE_NO_IS_NOT_AVAILABLE_2 = CodedError(\n    1004, \"Line {} is not available in {} for tracepoint. Try line {}\"\n)\nLINE_NO_IS_NOT_AVAILABLE_3 = CodedError(\n    1004, \"Line {} is not available in {} for tracepoint. Try lines {} or {}\"\n)\nCONDITION_CHECK_FAILED = CodedError(\n    1900, \"Error occurred while checking condition '{}': {}\"\n)\nCONDITION_EXPRESSION_SYNTAX_CHECK_FAILED = CodedError(",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "LINE_NO_IS_NOT_AVAILABLE_3",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "LINE_NO_IS_NOT_AVAILABLE_3 = CodedError(\n    1004, \"Line {} is not available in {} for tracepoint. Try lines {} or {}\"\n)\nCONDITION_CHECK_FAILED = CodedError(\n    1900, \"Error occurred while checking condition '{}': {}\"\n)\nCONDITION_EXPRESSION_SYNTAX_CHECK_FAILED = CodedError(\n    1901, \"Syntax check failed while checking condition '{}': {}\"\n)\nUNABLE_TO_FIND_PROPERTY_FOR_CONDITION = CodedError(",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "CONDITION_CHECK_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "CONDITION_CHECK_FAILED = CodedError(\n    1900, \"Error occurred while checking condition '{}': {}\"\n)\nCONDITION_EXPRESSION_SYNTAX_CHECK_FAILED = CodedError(\n    1901, \"Syntax check failed while checking condition '{}': {}\"\n)\nUNABLE_TO_FIND_PROPERTY_FOR_CONDITION = CodedError(\n    1904, \"Unable to find property over file {} while evaluating condition: {}\"\n)\nTRACEPOINT_ALREADY_EXIST = CodedError(",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "CONDITION_EXPRESSION_SYNTAX_CHECK_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "CONDITION_EXPRESSION_SYNTAX_CHECK_FAILED = CodedError(\n    1901, \"Syntax check failed while checking condition '{}': {}\"\n)\nUNABLE_TO_FIND_PROPERTY_FOR_CONDITION = CodedError(\n    1904, \"Unable to find property over file {} while evaluating condition: {}\"\n)\nTRACEPOINT_ALREADY_EXIST = CodedError(\n    2000, \"Tracepoint has been already added in file {} on line {} from client {}\"\n)\nNO_TRACEPOINT_EXIST = CodedError(",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "UNABLE_TO_FIND_PROPERTY_FOR_CONDITION",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "UNABLE_TO_FIND_PROPERTY_FOR_CONDITION = CodedError(\n    1904, \"Unable to find property over file {} while evaluating condition: {}\"\n)\nTRACEPOINT_ALREADY_EXIST = CodedError(\n    2000, \"Tracepoint has been already added in file {} on line {} from client {}\"\n)\nNO_TRACEPOINT_EXIST = CodedError(\n    2001, \"No tracepoint could be found in file {} on line {} from client {}\"\n)\nFILE_NAME_IS_MANDATORY = CodedError(2002, \"File name is mandatory\")",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "TRACEPOINT_ALREADY_EXIST",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "TRACEPOINT_ALREADY_EXIST = CodedError(\n    2000, \"Tracepoint has been already added in file {} on line {} from client {}\"\n)\nNO_TRACEPOINT_EXIST = CodedError(\n    2001, \"No tracepoint could be found in file {} on line {} from client {}\"\n)\nFILE_NAME_IS_MANDATORY = CodedError(2002, \"File name is mandatory\")\nLINE_NUMBER_IS_MANDATORY = CodedError(2003, \"Line number is mandatory\")\nNO_TRACEPOINT_EXIST_WITH_ID = CodedError(\n    2004, \"No tracepoint could be found with id {} from client {}\"",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "NO_TRACEPOINT_EXIST",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "NO_TRACEPOINT_EXIST = CodedError(\n    2001, \"No tracepoint could be found in file {} on line {} from client {}\"\n)\nFILE_NAME_IS_MANDATORY = CodedError(2002, \"File name is mandatory\")\nLINE_NUMBER_IS_MANDATORY = CodedError(2003, \"Line number is mandatory\")\nNO_TRACEPOINT_EXIST_WITH_ID = CodedError(\n    2004, \"No tracepoint could be found with id {} from client {}\"\n)\nCLIENT_HAS_NO_ACCESS_TO_TRACEPOINT = CodedError(\n    2005, \"Client {} has no access to tracepoint with id {}\"",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "FILE_NAME_IS_MANDATORY",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "FILE_NAME_IS_MANDATORY = CodedError(2002, \"File name is mandatory\")\nLINE_NUMBER_IS_MANDATORY = CodedError(2003, \"Line number is mandatory\")\nNO_TRACEPOINT_EXIST_WITH_ID = CodedError(\n    2004, \"No tracepoint could be found with id {} from client {}\"\n)\nCLIENT_HAS_NO_ACCESS_TO_TRACEPOINT = CodedError(\n    2005, \"Client {} has no access to tracepoint with id {}\"\n)\nPUT_TRACEPOINT_FAILED = CodedError(\n    2050,",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "LINE_NUMBER_IS_MANDATORY",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "LINE_NUMBER_IS_MANDATORY = CodedError(2003, \"Line number is mandatory\")\nNO_TRACEPOINT_EXIST_WITH_ID = CodedError(\n    2004, \"No tracepoint could be found with id {} from client {}\"\n)\nCLIENT_HAS_NO_ACCESS_TO_TRACEPOINT = CodedError(\n    2005, \"Client {} has no access to tracepoint with id {}\"\n)\nPUT_TRACEPOINT_FAILED = CodedError(\n    2050,\n    \"Error occurred while putting tracepoint to file {} on line {} from client {}: {}\",",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "NO_TRACEPOINT_EXIST_WITH_ID",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "NO_TRACEPOINT_EXIST_WITH_ID = CodedError(\n    2004, \"No tracepoint could be found with id {} from client {}\"\n)\nCLIENT_HAS_NO_ACCESS_TO_TRACEPOINT = CodedError(\n    2005, \"Client {} has no access to tracepoint with id {}\"\n)\nPUT_TRACEPOINT_FAILED = CodedError(\n    2050,\n    \"Error occurred while putting tracepoint to file {} on line {} from client {}: {}\",\n)",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "CLIENT_HAS_NO_ACCESS_TO_TRACEPOINT",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "CLIENT_HAS_NO_ACCESS_TO_TRACEPOINT = CodedError(\n    2005, \"Client {} has no access to tracepoint with id {}\"\n)\nPUT_TRACEPOINT_FAILED = CodedError(\n    2050,\n    \"Error occurred while putting tracepoint to file {} on line {} from client {}: {}\",\n)\nSOURCE_CODE_MISMATCH_DETECTED = CodedError(\n    2051,\n    \"Source code mismatch detected while putting {} to file {} on line {} from client {}\",",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "PUT_TRACEPOINT_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "PUT_TRACEPOINT_FAILED = CodedError(\n    2050,\n    \"Error occurred while putting tracepoint to file {} on line {} from client {}: {}\",\n)\nSOURCE_CODE_MISMATCH_DETECTED = CodedError(\n    2051,\n    \"Source code mismatch detected while putting {} to file {} on line {} from client {}\",\n)\nUPDATE_TRACEPOINT_FAILED = CodedError(\n    2100,",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "SOURCE_CODE_MISMATCH_DETECTED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "SOURCE_CODE_MISMATCH_DETECTED = CodedError(\n    2051,\n    \"Source code mismatch detected while putting {} to file {} on line {} from client {}\",\n)\nUPDATE_TRACEPOINT_FAILED = CodedError(\n    2100,\n    \"Error occurred while updating tracepoint to file {} on line {} from client {}: {}\",\n)\nUPDATE_TRACEPOINT_WITH_ID_FAILED = CodedError(\n    2101, \"Error occurred while updating tracepoint with id {} from client {}: {}\"",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "UPDATE_TRACEPOINT_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "UPDATE_TRACEPOINT_FAILED = CodedError(\n    2100,\n    \"Error occurred while updating tracepoint to file {} on line {} from client {}: {}\",\n)\nUPDATE_TRACEPOINT_WITH_ID_FAILED = CodedError(\n    2101, \"Error occurred while updating tracepoint with id {} from client {}: {}\"\n)\nREMOVE_TRACEPOINT_FAILED = CodedError(\n    2150,\n    \"Error occurred while removing tracepoint from file {} on line {} from client {}: {}\",",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "UPDATE_TRACEPOINT_WITH_ID_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "UPDATE_TRACEPOINT_WITH_ID_FAILED = CodedError(\n    2101, \"Error occurred while updating tracepoint with id {} from client {}: {}\"\n)\nREMOVE_TRACEPOINT_FAILED = CodedError(\n    2150,\n    \"Error occurred while removing tracepoint from file {} on line {} from client {}: {}\",\n)\nREMOVE_TRACEPOINT_WITH_ID_FAILED = CodedError(\n    2151, \"Error occurred while removing tracepoint with id {} from client {}: {}\"\n)",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "REMOVE_TRACEPOINT_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "REMOVE_TRACEPOINT_FAILED = CodedError(\n    2150,\n    \"Error occurred while removing tracepoint from file {} on line {} from client {}: {}\",\n)\nREMOVE_TRACEPOINT_WITH_ID_FAILED = CodedError(\n    2151, \"Error occurred while removing tracepoint with id {} from client {}: {}\"\n)\nENABLE_TRACEPOINT_FAILED = CodedError(\n    2200,\n    \"Error occurred while enabling tracepoint to file {} on line {} from client {}: {}\",",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "REMOVE_TRACEPOINT_WITH_ID_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "REMOVE_TRACEPOINT_WITH_ID_FAILED = CodedError(\n    2151, \"Error occurred while removing tracepoint with id {} from client {}: {}\"\n)\nENABLE_TRACEPOINT_FAILED = CodedError(\n    2200,\n    \"Error occurred while enabling tracepoint to file {} on line {} from client {}: {}\",\n)\nENABLE_TRACEPOINT_WITH_ID_FAILED = CodedError(\n    2201, \"Error occurred while enabling tracepoint with id {} from client {}: {}\"\n)",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "ENABLE_TRACEPOINT_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "ENABLE_TRACEPOINT_FAILED = CodedError(\n    2200,\n    \"Error occurred while enabling tracepoint to file {} on line {} from client {}: {}\",\n)\nENABLE_TRACEPOINT_WITH_ID_FAILED = CodedError(\n    2201, \"Error occurred while enabling tracepoint with id {} from client {}: {}\"\n)\nDISABLE_TRACEPOINT_FAILED = CodedError(\n    2250,\n    \"Error occurred while disabling tracepoint to file {} on line {} from client {}: {}\",",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "ENABLE_TRACEPOINT_WITH_ID_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "ENABLE_TRACEPOINT_WITH_ID_FAILED = CodedError(\n    2201, \"Error occurred while enabling tracepoint with id {} from client {}: {}\"\n)\nDISABLE_TRACEPOINT_FAILED = CodedError(\n    2250,\n    \"Error occurred while disabling tracepoint to file {} on line {} from client {}: {}\",\n)\nDISABLE_TRACEPOINT_WITH_ID_FAILED = CodedError(\n    2251, \"Error occurred while disabling tracepoint with id {} from client {}: {}\"\n)",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "DISABLE_TRACEPOINT_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "DISABLE_TRACEPOINT_FAILED = CodedError(\n    2250,\n    \"Error occurred while disabling tracepoint to file {} on line {} from client {}: {}\",\n)\nDISABLE_TRACEPOINT_WITH_ID_FAILED = CodedError(\n    2251, \"Error occurred while disabling tracepoint with id {} from client {}: {}\"\n)\n# LOGPOINT ERROR CODES\nLOGPOINT_ALREADY_EXIST = CodedError(\n    3000, \"Logpoint has been already added in file {} on line {} from client {}\"",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "DISABLE_TRACEPOINT_WITH_ID_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "DISABLE_TRACEPOINT_WITH_ID_FAILED = CodedError(\n    2251, \"Error occurred while disabling tracepoint with id {} from client {}: {}\"\n)\n# LOGPOINT ERROR CODES\nLOGPOINT_ALREADY_EXIST = CodedError(\n    3000, \"Logpoint has been already added in file {} on line {} from client {}\"\n)\nNO_LOGPOINT_EXIST = CodedError(\n    3001, \"No logpoint could be found in file {} on line {} from client {}\"\n)",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "LOGPOINT_ALREADY_EXIST",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "LOGPOINT_ALREADY_EXIST = CodedError(\n    3000, \"Logpoint has been already added in file {} on line {} from client {}\"\n)\nNO_LOGPOINT_EXIST = CodedError(\n    3001, \"No logpoint could be found in file {} on line {} from client {}\"\n)\nNO_LOGPOINT_EXIST_WITH_ID = CodedError(\n    3004, \"No logpoint could be found with id {} from client {}\"\n)\nCLIENT_HAS_NO_ACCESS_TO_LOGPOINT = CodedError(",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "NO_LOGPOINT_EXIST",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "NO_LOGPOINT_EXIST = CodedError(\n    3001, \"No logpoint could be found in file {} on line {} from client {}\"\n)\nNO_LOGPOINT_EXIST_WITH_ID = CodedError(\n    3004, \"No logpoint could be found with id {} from client {}\"\n)\nCLIENT_HAS_NO_ACCESS_TO_LOGPOINT = CodedError(\n    3005, \"Client {} has no access to logpoint with id {}\"\n)\nPUT_LOGPOINT_FAILED = CodedError(",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "NO_LOGPOINT_EXIST_WITH_ID",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "NO_LOGPOINT_EXIST_WITH_ID = CodedError(\n    3004, \"No logpoint could be found with id {} from client {}\"\n)\nCLIENT_HAS_NO_ACCESS_TO_LOGPOINT = CodedError(\n    3005, \"Client {} has no access to logpoint with id {}\"\n)\nPUT_LOGPOINT_FAILED = CodedError(\n    3050,\n    \"Error occurred while putting logpoint to file {} on line {} from client {}: {}\",\n)",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "CLIENT_HAS_NO_ACCESS_TO_LOGPOINT",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "CLIENT_HAS_NO_ACCESS_TO_LOGPOINT = CodedError(\n    3005, \"Client {} has no access to logpoint with id {}\"\n)\nPUT_LOGPOINT_FAILED = CodedError(\n    3050,\n    \"Error occurred while putting logpoint to file {} on line {} from client {}: {}\",\n)\nUPDATE_LOGPOINT_FAILED = CodedError(\n    3100,\n    \"Error occurred while updating logpoint to file {} on line {} from client {}: {}\",",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "PUT_LOGPOINT_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "PUT_LOGPOINT_FAILED = CodedError(\n    3050,\n    \"Error occurred while putting logpoint to file {} on line {} from client {}: {}\",\n)\nUPDATE_LOGPOINT_FAILED = CodedError(\n    3100,\n    \"Error occurred while updating logpoint to file {} on line {} from client {}: {}\",\n)\nUPDATE_LOGPOINT_WITH_ID_FAILED = CodedError(\n    3101, \"Error occurred while updating logpoint with id {} from client {}: {}\"",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "UPDATE_LOGPOINT_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "UPDATE_LOGPOINT_FAILED = CodedError(\n    3100,\n    \"Error occurred while updating logpoint to file {} on line {} from client {}: {}\",\n)\nUPDATE_LOGPOINT_WITH_ID_FAILED = CodedError(\n    3101, \"Error occurred while updating logpoint with id {} from client {}: {}\"\n)\nREMOVE_LOGPOINT_FAILED = CodedError(\n    3150,\n    \"Error occurred while removing logpoint from file {} on line {} from client {}: {}\",",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "UPDATE_LOGPOINT_WITH_ID_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "UPDATE_LOGPOINT_WITH_ID_FAILED = CodedError(\n    3101, \"Error occurred while updating logpoint with id {} from client {}: {}\"\n)\nREMOVE_LOGPOINT_FAILED = CodedError(\n    3150,\n    \"Error occurred while removing logpoint from file {} on line {} from client {}: {}\",\n)\nREMOVE_LOGPOINT_WITH_ID_FAILED = CodedError(\n    3151, \"Error occurred while removing logpoint with id {} from client {}: {}\"\n)",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "REMOVE_LOGPOINT_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "REMOVE_LOGPOINT_FAILED = CodedError(\n    3150,\n    \"Error occurred while removing logpoint from file {} on line {} from client {}: {}\",\n)\nREMOVE_LOGPOINT_WITH_ID_FAILED = CodedError(\n    3151, \"Error occurred while removing logpoint with id {} from client {}: {}\"\n)\nENABLE_LOGPOINT_FAILED = CodedError(\n    3200,\n    \"Error occurred while enabling logpoint to file {} on line {} from client {}: {}\",",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "REMOVE_LOGPOINT_WITH_ID_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "REMOVE_LOGPOINT_WITH_ID_FAILED = CodedError(\n    3151, \"Error occurred while removing logpoint with id {} from client {}: {}\"\n)\nENABLE_LOGPOINT_FAILED = CodedError(\n    3200,\n    \"Error occurred while enabling logpoint to file {} on line {} from client {}: {}\",\n)\nENABLE_LOGPOINT_WITH_ID_FAILED = CodedError(\n    3201, \"Error occurred while enabling logpoint with id {} from client {}: {}\"\n)",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "ENABLE_LOGPOINT_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "ENABLE_LOGPOINT_FAILED = CodedError(\n    3200,\n    \"Error occurred while enabling logpoint to file {} on line {} from client {}: {}\",\n)\nENABLE_LOGPOINT_WITH_ID_FAILED = CodedError(\n    3201, \"Error occurred while enabling logpoint with id {} from client {}: {}\"\n)\nDISABLE_LOGPOINT_FAILED = CodedError(\n    3250,\n    \"Error occurred while disabling logpoint to file {} on line {} from client {}: {}\",",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "ENABLE_LOGPOINT_WITH_ID_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "ENABLE_LOGPOINT_WITH_ID_FAILED = CodedError(\n    3201, \"Error occurred while enabling logpoint with id {} from client {}: {}\"\n)\nDISABLE_LOGPOINT_FAILED = CodedError(\n    3250,\n    \"Error occurred while disabling logpoint to file {} on line {} from client {}: {}\",\n)\nDISABLE_LOGPOINT_WITH_ID_FAILED = CodedError(\n    3251, \"Error occurred while disabling logpoint with id {} from client {}: {}\"\n)",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "DISABLE_LOGPOINT_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "DISABLE_LOGPOINT_FAILED = CodedError(\n    3250,\n    \"Error occurred while disabling logpoint to file {} on line {} from client {}: {}\",\n)\nDISABLE_LOGPOINT_WITH_ID_FAILED = CodedError(\n    3251, \"Error occurred while disabling logpoint with id {} from client {}: {}\"\n)",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "DISABLE_LOGPOINT_WITH_ID_FAILED",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.errors",
        "description": "utils.debugger.tracepointdebug.probe.errors",
        "peekOfCode": "DISABLE_LOGPOINT_WITH_ID_FAILED = CodedError(\n    3251, \"Error occurred while disabling logpoint with id {} from client {}: {}\"\n)",
        "detail": "utils.debugger.tracepointdebug.probe.errors",
        "documentation": {}
    },
    {
        "label": "Frame",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.frame",
        "description": "utils.debugger.tracepointdebug.probe.frame",
        "peekOfCode": "class Frame(object):\n    def __init__(self, line_no, variables, path, method_name):\n        self.line_no = line_no\n        self.variables = variables\n        self.path = path\n        self.method_name = method_name\n    def __repr__(self):\n        return str(\n            {\n                \"line\": self.line_no,",
        "detail": "utils.debugger.tracepointdebug.probe.frame",
        "documentation": {}
    },
    {
        "label": "LogPoint",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.log_point",
        "description": "utils.debugger.tracepointdebug.probe.log_point",
        "peekOfCode": "class LogPoint(object):\n    def __init__(self, log_point_manager, log_point_config):\n        self.config = log_point_config\n        self.id = log_point_config.log_point_id\n        self.hit_count = 0\n        self._lock = Lock()\n        self._completed = False\n        self._cookie = None\n        self.log_point_manager = log_point_manager\n        self._import_hook_cleanup = None",
        "detail": "utils.debugger.tracepointdebug.probe.log_point",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.log_point",
        "description": "utils.debugger.tracepointdebug.probe.log_point",
        "peekOfCode": "logger = logging.getLogger(__name__)\n_MAX_SNAPSHOT_SIZE = 32768\n_MAX_FRAMES = 10\n_MAX_EXPAND_FRAMES = 2\nclass LogPoint(object):\n    def __init__(self, log_point_manager, log_point_config):\n        self.config = log_point_config\n        self.id = log_point_config.log_point_id\n        self.hit_count = 0\n        self._lock = Lock()",
        "detail": "utils.debugger.tracepointdebug.probe.log_point",
        "documentation": {}
    },
    {
        "label": "_MAX_SNAPSHOT_SIZE",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.log_point",
        "description": "utils.debugger.tracepointdebug.probe.log_point",
        "peekOfCode": "_MAX_SNAPSHOT_SIZE = 32768\n_MAX_FRAMES = 10\n_MAX_EXPAND_FRAMES = 2\nclass LogPoint(object):\n    def __init__(self, log_point_manager, log_point_config):\n        self.config = log_point_config\n        self.id = log_point_config.log_point_id\n        self.hit_count = 0\n        self._lock = Lock()\n        self._completed = False",
        "detail": "utils.debugger.tracepointdebug.probe.log_point",
        "documentation": {}
    },
    {
        "label": "_MAX_FRAMES",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.log_point",
        "description": "utils.debugger.tracepointdebug.probe.log_point",
        "peekOfCode": "_MAX_FRAMES = 10\n_MAX_EXPAND_FRAMES = 2\nclass LogPoint(object):\n    def __init__(self, log_point_manager, log_point_config):\n        self.config = log_point_config\n        self.id = log_point_config.log_point_id\n        self.hit_count = 0\n        self._lock = Lock()\n        self._completed = False\n        self._cookie = None",
        "detail": "utils.debugger.tracepointdebug.probe.log_point",
        "documentation": {}
    },
    {
        "label": "_MAX_EXPAND_FRAMES",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.log_point",
        "description": "utils.debugger.tracepointdebug.probe.log_point",
        "peekOfCode": "_MAX_EXPAND_FRAMES = 2\nclass LogPoint(object):\n    def __init__(self, log_point_manager, log_point_config):\n        self.config = log_point_config\n        self.id = log_point_config.log_point_id\n        self.hit_count = 0\n        self._lock = Lock()\n        self._completed = False\n        self._cookie = None\n        self.log_point_manager = log_point_manager",
        "detail": "utils.debugger.tracepointdebug.probe.log_point",
        "documentation": {}
    },
    {
        "label": "LogPointConfig",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.log_point_config",
        "description": "utils.debugger.tracepointdebug.probe.log_point_config",
        "peekOfCode": "class LogPointConfig(object):\n    def __init__(\n        self,\n        log_point_id,\n        file=None,\n        file_ref=None,\n        line=None,\n        client=None,\n        log_expression=None,\n        cond=None,",
        "detail": "utils.debugger.tracepointdebug.probe.log_point_config",
        "documentation": {}
    },
    {
        "label": "LogPointManager",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.log_point_manager",
        "description": "utils.debugger.tracepointdebug.probe.log_point_manager",
        "peekOfCode": "class LogPointManager(object):\n    __instance = None\n    def __init__(self, broker_manager):\n        self._lock = RLock()\n        self._log_points = {}\n        self.broker_manager = broker_manager\n        LogPointManager.__instance = self\n    @staticmethod\n    def instance(*args, **kwargs):\n        return (",
        "detail": "utils.debugger.tracepointdebug.probe.log_point_manager",
        "documentation": {}
    },
    {
        "label": "Snapshot",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.snapshot",
        "description": "utils.debugger.tracepointdebug.probe.snapshot",
        "peekOfCode": "class Snapshot(object):\n    def __init__(self, frames, method_name, file):\n        self.frames = frames\n        self.method_name = method_name\n        self.file = file",
        "detail": "utils.debugger.tracepointdebug.probe.snapshot",
        "documentation": {}
    },
    {
        "label": "SnapshotCollector",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "description": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "peekOfCode": "class SnapshotCollector(object):\n    def __init__(\n        self, max_size, max_frames, max_expand_frames, max_var_len=256, max_var_depth=4\n    ):\n        self.max_size = max_size\n        self.max_frames = max_frames\n        self.max_expand_frames = max_expand_frames\n        self.max_var_len = max_var_len\n        self.max_var_depth = max_var_depth\n        self.cur_size = 0",
        "detail": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "documentation": {}
    },
    {
        "label": "normalize_path",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "description": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "peekOfCode": "def normalize_path(path):\n    path = os.path.normpath(path)\n    for sys_path in sys.path:\n        if not sys_path:\n            continue\n        sys_path = os.path.join(sys_path, \"\")\n        if path.startswith(sys_path):\n            return path[len(sys_path) :]\n    return path\ndef _trim_string(s, max_len):",
        "detail": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "documentation": {}
    },
    {
        "label": "_PRIMITIVE_TYPES",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "description": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "peekOfCode": "_PRIMITIVE_TYPES = (\n    (type(None), float, complex, bool, slice, bytearray, six.text_type, six.binary_type)\n    + six.integer_types\n    + six.string_types\n)\n_TEXT_TYPES = (six.string_types, six.text_type)\n_DATE_TYPES = (datetime.date, datetime.time, datetime.timedelta)\n_VECTOR_TYPES = (tuple, list, set)\nclass SnapshotCollector(object):\n    def __init__(",
        "detail": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "documentation": {}
    },
    {
        "label": "_TEXT_TYPES",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "description": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "peekOfCode": "_TEXT_TYPES = (six.string_types, six.text_type)\n_DATE_TYPES = (datetime.date, datetime.time, datetime.timedelta)\n_VECTOR_TYPES = (tuple, list, set)\nclass SnapshotCollector(object):\n    def __init__(\n        self, max_size, max_frames, max_expand_frames, max_var_len=256, max_var_depth=4\n    ):\n        self.max_size = max_size\n        self.max_frames = max_frames\n        self.max_expand_frames = max_expand_frames",
        "detail": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "documentation": {}
    },
    {
        "label": "_DATE_TYPES",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "description": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "peekOfCode": "_DATE_TYPES = (datetime.date, datetime.time, datetime.timedelta)\n_VECTOR_TYPES = (tuple, list, set)\nclass SnapshotCollector(object):\n    def __init__(\n        self, max_size, max_frames, max_expand_frames, max_var_len=256, max_var_depth=4\n    ):\n        self.max_size = max_size\n        self.max_frames = max_frames\n        self.max_expand_frames = max_expand_frames\n        self.max_var_len = max_var_len",
        "detail": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "documentation": {}
    },
    {
        "label": "_VECTOR_TYPES",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "description": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "peekOfCode": "_VECTOR_TYPES = (tuple, list, set)\nclass SnapshotCollector(object):\n    def __init__(\n        self, max_size, max_frames, max_expand_frames, max_var_len=256, max_var_depth=4\n    ):\n        self.max_size = max_size\n        self.max_frames = max_frames\n        self.max_expand_frames = max_expand_frames\n        self.max_var_len = max_var_len\n        self.max_var_depth = max_var_depth",
        "detail": "utils.debugger.tracepointdebug.probe.snapshot_collector",
        "documentation": {}
    },
    {
        "label": "memoize",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.probe.source_code_helper",
        "description": "utils.debugger.tracepointdebug.probe.source_code_helper",
        "peekOfCode": "def memoize(function):\n    memo = {}\n    @wraps(function)\n    def wrapper(*args):\n        try:\n            return memo[args]\n        except KeyError:\n            rv = function(*args)\n            memo[args] = rv\n            return rv",
        "detail": "utils.debugger.tracepointdebug.probe.source_code_helper",
        "documentation": {}
    },
    {
        "label": "get_source_code",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.probe.source_code_helper",
        "description": "utils.debugger.tracepointdebug.probe.source_code_helper",
        "peekOfCode": "def get_source_code(file_path):\n    if file_path is None or file_path.endswith(\".pyc\"):\n        return None\n    try:\n        with open(file_path, \"rb\") as f:\n            file_content = f.read()\n            return file_content\n    except IOError as e:\n        debug_logger(\"Error reading file from file path: \" + file_path + \" err:\", e)\n    return None",
        "detail": "utils.debugger.tracepointdebug.probe.source_code_helper",
        "documentation": {}
    },
    {
        "label": "get_source_code_hash",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.probe.source_code_helper",
        "description": "utils.debugger.tracepointdebug.probe.source_code_helper",
        "peekOfCode": "def get_source_code_hash(file_path):\n    source_code = get_source_code(file_path)\n    if source_code is None:\n        return None\n    if six.PY2:\n        source_code = (\n            source_code.replace(\"\\r\\n\", \"\\n\")\n            .replace(\"\\r\\x00\\n\\x00\", \"\\n\\x00\")\n            .replace(\"\\r\", \"\\n\")\n        )",
        "detail": "utils.debugger.tracepointdebug.probe.source_code_helper",
        "documentation": {}
    },
    {
        "label": "TracePoint",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.trace_point",
        "description": "utils.debugger.tracepointdebug.probe.trace_point",
        "peekOfCode": "class TracePoint(object):\n    def __init__(self, trace_point_manager, trace_point_config):\n        self.config = trace_point_config\n        self.id = trace_point_config.trace_point_id\n        self.hit_count = 0\n        self._lock = Lock()\n        self._completed = False\n        self._cookie = None\n        self.trace_point_manager = trace_point_manager\n        self._import_hook_cleanup = None",
        "detail": "utils.debugger.tracepointdebug.probe.trace_point",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.trace_point",
        "description": "utils.debugger.tracepointdebug.probe.trace_point",
        "peekOfCode": "logger = logging.getLogger(__name__)\n_MAX_SNAPSHOT_SIZE = 32768\n_MAX_FRAMES = 10\n_MAX_EXPAND_FRAMES = 2\nclass TracePoint(object):\n    def __init__(self, trace_point_manager, trace_point_config):\n        self.config = trace_point_config\n        self.id = trace_point_config.trace_point_id\n        self.hit_count = 0\n        self._lock = Lock()",
        "detail": "utils.debugger.tracepointdebug.probe.trace_point",
        "documentation": {}
    },
    {
        "label": "_MAX_SNAPSHOT_SIZE",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.trace_point",
        "description": "utils.debugger.tracepointdebug.probe.trace_point",
        "peekOfCode": "_MAX_SNAPSHOT_SIZE = 32768\n_MAX_FRAMES = 10\n_MAX_EXPAND_FRAMES = 2\nclass TracePoint(object):\n    def __init__(self, trace_point_manager, trace_point_config):\n        self.config = trace_point_config\n        self.id = trace_point_config.trace_point_id\n        self.hit_count = 0\n        self._lock = Lock()\n        self._completed = False",
        "detail": "utils.debugger.tracepointdebug.probe.trace_point",
        "documentation": {}
    },
    {
        "label": "_MAX_FRAMES",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.trace_point",
        "description": "utils.debugger.tracepointdebug.probe.trace_point",
        "peekOfCode": "_MAX_FRAMES = 10\n_MAX_EXPAND_FRAMES = 2\nclass TracePoint(object):\n    def __init__(self, trace_point_manager, trace_point_config):\n        self.config = trace_point_config\n        self.id = trace_point_config.trace_point_id\n        self.hit_count = 0\n        self._lock = Lock()\n        self._completed = False\n        self._cookie = None",
        "detail": "utils.debugger.tracepointdebug.probe.trace_point",
        "documentation": {}
    },
    {
        "label": "_MAX_EXPAND_FRAMES",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.probe.trace_point",
        "description": "utils.debugger.tracepointdebug.probe.trace_point",
        "peekOfCode": "_MAX_EXPAND_FRAMES = 2\nclass TracePoint(object):\n    def __init__(self, trace_point_manager, trace_point_config):\n        self.config = trace_point_config\n        self.id = trace_point_config.trace_point_id\n        self.hit_count = 0\n        self._lock = Lock()\n        self._completed = False\n        self._cookie = None\n        self.trace_point_manager = trace_point_manager",
        "detail": "utils.debugger.tracepointdebug.probe.trace_point",
        "documentation": {}
    },
    {
        "label": "TracePointConfig",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.trace_point_config",
        "description": "utils.debugger.tracepointdebug.probe.trace_point_config",
        "peekOfCode": "class TracePointConfig(object):\n    def __init__(\n        self,\n        trace_point_id,\n        file=None,\n        file_ref=None,\n        line=None,\n        client=None,\n        cond=None,\n        expire_duration=None,",
        "detail": "utils.debugger.tracepointdebug.probe.trace_point_config",
        "documentation": {}
    },
    {
        "label": "TracePointManager",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.trace_point_manager",
        "description": "utils.debugger.tracepointdebug.probe.trace_point_manager",
        "peekOfCode": "class TracePointManager(object):\n    __instance = None\n    def __init__(self, broker_manager):\n        self._lock = RLock()\n        self._trace_points = {}\n        self.broker_manager = broker_manager\n        TracePointManager.__instance = self\n    @staticmethod\n    def instance(*args, **kwargs):\n        return (",
        "detail": "utils.debugger.tracepointdebug.probe.trace_point_manager",
        "documentation": {}
    },
    {
        "label": "Value",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.value",
        "description": "utils.debugger.tracepointdebug.probe.value",
        "peekOfCode": "class Value(object):\n    def __init__(self, var_type, value):\n        self.type = var_type\n        self.value = value\n    def __repr__(self):\n        return str(self.value)\n    def to_json(self):\n        return {\"@type\": str(self.type), \"@value\": self.value}",
        "detail": "utils.debugger.tracepointdebug.probe.value",
        "documentation": {}
    },
    {
        "label": "Variable",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.variable",
        "description": "utils.debugger.tracepointdebug.probe.variable",
        "peekOfCode": "class Variable(object):\n    def __init__(self, name, var_type, value):\n        self.name = name\n        self.type = var_type\n        self.value = value\n    def __repr__(self):\n        return str({\"name\": self.name, \"type\": self.type, \"value\": self.value})\n    def to_json(self):\n        return {\"@type\": str(self.type), \"@value\": self.value}",
        "detail": "utils.debugger.tracepointdebug.probe.variable",
        "documentation": {}
    },
    {
        "label": "Variables",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.probe.variables",
        "description": "utils.debugger.tracepointdebug.probe.variables",
        "peekOfCode": "class Variables(object):\n    def __init__(self, variables):\n        self.variables = variables\n    def to_json(self):\n        return {var.name: var.value for var in self.variables}",
        "detail": "utils.debugger.tracepointdebug.probe.variables",
        "documentation": {}
    },
    {
        "label": "TraceContext",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.trace.trace_context",
        "description": "utils.debugger.tracepointdebug.trace.trace_context",
        "peekOfCode": "class TraceContext:\n    def __init__(self, trace_id=None, transaction_id=None, span_id=None):\n        self.trace_id = trace_id\n        self.transaction_id = transaction_id\n        self.span_id = span_id\n    def get_trace_id(self):\n        return self.trace_id\n    def get_transaction_id(self):\n        return self.transaction_id\n    def get_span_id(self):",
        "detail": "utils.debugger.tracepointdebug.trace.trace_context",
        "documentation": {}
    },
    {
        "label": "TraceSupport",
        "kind": 6,
        "importPath": "utils.debugger.tracepointdebug.trace.trace_support",
        "description": "utils.debugger.tracepointdebug.trace.trace_support",
        "peekOfCode": "class TraceSupport:\n    TRACEPOINT_SNAPSHOT_EXIST_TAG = \"tracepoint.snapshot.exist\"\n    THUNDRA_CHECK_DISABLED = False\n    OPENTRACING_CHECK_DISABLED = False\n    @classmethod\n    def get_trace_context(cls):\n        trace_context = cls.get_trace_context_from_thundra()\n        if not trace_context:\n            trace_context = cls.get_trace_context_from_opentracing()\n        return trace_context",
        "detail": "utils.debugger.tracepointdebug.trace.trace_support",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.trace.trace_support",
        "description": "utils.debugger.tracepointdebug.trace.trace_support",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass TraceSupport:\n    TRACEPOINT_SNAPSHOT_EXIST_TAG = \"tracepoint.snapshot.exist\"\n    THUNDRA_CHECK_DISABLED = False\n    OPENTRACING_CHECK_DISABLED = False\n    @classmethod\n    def get_trace_context(cls):\n        trace_context = cls.get_trace_context_from_thundra()\n        if not trace_context:\n            trace_context = cls.get_trace_context_from_opentracing()",
        "detail": "utils.debugger.tracepointdebug.trace.trace_support",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.utils.log.logger",
        "description": "utils.debugger.tracepointdebug.utils.log.logger",
        "peekOfCode": "def get_logger(name):\n    global loggers\n    if loggers.get(name):\n        return loggers.get(name)\n    else:\n        format = \"%(asctime)s  - %(levelname)s - %(name)s - %(message)s\"\n        if name is None:\n            logger = logging.getLogger(__name__)\n        else:\n            logger = logging.getLogger(name)",
        "detail": "utils.debugger.tracepointdebug.utils.log.logger",
        "documentation": {}
    },
    {
        "label": "log_to_console",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.utils.log.logger",
        "description": "utils.debugger.tracepointdebug.utils.log.logger",
        "peekOfCode": "def log_to_console(message, handler):\n    logger = get_logger(handler)\n    logging.getLogger().handlers = []\n    logger.debug(message)\ndef debug_logger(msg, handler=None):\n    if ConfigProvider.get(config_names.SIDEKICK_DEBUG_ENABLE):\n        if hasattr(msg, \"__dict__\"):\n            log_to_console(msg, handler)\n            display = vars(msg)\n            log_to_console(display, handler)",
        "detail": "utils.debugger.tracepointdebug.utils.log.logger",
        "documentation": {}
    },
    {
        "label": "debug_logger",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.utils.log.logger",
        "description": "utils.debugger.tracepointdebug.utils.log.logger",
        "peekOfCode": "def debug_logger(msg, handler=None):\n    if ConfigProvider.get(config_names.SIDEKICK_DEBUG_ENABLE):\n        if hasattr(msg, \"__dict__\"):\n            log_to_console(msg, handler)\n            display = vars(msg)\n            log_to_console(display, handler)\n            for key, _ in display.items():\n                debug_logger_helper(getattr(msg, key), handler)\n        else:\n            log_to_console(msg, handler)",
        "detail": "utils.debugger.tracepointdebug.utils.log.logger",
        "documentation": {}
    },
    {
        "label": "debug_logger_helper",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.utils.log.logger",
        "description": "utils.debugger.tracepointdebug.utils.log.logger",
        "peekOfCode": "def debug_logger_helper(msg, handler):\n    if hasattr(msg, \"__dict__\"):\n        log_to_console(msg, handler)\n        display = vars(msg)\n        log_to_console(display, handler)\n        for key, _ in display.items():\n            debug_logger_helper(getattr(msg, key), handler)\ndef print_log_event_message(created_at, log_level, log_message):\n    print(\n        \"{created_at} [{log_level}] {log_message}\".format(",
        "detail": "utils.debugger.tracepointdebug.utils.log.logger",
        "documentation": {}
    },
    {
        "label": "print_log_event_message",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.utils.log.logger",
        "description": "utils.debugger.tracepointdebug.utils.log.logger",
        "peekOfCode": "def print_log_event_message(created_at, log_level, log_message):\n    print(\n        \"{created_at} [{log_level}] {log_message}\".format(\n            created_at=created_at, log_level=log_level, log_message=log_message\n        )\n    )",
        "detail": "utils.debugger.tracepointdebug.utils.log.logger",
        "documentation": {}
    },
    {
        "label": "loggers",
        "kind": 5,
        "importPath": "utils.debugger.tracepointdebug.utils.log.logger",
        "description": "utils.debugger.tracepointdebug.utils.log.logger",
        "peekOfCode": "loggers = {}\ndef get_logger(name):\n    global loggers\n    if loggers.get(name):\n        return loggers.get(name)\n    else:\n        format = \"%(asctime)s  - %(levelname)s - %(name)s - %(message)s\"\n        if name is None:\n            logger = logging.getLogger(__name__)\n        else:",
        "detail": "utils.debugger.tracepointdebug.utils.log.logger",
        "documentation": {}
    },
    {
        "label": "validate_file_name_and_line_no",
        "kind": 2,
        "importPath": "utils.debugger.tracepointdebug.utils.validation.validate_broker_request",
        "description": "utils.debugger.tracepointdebug.utils.validation.validate_broker_request",
        "peekOfCode": "def validate_file_name_and_line_no(file_name, line_no):\n    if not file_name or len(file_name) <= 0:\n        raise CodedException(FILE_NAME_IS_MANDATORY)\n    if not line_no or line_no <= 0:\n        raise CodedException(LINE_NUMBER_IS_MANDATORY)",
        "detail": "utils.debugger.tracepointdebug.utils.validation.validate_broker_request",
        "documentation": {}
    },
    {
        "label": "Administrator",
        "kind": 6,
        "importPath": "utils.administrator",
        "description": "utils.administrator",
        "peekOfCode": "class Administrator:\n    @staticmethod\n    def count_user_and_jokes():\n        return tuple(Insult.objects().count(), User.objects().count())",
        "detail": "utils.administrator",
        "documentation": {}
    },
    {
        "label": "InternalServerError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class InternalServerError(Exception):\n    pass\nclass SchemaValidationError(Exception):\n    pass\nclass BannedUserError(Exception):\n    pass\nclass EmailAlreadyExistsError(Exception):\n    pass\nclass UnauthorizedError(Exception):\n    pass",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "SchemaValidationError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class SchemaValidationError(Exception):\n    pass\nclass BannedUserError(Exception):\n    pass\nclass EmailAlreadyExistsError(Exception):\n    pass\nclass UnauthorizedError(Exception):\n    pass\nclass UserDoesNotExist(Exception):\n    pass",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "BannedUserError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class BannedUserError(Exception):\n    pass\nclass EmailAlreadyExistsError(Exception):\n    pass\nclass UnauthorizedError(Exception):\n    pass\nclass UserDoesNotExist(Exception):\n    pass\nclass ValidationError(Exception):\n    pass",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "EmailAlreadyExistsError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class EmailAlreadyExistsError(Exception):\n    pass\nclass UnauthorizedError(Exception):\n    pass\nclass UserDoesNotExist(Exception):\n    pass\nclass ValidationError(Exception):\n    pass\nclass InvaildTokenError(Exception):\n    pass",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UnauthorizedError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class UnauthorizedError(Exception):\n    pass\nclass UserDoesNotExist(Exception):\n    pass\nclass ValidationError(Exception):\n    pass\nclass InvaildTokenError(Exception):\n    pass\nclass DBConnectionError(Exception):\n    pass",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "UserDoesNotExist",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class UserDoesNotExist(Exception):\n    pass\nclass ValidationError(Exception):\n    pass\nclass InvaildTokenError(Exception):\n    pass\nclass DBConnectionError(Exception):\n    pass\nclass ResourceNotDFoundError(Exception):\n    pass",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class ValidationError(Exception):\n    pass\nclass InvaildTokenError(Exception):\n    pass\nclass DBConnectionError(Exception):\n    pass\nclass ResourceNotDFoundError(Exception):\n    pass\nerrors = {\n    \"InternalServerError\": {\"message\": \"Something went wrong\", \"status\": 500},",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "InvaildTokenError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class InvaildTokenError(Exception):\n    pass\nclass DBConnectionError(Exception):\n    pass\nclass ResourceNotDFoundError(Exception):\n    pass\nerrors = {\n    \"InternalServerError\": {\"message\": \"Something went wrong\", \"status\": 500},\n    \"SchemaValidationError\": {\n        \"message\": \"Request is missing required fields\",",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "DBConnectionError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class DBConnectionError(Exception):\n    pass\nclass ResourceNotDFoundError(Exception):\n    pass\nerrors = {\n    \"InternalServerError\": {\"message\": \"Something went wrong\", \"status\": 500},\n    \"SchemaValidationError\": {\n        \"message\": \"Request is missing required fields\",\n        \"status\": 400,\n    },",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "ResourceNotDFoundError",
        "kind": 6,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "class ResourceNotDFoundError(Exception):\n    pass\nerrors = {\n    \"InternalServerError\": {\"message\": \"Something went wrong\", \"status\": 500},\n    \"SchemaValidationError\": {\n        \"message\": \"Request is missing required fields\",\n        \"status\": 400,\n    },\n    \"EmailAlreadyExistsError\": {\n        \"message\": \"User with given email address already exists\",",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "errors",
        "kind": 5,
        "importPath": "utils.errors",
        "description": "utils.errors",
        "peekOfCode": "errors = {\n    \"InternalServerError\": {\"message\": \"Something went wrong\", \"status\": 500},\n    \"SchemaValidationError\": {\n        \"message\": \"Request is missing required fields\",\n        \"status\": 400,\n    },\n    \"EmailAlreadyExistsError\": {\n        \"message\": \"User with given email address already exists\",\n        \"status\": 409,\n    },",
        "detail": "utils.errors",
        "documentation": {}
    },
    {
        "label": "GateKeeper",
        "kind": 6,
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "peekOfCode": "class GateKeeper:\n    @staticmethod\n    def is_user_banned(email):\n        email = email.lower()\n        user = User.objects(email=email).first()\n        if user[\"status\"] != \"active\":\n            raise BannedUserError(\"The User Associated With That Token Has Been Banned\")\n        else:\n            return False\n    @staticmethod",
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "jwt_redis_blocklist",
        "kind": 5,
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "peekOfCode": "jwt_redis_blocklist = redis.StrictRedis(\n    host=os.getenv(\"REDIS_URI\"), port=6379, db=0, decode_responses=True\n)\nACCESS_EXPIRES = timedelta(hours=1)\nTOKEN_EXPIRES = timedelta(days=7)\nclass GateKeeper:\n    @staticmethod\n    def is_user_banned(email):\n        email = email.lower()\n        user = User.objects(email=email).first()",
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "ACCESS_EXPIRES",
        "kind": 5,
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "peekOfCode": "ACCESS_EXPIRES = timedelta(hours=1)\nTOKEN_EXPIRES = timedelta(days=7)\nclass GateKeeper:\n    @staticmethod\n    def is_user_banned(email):\n        email = email.lower()\n        user = User.objects(email=email).first()\n        if user[\"status\"] != \"active\":\n            raise BannedUserError(\"The User Associated With That Token Has Been Banned\")\n        else:",
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "TOKEN_EXPIRES",
        "kind": 5,
        "importPath": "utils.gatekeeper",
        "description": "utils.gatekeeper",
        "peekOfCode": "TOKEN_EXPIRES = timedelta(days=7)\nclass GateKeeper:\n    @staticmethod\n    def is_user_banned(email):\n        email = email.lower()\n        user = User.objects(email=email).first()\n        if user[\"status\"] != \"active\":\n            raise BannedUserError(\"The User Associated With That Token Has Been Banned\")\n        else:\n            return False",
        "detail": "utils.gatekeeper",
        "documentation": {}
    },
    {
        "label": "Jokester",
        "kind": 6,
        "importPath": "utils.jokester",
        "description": "utils.jokester",
        "peekOfCode": "class Jokester:\n    @staticmethod\n    def get_random_joke():\n        randomized_pipeline = [{\"$sample\": {\"size\": 1}}]\n        randomized_joke = str()\n        insult = Insult.objects().aggregate(randomized_pipeline)\n        for doc in insult:\n            randomized_joke = doc\n        return randomized_joke\n    @staticmethod",
        "detail": "utils.jokester",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp.config.from_object(Config)\napp.config[\"MONGODB_SETTINGS\"] = Config.MONGODB_DEV_SETTINGS\n#!SECTION Initialize the API Endpoints and Plugins\napi.init_app(app)\ninitialize_db(app)\nbcrypt = Bcrypt(app)\njwt = JWTManager(app)\n#!SECTION Server Error Logging\nif not app.debug:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config[\"MONGODB_SETTINGS\"]",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config[\"MONGODB_SETTINGS\"] = Config.MONGODB_DEV_SETTINGS\n#!SECTION Initialize the API Endpoints and Plugins\napi.init_app(app)\ninitialize_db(app)\nbcrypt = Bcrypt(app)\njwt = JWTManager(app)\n#!SECTION Server Error Logging\nif not app.debug:\n    file_handler = FileHandler(\"error.log\")\n    file_handler.setLevel(WARNING)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "bcrypt = Bcrypt(app)\njwt = JWTManager(app)\n#!SECTION Server Error Logging\nif not app.debug:\n    file_handler = FileHandler(\"error.log\")\n    file_handler.setLevel(WARNING)\n    app.logger.addHandler(file_handler)\nif __name__ == \"__main__\":\n    app.run(host=\"localhost\", port=6969, debug=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "jwt = JWTManager(app)\n#!SECTION Server Error Logging\nif not app.debug:\n    file_handler = FileHandler(\"error.log\")\n    file_handler.setLevel(WARNING)\n    app.logger.addHandler(file_handler)\nif __name__ == \"__main__\":\n    app.run(host=\"localhost\", port=6969, debug=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config(object):\n    DEBUG = True\n    SECRET_KEY = os.getenv(key=\"SECRET_KEY\")\n    MONGODB_DEV_SETTINGS = {\"host\": os.getenv(\"MONGODB_URI\"), \"alias\": \"default\"}\n    BUNDLE_ERROR = True\n    ENV = (\"Development\",)\n    JWT_TOKEN_LOCATION = (\"headers\",)\n    JWT_HEADER_NAME = (\"Authorization\",)\n    JWT_SECRET_KEY = (os.getenv(\"JWT_SECRET_KEY\"),)\n    SECRET_KEY = os.getenv(\"SECRET_KEY\")",
        "detail": "config",
        "documentation": {}
    }
]